        -:    0:Source:D:/GitHub_Repos/pwr_AiZO_project1/cmake-build-debug-coverage/_deps/googletest-src/googletest/src/gtest.cc
        -:    0:Graph:D:\GitHub_Repos\pwr_AiZO_project1\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\GitHub_Repos\pwr_AiZO_project1\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:
        -:   35:#include <ctype.h>
        -:   36:#include <stdarg.h>
        -:   37:#include <stdio.h>
        -:   38:#include <stdlib.h>
        -:   39:#include <time.h>
        -:   40:#include <wchar.h>
        -:   41:#include <wctype.h>
        -:   42:
        -:   43:#include <algorithm>
        -:   44:#include <chrono>  // NOLINT
        -:   45:#include <cmath>
        -:   46:#include <cstdint>
        -:   47:#include <initializer_list>
        -:   48:#include <iomanip>
        -:   49:#include <iterator>
        -:   50:#include <limits>
        -:   51:#include <list>
        -:   52:#include <map>
        -:   53:#include <ostream>  // NOLINT
        -:   54:#include <sstream>
        -:   55:#include <unordered_set>
        -:   56:#include <vector>
        -:   57:
        -:   58:#include "gtest/gtest-assertion-result.h"
        -:   59:#include "gtest/gtest-spi.h"
        -:   60:#include "gtest/internal/custom/gtest.h"
        -:   61:
        -:   62:#if GTEST_OS_LINUX
        -:   63:
        -:   64:#include <fcntl.h>   // NOLINT
        -:   65:#include <limits.h>  // NOLINT
        -:   66:#include <sched.h>   // NOLINT
        -:   67:// Declares vsnprintf().  This header is not available on Windows.
        -:   68:#include <strings.h>   // NOLINT
        -:   69:#include <sys/mman.h>  // NOLINT
        -:   70:#include <sys/time.h>  // NOLINT
        -:   71:#include <unistd.h>    // NOLINT
        -:   72:
        -:   73:#include <string>
        -:   74:
        -:   75:#elif GTEST_OS_ZOS
        -:   76:#include <sys/time.h>  // NOLINT
        -:   77:
        -:   78:// On z/OS we additionally need strings.h for strcasecmp.
        -:   79:#include <strings.h>   // NOLINT
        -:   80:
        -:   81:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   82:
        -:   83:#include <windows.h>  // NOLINT
        -:   84:#undef min
        -:   85:
        -:   86:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   87:
        -:   88:#include <windows.h>  // NOLINT
        -:   89:#undef min
        -:   90:
        -:   91:#ifdef _MSC_VER
        -:   92:#include <crtdbg.h>  // NOLINT
        -:   93:#endif
        -:   94:
        -:   95:#include <io.h>         // NOLINT
        -:   96:#include <sys/stat.h>   // NOLINT
        -:   97:#include <sys/timeb.h>  // NOLINT
        -:   98:#include <sys/types.h>  // NOLINT
        -:   99:
        -:  100:#if GTEST_OS_WINDOWS_MINGW
        -:  101:#include <sys/time.h>  // NOLINT
        -:  102:#endif                 // GTEST_OS_WINDOWS_MINGW
        -:  103:
        -:  104:#else
        -:  105:
        -:  106:// cpplint thinks that the header is already included, so we want to
        -:  107:// silence it.
        -:  108:#include <sys/time.h>  // NOLINT
        -:  109:#include <unistd.h>    // NOLINT
        -:  110:
        -:  111:#endif  // GTEST_OS_LINUX
        -:  112:
        -:  113:#if GTEST_HAS_EXCEPTIONS
        -:  114:#include <stdexcept>
        -:  115:#endif
        -:  116:
        -:  117:#if GTEST_CAN_STREAM_RESULTS_
        -:  118:#include <arpa/inet.h>   // NOLINT
        -:  119:#include <netdb.h>       // NOLINT
        -:  120:#include <sys/socket.h>  // NOLINT
        -:  121:#include <sys/types.h>   // NOLINT
        -:  122:#endif
        -:  123:
        -:  124:#include "src/gtest-internal-inl.h"
        -:  125:
        -:  126:#if GTEST_OS_WINDOWS
        -:  127:#define vsnprintf _vsnprintf
        -:  128:#endif  // GTEST_OS_WINDOWS
        -:  129:
        -:  130:#if GTEST_OS_MAC
        -:  131:#ifndef GTEST_OS_IOS
        -:  132:#include <crt_externs.h>
        -:  133:#endif
        -:  134:#endif
        -:  135:
        -:  136:#if GTEST_HAS_ABSL
        -:  137:#include "absl/debugging/failure_signal_handler.h"
        -:  138:#include "absl/debugging/stacktrace.h"
        -:  139:#include "absl/debugging/symbolize.h"
        -:  140:#include "absl/flags/parse.h"
        -:  141:#include "absl/flags/usage.h"
        -:  142:#include "absl/strings/str_cat.h"
        -:  143:#include "absl/strings/str_replace.h"
        -:  144:#endif  // GTEST_HAS_ABSL
        -:  145:
        -:  146:// Checks builtin compiler feature |x| while avoiding an extra layer of #ifdefs
        -:  147:// at the callsite.
        -:  148:#if defined(__has_builtin)
        -:  149:#define GTEST_HAS_BUILTIN(x) __has_builtin(x)
        -:  150:#else
        -:  151:#define GTEST_HAS_BUILTIN(x) 0
        -:  152:#endif  // defined(__has_builtin)
        -:  153:
        -:  154:namespace testing {
        -:  155:
        -:  156:using internal::CountIf;
        -:  157:using internal::ForEach;
        -:  158:using internal::GetElementOr;
        -:  159:using internal::Shuffle;
        -:  160:
        -:  161:// Constants.
        -:  162:
        -:  163:// A test whose test suite name or test name matches this filter is
        -:  164:// disabled and not run.
        -:  165:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  166:
        -:  167:// A test suite whose name matches this filter is considered a death
        -:  168:// test suite and will be run before test suites whose name doesn't
        -:  169:// match this filter.
        -:  170:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  171:
        -:  172:// A test filter that matches everything.
        -:  173:static const char kUniversalFilter[] = "*";
        -:  174:
        -:  175:// The default output format.
        -:  176:static const char kDefaultOutputFormat[] = "xml";
        -:  177:// The default output file.
        -:  178:static const char kDefaultOutputFile[] = "test_detail";
        -:  179:
        -:  180:// The environment variable name for the test shard index.
        -:  181:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  182:// The environment variable name for the total number of test shards.
        -:  183:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  184:// The environment variable name for the test shard status file.
        -:  185:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  186:
        -:  187:namespace internal {
        -:  188:
        -:  189:// The text used in failure messages to indicate the start of the
        -:  190:// stack trace.
        -:  191:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  192:
        -:  193:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  194:// is specified on the command line.
        -:  195:bool g_help_flag = false;
        -:  196:
        -:  197:// Utility function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  198:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  199:  FILE* fileout = nullptr;
    #####:  200:  FilePath output_file_path(output_file);
    %%%%%:  200-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  201:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  201-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  202:
    #####:  203:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  203-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  203-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  204:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  204-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  204-block  1
        -:  205:  }
    #####:  206:  if (fileout == nullptr) {
    %%%%%:  206-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  207:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  207-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  207-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  207-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  207-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  207-block  4
call   13 never executed
    $$$$$:  207-block  5
call   14 never executed
    $$$$$:  207-block  6
        -:  208:  }
    #####:  209:  return fileout;
    %%%%%:  209-block  0
    #####:  210:}
    %%%%%:  210-block  0
call    0 never executed
call    1 never executed
    $$$$$:  210-block  1
call    2 never executed
    $$$$$:  210-block  2
call    3 never executed
        -:  211:
        -:  212:}  // namespace internal
        -:  213:
        -:  214:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  215:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  216:static const char* GetDefaultFilter() {
        -:  217:  const char* const testbridge_test_only =
        1:  218:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  218-block  0
call    0 returned 1
        1:  219:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  220:    return testbridge_test_only;
    %%%%%:  220-block  0
        -:  221:  }
        1:  222:  return kUniversalFilter;
        1:  222-block  0
        -:  223:}
        -:  224:
        -:  225:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  226:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  227:static bool GetDefaultFailFast() {
        -:  228:  const char* const testbridge_test_runner_fail_fast =
        1:  229:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  229-block  0
call    0 returned 1
        1:  230:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  231:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  231-block  0
        -:  232:  }
        1:  233:  return false;
        1:  233-block  0
        -:  234:}
        -:  235:
        -:  236:}  // namespace testing
        -:  237:
        -:  238:GTEST_DEFINE_bool_(
        -:  239:    fail_fast,
        -:  240:    testing::internal::BoolFromGTestEnv("fail_fast",
        -:  241:                                        testing::GetDefaultFailFast()),
        -:  242:    "True if and only if a test failure should stop further test execution.");
        -:  243:
        -:  244:GTEST_DEFINE_bool_(
        -:  245:    also_run_disabled_tests,
        -:  246:    testing::internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  247:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  248:
        -:  249:GTEST_DEFINE_bool_(
        -:  250:    break_on_failure,
        -:  251:    testing::internal::BoolFromGTestEnv("break_on_failure", false),
        -:  252:    "True if and only if a failed assertion should be a debugger "
        -:  253:    "break-point.");
        -:  254:
        -:  255:GTEST_DEFINE_bool_(catch_exceptions,
        -:  256:                   testing::internal::BoolFromGTestEnv("catch_exceptions",
        -:  257:                                                       true),
        -:  258:                   "True if and only if " GTEST_NAME_
        -:  259:                   " should catch exceptions and treat them as test failures.");
        -:  260:
        -:  261:GTEST_DEFINE_string_(
        -:  262:    color, testing::internal::StringFromGTestEnv("color", "auto"),
        -:  263:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  264:    "and auto.  'auto' means to use colors if the output is "
        -:  265:    "being sent to a terminal and the TERM environment variable "
        -:  266:    "is set to a terminal type that supports colors.");
        -:  267:
        -:  268:GTEST_DEFINE_string_(
        -:  269:    filter,
        -:  270:    testing::internal::StringFromGTestEnv("filter",
        -:  271:                                          testing::GetDefaultFilter()),
        -:  272:    "A colon-separated list of glob (not regex) patterns "
        -:  273:    "for filtering the tests to run, optionally followed by a "
        -:  274:    "'-' and a : separated list of negative patterns (tests to "
        -:  275:    "exclude).  A test is run if it matches one of the positive "
        -:  276:    "patterns and does not match any of the negative patterns.");
        -:  277:
        -:  278:GTEST_DEFINE_bool_(
        -:  279:    install_failure_signal_handler,
        -:  280:    testing::internal::BoolFromGTestEnv("install_failure_signal_handler",
        -:  281:                                        false),
        -:  282:    "If true and supported on the current platform, " GTEST_NAME_
        -:  283:    " should "
        -:  284:    "install a signal handler that dumps debugging information when fatal "
        -:  285:    "signals are raised.");
        -:  286:
        -:  287:GTEST_DEFINE_bool_(list_tests, false, "List all tests without running them.");
        -:  288:
        -:  289:// The net priority order after flag processing is thus:
        -:  290://   --gtest_output command line flag
        -:  291://   GTEST_OUTPUT environment variable
        -:  292://   XML_OUTPUT_FILE environment variable
        -:  293://   ''
        -:  294:GTEST_DEFINE_string_(
        -:  295:    output,
        -:  296:    testing::internal::StringFromGTestEnv(
        -:  297:        "output", testing::internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  298:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  299:    "optionally followed by a colon and an output file name or directory. "
        -:  300:    "A directory is indicated by a trailing pathname separator. "
        -:  301:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  302:    "If a directory is specified, output files will be created "
        -:  303:    "within that directory, with file-names based on the test "
        -:  304:    "executable's name and, if necessary, made unique by adding "
        -:  305:    "digits.");
        -:  306:
        -:  307:GTEST_DEFINE_bool_(
        -:  308:    brief, testing::internal::BoolFromGTestEnv("brief", false),
        -:  309:    "True if only test failures should be displayed in text output.");
        -:  310:
        -:  311:GTEST_DEFINE_bool_(print_time,
        -:  312:                   testing::internal::BoolFromGTestEnv("print_time", true),
        -:  313:                   "True if and only if " GTEST_NAME_
        -:  314:                   " should display elapsed time in text output.");
        -:  315:
        -:  316:GTEST_DEFINE_bool_(print_utf8,
        -:  317:                   testing::internal::BoolFromGTestEnv("print_utf8", true),
        -:  318:                   "True if and only if " GTEST_NAME_
        -:  319:                   " prints UTF8 characters as text.");
        -:  320:
        -:  321:GTEST_DEFINE_int32_(
        -:  322:    random_seed, testing::internal::Int32FromGTestEnv("random_seed", 0),
        -:  323:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  324:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  325:
        -:  326:GTEST_DEFINE_int32_(
        -:  327:    repeat, testing::internal::Int32FromGTestEnv("repeat", 1),
        -:  328:    "How many times to repeat each test.  Specify a negative number "
        -:  329:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  330:
        -:  331:GTEST_DEFINE_bool_(
        -:  332:    recreate_environments_when_repeating,
        -:  333:    testing::internal::BoolFromGTestEnv("recreate_environments_when_repeating",
        -:  334:                                        false),
        -:  335:    "Controls whether global test environments are recreated for each repeat "
        -:  336:    "of the tests. If set to false the global test environments are only set "
        -:  337:    "up once, for the first iteration, and only torn down once, for the last. "
        -:  338:    "Useful for shaking out flaky tests with stable, expensive test "
        -:  339:    "environments. If --gtest_repeat is set to a negative number, meaning "
        -:  340:    "there is no last run, the environments will always be recreated to avoid "
        -:  341:    "leaks.");
        -:  342:
        -:  343:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  344:                   "True if and only if " GTEST_NAME_
        -:  345:                   " should include internal stack frames when "
        -:  346:                   "printing test failure stack traces.");
        -:  347:
        -:  348:GTEST_DEFINE_bool_(shuffle,
        -:  349:                   testing::internal::BoolFromGTestEnv("shuffle", false),
        -:  350:                   "True if and only if " GTEST_NAME_
        -:  351:                   " should randomize tests' order on every run.");
        -:  352:
        -:  353:GTEST_DEFINE_int32_(
        -:  354:    stack_trace_depth,
        -:  355:    testing::internal::Int32FromGTestEnv("stack_trace_depth",
        -:  356:                                         testing::kMaxStackTraceDepth),
        -:  357:    "The maximum number of stack frames to print when an "
        -:  358:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  359:
        -:  360:GTEST_DEFINE_string_(
        -:  361:    stream_result_to,
        -:  362:    testing::internal::StringFromGTestEnv("stream_result_to", ""),
        -:  363:    "This flag specifies the host name and the port number on which to stream "
        -:  364:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  365:    "Linux.");
        -:  366:
        -:  367:GTEST_DEFINE_bool_(
        -:  368:    throw_on_failure,
        -:  369:    testing::internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  370:    "When this flag is specified, a failed assertion will throw an exception "
        -:  371:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  372:    "otherwise. For use with an external test framework.");
        -:  373:
        -:  374:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  375:GTEST_DEFINE_string_(
        -:  376:    flagfile, testing::internal::StringFromGTestEnv("flagfile", ""),
        -:  377:    "This flag specifies the flagfile to read command-line flags from.");
        -:  378:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  379:
        -:  380:namespace testing {
        -:  381:namespace internal {
        -:  382:
        -:  383:const uint32_t Random::kMaxRange;
        -:  384:
        -:  385:// Generates a random number from [0, range), using a Linear
        -:  386:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  387:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  388:uint32_t Random::Generate(uint32_t range) {
        -:  389:  // These constants are the same as are used in glibc's rand(3).
        -:  390:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  391:  state_ = static_cast<uint32_t>(1103515245ULL * state_ + 12345U) % kMaxRange;
        -:  392:
    #####:  393:  GTEST_CHECK_(range > 0) << "Cannot generate a number in the range [0, 0).";
    %%%%%:  393-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  393-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  393-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  393-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  393-block  4
call   13 never executed
    $$$$$:  393-block  5
call   14 never executed
    $$$$$:  393-block  6
call   15 never executed
    #####:  394:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  394-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  394-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  394-block  2
call    6 never executed
    %%%%%:  394-block  3
call    7 never executed
    $$$$$:  394-block  4
call    8 never executed
    #####:  395:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  395-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  395-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####:  396:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  396-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  396-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  396-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -:  397:
        -:  398:  // Converting via modulus introduces a bit of downward bias, but
        -:  399:  // it's simple, and a linear congruential generator isn't too good
        -:  400:  // to begin with.
    #####:  401:  return state_ % range;
    %%%%%:  401-block  0
    %%%%%:  401-block  1
        -:  402:}
        -:  403:
        -:  404:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  405:// Google Test.  Useful for catching the user mistake of not initializing
        -:  406:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 0 returned 0% blocks executed 0%
    #####:  407:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
    %%%%%:  407-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  407-block  1
call    3 never executed
    %%%%%:  407-block  2
call    4 never executed
    %%%%%:  407-block  3
        -:  408:
        -:  409:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  410:// results of calling a given int-returning method on each.
        -:  411:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 0 returned 0% blocks executed 0%
    #####:  412:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  413:                                int (TestSuite::*method)() const) {
    #####:  414:  int sum = 0;
    #####:  415:  for (size_t i = 0; i < case_list.size(); i++) {
    %%%%%:  415-block  0
    %%%%%:  415-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####:  416:    sum += (case_list[i]->*method)();
    %%%%%:  416-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  416-block  1
    %%%%%:  416-block  2
    %%%%%:  416-block  3
call    3 never executed
        -:  417:  }
    #####:  418:  return sum;
    %%%%%:  418-block  0
        -:  419:}
        -:  420:
        -:  421:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  422:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  423:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  423-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  423-block  2
    %%%%%:  423-block  3
    %%%%%:  423-block  4
        -:  424:}
        -:  425:
        -:  426:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  427:static bool TestSuiteFailed(const TestSuite* test_suite) {
    #####:  428:  return test_suite->should_run() && test_suite->Failed();
    %%%%%:  428-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  428-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  428-block  2
    %%%%%:  428-block  3
    %%%%%:  428-block  4
        -:  429:}
        -:  430:
        -:  431:// Returns true if and only if test_suite contains at least one test that
        -:  432:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  433:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
    #####:  434:  return test_suite->should_run();
    %%%%%:  434-block  0
call    0 never executed
        -:  435:}
        -:  436:
        -:  437:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  438:AssertHelper::AssertHelper(TestPartResult::Type type, const char* file,
    #####:  439:                           int line, const char* message)
    #####:  440:    : data_(new AssertHelperData(type, file, line, message)) {}
    %%%%%:  440-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  440-block  1
    $$$$$:  440-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$:  440-block  3
call    6 never executed
        -:  441:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  442:AssertHelper::~AssertHelper() { delete data_; }
    %%%%%:  442-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  442-block  1
call    2 never executed
call    3 never executed
        -:  443:
        -:  444:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  445:void AssertHelper::operator=(const Message& message) const {
    #####:  446:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%:  446-block  0
call    0 never executed
    #####:  447:      data_->type, data_->file, data_->line,
    %%%%%:  447-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  448:      AppendUserMessage(data_->message, message),
    %%%%%:  448-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  448-block  1
call    3 never executed
    $$$$$:  448-block  2
call    4 never executed
    $$$$$:  448-block  3
    #####:  449:      UnitTest::GetInstance()->impl()->CurrentOsStackTraceExceptTop(1)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  449-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$:  449-block  1
call    8 never executed
        -:  450:      // Skips the stack frame for this function itself.
        -:  451:  );  // NOLINT
    #####:  452:}
        -:  453:
        -:  454:namespace {
        -:  455:
        -:  456:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  457:// to creates test cases for it, a synthetic test case is
        -:  458:// inserted to report ether an error or a log message.
        -:  459://
        -:  460:// This configuration bit will likely be removed at some point.
        -:  461:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  462:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  463:
        -:  464:// A test that fails at a given file/line location with a given message.
        -:  465:class FailureTest : public Test {
        -:  466: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  467:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  468:                       bool as_error)
    #####:  469:      : loc_(loc),
    #####:  470:        error_message_(std::move(error_message)),
    %%%%%:  470-block  0
call    0 never executed
call    1 never executed
    #####:  471:        as_error_(as_error) {}
    %%%%%:  471-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$:  471-block  1
call    4 never executed
        -:  472:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  473:  void TestBody() override {
    #####:  474:    if (as_error_) {
    %%%%%:  474-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  475:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  475-block  0
call    3 never executed
    $$$$$:  475-block  1
call    4 never executed
    $$$$$:  475-block  2
    #####:  476:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  476-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  476-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  476-block  2
call    6 never executed
    %%%%%:  476-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
    $$$$$:  476-block  4
call   11 never executed
        -:  477:    } else {
    #####:  478:      std::cout << error_message_ << std::endl;
    %%%%%:  478-block  0
call    0 never executed
call    1 never executed
        -:  479:    }
    #####:  480:  }
    %%%%%:  480-block  0
        -:  481:
        -:  482: private:
        -:  483:  const CodeLocation loc_;
        -:  484:  const std::string error_message_;
        -:  485:  const bool as_error_;
        -:  486:};
        -:  487:
        -:  488:}  // namespace
        -:  489:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  490:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
    #####:  491:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
    %%%%%:  491-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  492:}
        -:  493:
        -:  494:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  495:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  496:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  496-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  496-block  1
    %%%%%:  496-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  496-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  496-block  4
call    9 never executed
    $$$$$:  496-block  5
call   10 never executed
    $$$$$:  496-block  6
    $$$$$:  496-block  7
    #####:  497:}
        -:  498:
        -:  499:// If this parameterized test suite has no instantiations (and that
        -:  500:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  501:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  502:                             bool has_test_p) {
    #####:  503:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  503-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  504:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  504-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  504-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  504-block  2
    %%%%%:  504-block  3
    $$$$$:  504-block  4
    $$$$$:  504-block  5
        -:  505:
    #####:  506:  const char kMissingInstantiation[] =  //
        -:  507:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  508:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  509:      "ones provided expand to nothing."
        -:  510:      "\n\n"
        -:  511:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  512:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  513:      "placed in a library that may be linked in to get other utilities.)";
        -:  514:
    #####:  515:  const char kMissingTestCase[] =  //
        -:  516:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  517:      "defined via TEST_P . No test cases will run."
        -:  518:      "\n\n"
        -:  519:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  520:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  521:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  522:      "removed but the rest got left behind.";
        -:  523:
        -:  524:  std::string message =
    #####:  525:      "Parameterized test suite " + name +
    %%%%%:  525-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  525-block  1
    %%%%%:  525-block  2
    %%%%%:  525-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  525-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
call    9 never executed
    $$$$$:  525-block  5
call   10 never executed
    $$$$$:  525-block  6
call   11 never executed
    $$$$$:  525-block  7
    $$$$$:  525-block  8
    #####:  526:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  526-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  526-block  1
call    4 never executed
    $$$$$:  526-block  2
        -:  527:      "\n\n"
        -:  528:      "To suppress this error for this test suite, insert the following line "
        -:  529:      "(in a non-header) in the namespace it is defined in:"
        -:  530:      "\n\n"
    #####:  531:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  531-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  531-block  1
call    3 never executed
    $$$$$:  531-block  2
call    4 never executed
    $$$$$:  531-block  3
    #####:  532:      name + ");";
    %%%%%:  532-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  533:
    #####:  534:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  534-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  534-block  1
call    6 never executed
    $$$$$:  534-block  2
call    7 never executed
    $$$$$:  534-block  3
    #####:  535:  RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  536:      "GoogleTestVerification", full_name.c_str(),
        -:  537:      nullptr,  // No type parameter.
        -:  538:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  539:      location.file.c_str(), location.line, [message, location] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  539-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  539-block  1
call    6 never executed
    %%%%%:  539-block  2
call    7 never executed
    $$$$$:  539-block  3
call    8 never executed
    $$$$$:  539-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  539-block  5
call   11 never executed
    $$$$$:  539-block  6
    #####:  540:        return new FailureTest(location, message,
    #####:  541:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  541-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  541-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  541-block  2
    %%%%%:  541-block  3
call    7 never executed
    %%%%%:  541-block  4
    $$$$$:  541-block  5
call    8 never executed
    $$$$$:  541-block  6
    $$$$$:  541-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  541-block  8
call   11 never executed
        -:  542:      });
    #####:  543:}
call    0 never executed
call    1 never executed
    $$$$$:  543-block  0
call    2 never executed
    $$$$$:  543-block  1
call    3 never executed
        -:  544:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  545:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  546:                                        CodeLocation code_location) {
    #####:  547:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  547-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  547-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  547-block  2
call    8 never executed
    $$$$$:  547-block  3
call    9 never executed
        -:  548:      test_suite_name, code_location);
    #####:  549:}
        -:  550:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  551:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
    #####:  552:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterInstantiation(
    %%%%%:  552-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  553:      case_name);
    #####:  554:}
        -:  555:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  556:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  557:    const char* test_suite_name, CodeLocation code_location) {
    #####:  558:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  558-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  558-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  558-block  2
call    6 never executed
    $$$$$:  558-block  3
call    7 never executed
    $$$$$:  558-block  4
    $$$$$:  558-block  5
    #####:  559:                  TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  559-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
    $$$$$:  559-block  2
call    8 never executed
    $$$$$:  559-block  3
call    9 never executed
    $$$$$:  559-block  4
    $$$$$:  559-block  5
    #####:  560:}
        -:  561:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  562:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  563:    const char* test_suite_name) {
    #####:  564:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  564-block  0
    %%%%%:  564-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  564-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  564-block  3
call    6 never executed
    $$$$$:  564-block  4
call    7 never executed
    $$$$$:  564-block  5
    $$$$$:  564-block  6
    #####:  565:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  566:    it->second.instantiated = true;
    %%%%%:  566-block  0
call    0 never executed
        -:  567:  } else {
    #####:  568:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  568-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  568-block  1
call    3 never executed
    %%%%%:  568-block  2
call    4 never executed
    $$$$$:  568-block  3
call    5 never executed
    $$$$$:  568-block  4
    #####:  569:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  569-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  569-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -:  570:  }
    #####:  571:}
    %%%%%:  571-block  0
        -:  572:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 0 returned 0% blocks executed 0%
    #####:  573:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
    #####:  574:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  574-block  0
call    0 never executed
    #####:  575:  for (const auto& testcase : suites_) {
call    0 never executed
call    1 never executed
    %%%%%:  575-block  0
call    2 never executed
    %%%%%:  575-block  1
call    3 never executed
    %%%%%:  575-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####:  576:    if (testcase.second.instantiated) continue;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  576-block  0
    %%%%%:  576-block  1
    #####:  577:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  577-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  577-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  577-block  2
    $$$$$:  577-block  3
    $$$$$:  577-block  4
        -:  578:
        -:  579:    std::string message =
    #####:  580:        "Type parameterized test suite " + testcase.first +
    %%%%%:  580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
    $$$$$:  580-block  1
call    5 never executed
    $$$$$:  580-block  2
call    6 never executed
    $$$$$:  580-block  3
    $$$$$:  580-block  4
        -:  581:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  582:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  583:        "\n\n"
        -:  584:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  585:        "part of binaries that intend to use them. (As opposed to, for "
        -:  586:        "example, being placed in a library that may be linked in to get other "
        -:  587:        "utilities.)"
        -:  588:        "\n\n"
        -:  589:        "To suppress this error for this test suite, insert the following line "
        -:  590:        "(in a non-header) in the namespace it is defined in:"
        -:  591:        "\n\n"
    #####:  592:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  592-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  592-block  1
call    3 never executed
    $$$$$:  592-block  2
call    4 never executed
    $$$$$:  592-block  3
    #####:  593:        testcase.first + ");";
    %%%%%:  593-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  593-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  594:
        -:  595:    std::string full_name =
    #####:  596:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  596-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  596-block  1
call    6 never executed
    $$$$$:  596-block  2
call    7 never executed
    $$$$$:  596-block  3
    #####:  597:    RegisterTest(  //
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -:  598:        "GoogleTestVerification", full_name.c_str(),
        -:  599:        nullptr,  // No type parameter.
        -:  600:        nullptr,  // No value parameter.
        -:  601:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  602:        testcase.second.code_location.line, [message, testcase] {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  602-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  602-block  1
call    6 never executed
    %%%%%:  602-block  2
call    7 never executed
    $$$$$:  602-block  3
call    8 never executed
    $$$$$:  602-block  4
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  602-block  5
call   11 never executed
    $$$$$:  602-block  6
    #####:  603:          return new FailureTest(testcase.second.code_location, message,
    #####:  604:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  604-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  604-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  604-block  2
    %%%%%:  604-block  3
call    7 never executed
    %%%%%:  604-block  4
    $$$$$:  604-block  5
call    8 never executed
    $$$$$:  604-block  6
    $$$$$:  604-block  7
branch  9 never executed (fallthrough)
branch 10 never executed
    $$$$$:  604-block  8
call   11 never executed
        -:  605:        });
    #####:  606:  }
call    0 never executed
call    1 never executed
    $$$$$:  606-block  0
call    2 never executed
    $$$$$:  606-block  1
call    3 never executed
    #####:  607:}
    %%%%%:  607-block  0
        -:  608:
        -:  609:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  610:static ::std::vector<std::string> g_argvs;
        -:  611:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  612:::std::vector<std::string> GetArgvs() {
        -:  613:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  614:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  615:  // ::string. This code converts it to the appropriate type.
        -:  616:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  617:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  618:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
    #####:  619:  return g_argvs;
    %%%%%:  619-block  0
call    0 never executed
        -:  620:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  621:}
        -:  622:
        -:  623:// Returns the current application's name, removing directory path if that
        -:  624:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  625:FilePath GetCurrentExecutableName() {
    #####:  626:  FilePath result;
    %%%%%:  626-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  627:
        -:  628:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
    #####:  629:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
    %%%%%:  629-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  629-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  629-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  629-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  629-block  4
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$:  629-block  5
call   16 never executed
    $$$$$:  629-block  6
call   17 never executed
    $$$$$:  629-block  7
call   18 never executed
    $$$$$:  629-block  8
    $$$$$:  629-block  9
    $$$$$:  629-block 10
        -:  630:#else
        -:  631:  result.Set(FilePath(GetArgvs()[0]));
        -:  632:#endif  // GTEST_OS_WINDOWS
        -:  633:
    #####:  634:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  634-block  0
    #####:  635:}
    %%%%%:  635-block  0
call    0 never executed
    $$$$$:  635-block  1
call    1 never executed
        -:  636:
        -:  637:// Functions for processing the gtest_output flag.
        -:  638:
        -:  639:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  640:std::string UnitTestOptions::GetOutputFormat() {
    #####:  641:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  642:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  642-block  0
call    0 never executed
    #####:  643:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  644:  return (colon == nullptr)
    #####:  645:             ? std::string(gtest_output_flag)
        -:  646:             : std::string(gtest_output_flag,
    #####:  647:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  647-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  647-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  647-block  2
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  647-block  3
branch 10 never executed (fallthrough)
branch 11 never executed
    %%%%%:  647-block  4
    $$$$$:  647-block  5
branch 12 never executed (fallthrough)
branch 13 never executed
    $$$$$:  647-block  6
    $$$$$:  647-block  7
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  647-block  8
    #####:  648:}
    %%%%%:  648-block  0
call    0 never executed
    $$$$$:  648-block  1
call    1 never executed
        -:  649:
        -:  650:// Returns the name of the requested output file, or the default if none
        -:  651:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  652:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  653:  std::string s = GTEST_FLAG_GET(output);
    %%%%%:  653-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  654:  const char* const gtest_output_flag = s.c_str();
    %%%%%:  654-block  0
call    0 never executed
        -:  655:
    #####:  656:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  657:  if (format.empty()) format = std::string(kDefaultOutputFormat);
    %%%%%:  657-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  657-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  657-block  2
call    6 never executed
call    7 never executed
    $$$$$:  657-block  3
    $$$$$:  657-block  4
        -:  658:
    #####:  659:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  660:  if (colon == nullptr)
    %%%%%:  660-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  661:    return internal::FilePath::MakeFileName(
    %%%%%:  661-block  0
call    0 never executed
    %%%%%:  661-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  661-block  2
call    4 never executed
    $$$$$:  661-block  3
call    5 never executed
    $$$$$:  661-block  4
    #####:  662:               internal::FilePath(
    %%%%%:  662-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  662-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  662-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  662-block  3
call   12 never executed
    $$$$$:  662-block  4
call   13 never executed
    $$$$$:  662-block  5
    $$$$$:  662-block  6
    $$$$$:  662-block  7
        -:  663:                   UnitTest::GetInstance()->original_working_dir()),
    #####:  664:               internal::FilePath(kDefaultOutputFile), 0, format.c_str())
    %%%%%:  664-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  664-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
call    7 never executed
    $$$$$:  664-block  2
call    8 never executed
    $$$$$:  664-block  3
call    9 never executed
    $$$$$:  664-block  4
    $$$$$:  664-block  5
    $$$$$:  664-block  6
    #####:  665:        .string();
    %%%%%:  665-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  665-block  1
        -:  666:
    #####:  667:  internal::FilePath output_name(colon + 1);
    %%%%%:  667-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  667-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  667-block  2
call    6 never executed
    $$$$$:  667-block  3
call    7 never executed
    $$$$$:  667-block  4
    $$$$$:  667-block  5
    #####:  668:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  669:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  669-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  669-block  1
call    3 never executed
    $$$$$:  669-block  2
call    4 never executed
    $$$$$:  669-block  3
    #####:  670:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  670-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  670-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  670-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
call   10 never executed
call   11 never executed
    $$$$$:  670-block  3
call   12 never executed
    $$$$$:  670-block  4
call   13 never executed
    $$$$$:  670-block  5
    $$$$$:  670-block  6
    $$$$$:  670-block  7
    #####:  671:        internal::FilePath(colon + 1));
    %%%%%:  671-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  671-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  671-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
    $$$$$:  671-block  3
call   11 never executed
    $$$$$:  671-block  4
call   12 never executed
    $$$$$:  671-block  5
    $$$$$:  671-block  6
    $$$$$:  671-block  7
        -:  672:
    #####:  673:  if (!output_name.IsDirectory()) return output_name.string();
    %%%%%:  673-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  673-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  673-block  2
        -:  674:
        -:  675:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  676:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  676-block  0
call    3 never executed
    $$$$$:  676-block  1
call    4 never executed
    $$$$$:  676-block  2
    #####:  677:      GetOutputFormat().c_str()));
    %%%%%:  677-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  677-block  1
call    3 never executed
    %%%%%:  677-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$:  677-block  3
call    8 never executed
    $$$$$:  677-block  4
    #####:  678:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  678-block  0
    #####:  679:}
    %%%%%:  679-block  0
call    0 never executed
    %%%%%:  679-block  1
call    1 never executed
    %%%%%:  679-block  2
call    2 never executed
call    3 never executed
    $$$$$:  679-block  3
call    4 never executed
    $$$$$:  679-block  4
call    5 never executed
    $$$$$:  679-block  5
call    6 never executed
    $$$$$:  679-block  6
call    7 never executed
        -:  680:
        -:  681:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  682:// pattern consists of regular characters, single-character wildcards (?), and
        -:  683:// multi-character wildcards (*).
        -:  684://
        -:  685:// This function implements a linear-time string globbing algorithm based on
        -:  686:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 8 returned 100% blocks executed 74%
        8:  687:static bool PatternMatchesString(const std::string& name_str,
        -:  688:                                 const char* pattern, const char* pattern_end) {
        8:  689:  const char* name = name_str.c_str();
        8:  689-block  0
call    0 returned 8
        8:  690:  const char* const name_begin = name;
        8:  691:  const char* const name_end = name + name_str.size();
call    0 returned 8
        -:  692:
        8:  693:  const char* pattern_next = pattern;
        8:  694:  const char* name_next = name;
        -:  695:
     236*:  696:  while (pattern < pattern_end || name < name_end) {
      236:  696-block  0
branch  0 taken 236
branch  1 taken 0 (fallthrough)
    %%%%%:  696-block  1
branch  2 never executed
branch  3 never executed (fallthrough)
      236:  697:    if (pattern < pattern_end) {
      236:  697-block  0
branch  0 taken 236 (fallthrough)
branch  1 taken 0
      236:  698:      switch (*pattern) {
      236:  698-block  0
branch  0 taken 118
branch  1 taken 0
branch  2 taken 118
      118:  699:        default:  // Match an ordinary character.
     118*:  700:          if (name < name_end && *name == *pattern) {
      118:  700-block  0
branch  0 taken 110 (fallthrough)
branch  1 taken 8
      110:  700-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 110
    #####:  701:            ++pattern;
    #####:  702:            ++name;
    #####:  703:            continue;
    %%%%%:  703-block  0
        -:  704:          }
      118:  705:          break;
      118:  705-block  0
    #####:  706:        case '?':  // Match any single character.
    #####:  707:          if (name < name_end) {
    %%%%%:  707-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  708:            ++pattern;
    #####:  709:            ++name;
    #####:  710:            continue;
    %%%%%:  710-block  0
        -:  711:          }
    #####:  712:          break;
    %%%%%:  712-block  0
      118:  713:        case '*':
        -:  714:          // Match zero or more characters. Start by skipping over the wildcard
        -:  715:          // and matching zero characters from name. If that fails, restart and
        -:  716:          // match one more character than the last attempt.
      118:  717:          pattern_next = pattern;
      118:  718:          name_next = name + 1;
      118:  719:          ++pattern;
      118:  720:          continue;
      118:  720-block  0
        -:  721:      }
        -:  722:    }
        -:  723:    // Failed to match a character. Restart if possible.
      118:  724:    if (name_begin < name_next && name_next <= name_end) {
      118:  724-block  0
branch  0 taken 118 (fallthrough)
branch  1 taken 0
      118:  724-block  1
branch  2 taken 110 (fallthrough)
branch  3 taken 8
      110:  725:      pattern = pattern_next;
      110:  726:      name = name_next;
      110:  727:      continue;
      110:  727-block  0
        -:  728:    }
        8:  729:    return false;
        8:  729-block  0
        -:  730:  }
    #####:  731:  return true;
    %%%%%:  731-block  0
        -:  732:}
        -:  733:
        -:  734:namespace {
        -:  735:
function _ZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 100%
        8:  736:bool IsGlobPattern(const std::string& pattern) {
        8:  737:  return std::any_of(pattern.begin(), pattern.end(),
        8:  737-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
function _ZZN7testing8internal12_GLOBAL__N_113IsGlobPatternERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlcE_clEc called 8 returned 100% blocks executed 83%
      16*:  738:                     [](const char c) { return c == '?' || c == '*'; });
        8:  738-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8:  738-block  1
branch  2 taken 8 (fallthrough)
branch  3 taken 0
        8:  738-block  2
    %%%%%:  738-block  3
        8:  738-block  4
        -:  739:}
        -:  740:
        -:  741:class UnitTestFilter {
        -:  742: public:
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2Ev called 0 returned 0% blocks executed 0%
    #####:  743:  UnitTestFilter() = default;
    %%%%%:  743-block  0
call    0 never executed
call    1 never executed
        -:  744:
        -:  745:  // Constructs a filter from a string of patterns separated by `:`.
function _ZN7testing8internal12_GLOBAL__N_114UnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 76%
        4:  746:  explicit UnitTestFilter(const std::string& filter) {
        4:  746-block  0
call    0 returned 4
call    1 returned 4
        -:  747:    // By design "" filter matches "" string.
        4:  748:    std::vector<std::string> all_patterns;
call    0 returned 4
        4:  749:    SplitString(filter, ':', &all_patterns);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  750:    const auto exact_match_patterns_begin = std::partition(
        4:  750-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        -:  751:        all_patterns.begin(), all_patterns.end(), &IsGlobPattern);
        -:  752:
        8:  753:    glob_patterns_.reserve(static_cast<size_t>(
        8:  754:        std::distance(all_patterns.begin(), exact_match_patterns_begin)));
        4:  754-block  0
call    0 returned 4
        4:  754-block  1
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        8:  755:    std::move(all_patterns.begin(), exact_match_patterns_begin,
        4:  755-block  0
call    0 returned 4
        4:  755-block  1
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  755-block  2
        4:  756:              std::inserter(glob_patterns_, glob_patterns_.begin()));
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        8:  757:    std::move(
        4:  757-block  0
call    0 returned 4
        4:  757-block  1
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:  757-block  2
        -:  758:        exact_match_patterns_begin, all_patterns.end(),
        4:  759:        std::inserter(exact_match_patterns_, exact_match_patterns_.begin()));
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  760:  }
        4:  760-block  0
call    0 returned 4
    $$$$$:  760-block  1
call    1 never executed
    $$$$$:  760-block  2
call    2 never executed
    $$$$$:  760-block  3
call    3 never executed
        -:  761:
        -:  762:  // Returns true if and only if name matches at least one of the patterns in
        -:  763:  // the filter.
function _ZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 90%
        4:  764:  bool MatchesName(const std::string& name) const {
       8*:  765:    return exact_match_patterns_.count(name) > 0 ||
        4:  765-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0
    %%%%%:  765-block  1
        4:  765-block  2
        4:  766:           std::any_of(glob_patterns_.begin(), glob_patterns_.end(),
        4:  766-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 0 (fallthrough)
branch  4 taken 4
function _ZZNK7testing8internal12_GLOBAL__N_114UnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlSA_E_clESA_ called 8 returned 100% blocks executed 100%
        8:  767:                       [&name](const std::string& pattern) {
        8:  768:                         return PatternMatchesString(
call    0 returned 8
call    1 returned 8
        -:  769:                             name, pattern.c_str(),
       16:  770:                             pattern.c_str() + pattern.size());
        8:  770-block  0
call    0 returned 8
call    1 returned 8
        4:  771:                       });
        4:  771-block  0
        -:  772:  }
        -:  773:
        -:  774: private:
        -:  775:  std::vector<std::string> glob_patterns_;
        -:  776:  std::unordered_set<std::string> exact_match_patterns_;
        -:  777:};
        -:  778:
        -:  779:class PositiveAndNegativeUnitTestFilter {
        -:  780: public:
        -:  781:  // Constructs a positive and a negative filter from a string. The string
        -:  782:  // contains a positive filter optionally followed by a '-' character and a
        -:  783:  // negative filter. In case only a negative filter is provided the positive
        -:  784:  // filter will be assumed "*".
        -:  785:  // A filter is a list of patterns separated by ':'.
function _ZN7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilterC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  786:  explicit PositiveAndNegativeUnitTestFilter(const std::string& filter) {
    %%%%%:  786-block  0
call    0 never executed
call    1 never executed
    #####:  787:    std::vector<std::string> positive_and_negative_filters;
call    0 never executed
        -:  788:
        -:  789:    // NOTE: `SplitString` always returns a non-empty container.
    #####:  790:    SplitString(filter, '-', &positive_and_negative_filters);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  791:    const auto& positive_filter = positive_and_negative_filters.front();
    %%%%%:  791-block  0
call    0 never executed
        -:  792:
    #####:  793:    if (positive_and_negative_filters.size() > 1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  794:      positive_filter_ = UnitTestFilter(
    %%%%%:  794-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$:  794-block  1
    #####:  795:          positive_filter.empty() ? kUniversalFilter : positive_filter);
    %%%%%:  795-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  795-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  795-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  795-block  3
call    9 never executed
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$:  795-block  4
call   13 never executed
    $$$$$:  795-block  5
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  795-block  6
    $$$$$:  795-block  7
        -:  796:
        -:  797:      // TODO(b/214626361): Fail on multiple '-' characters
        -:  798:      // For the moment to preserve old behavior we concatenate the rest of the
        -:  799:      // string parts with `-` as separator to generate the negative filter.
    #####:  800:      auto negative_filter_string = positive_and_negative_filters[1];
    %%%%%:  800-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####:  801:      for (std::size_t i = 2; i < positive_and_negative_filters.size(); i++)
    %%%%%:  801-block  0
    %%%%%:  801-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -:  802:        negative_filter_string =
    #####:  803:            negative_filter_string + '-' + positive_and_negative_filters[i];
    %%%%%:  803-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  803-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  803-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  803-block  3
call   10 never executed
    $$$$$:  803-block  4
    $$$$$:  803-block  5
    #####:  804:      negative_filter_ = UnitTestFilter(negative_filter_string);
    %%%%%:  804-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  804-block  1
call    3 never executed
call    4 never executed
    $$$$$:  804-block  2
    #####:  805:    } else {
call    0 never executed
    $$$$$:  805-block  0
call    1 never executed
        -:  806:      // In case we don't have a negative filter and positive filter is ""
        -:  807:      // we do not use kUniversalFilter by design as opposed to when we have a
        -:  808:      // negative filter.
    #####:  809:      positive_filter_ = UnitTestFilter(positive_filter);
    %%%%%:  809-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  809-block  1
call    3 never executed
call    4 never executed
    $$$$$:  809-block  2
        -:  810:    }
    #####:  811:  }
    %%%%%:  811-block  0
call    0 never executed
    $$$$$:  811-block  1
call    1 never executed
    $$$$$:  811-block  2
call    2 never executed
    $$$$$:  811-block  3
call    3 never executed
        -:  812:
        -:  813:  // Returns true if and only if test name (this is generated by appending test
        -:  814:  // suit name and test name via a '.' character) matches the positive filter
        -:  815:  // and does not match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_ called 0 returned 0% blocks executed 0%
    #####:  816:  bool MatchesTest(const std::string& test_suite_name,
        -:  817:                   const std::string& test_name) const {
    #####:  818:    return MatchesName(test_suite_name + "." + test_name);
    %%%%%:  818-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  818-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  818-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  818-block  3
    %%%%%:  818-block  4
call    9 never executed
call   10 never executed
    %%%%%:  818-block  5
    $$$$$:  818-block  6
call   11 never executed
    $$$$$:  818-block  7
call   12 never executed
    $$$$$:  818-block  8
        -:  819:  }
        -:  820:
        -:  821:  // Returns true if and only if name matches the positive filter and does not
        -:  822:  // match the negative filter.
function _ZNK7testing8internal12_GLOBAL__N_133PositiveAndNegativeUnitTestFilter11MatchesNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  823:  bool MatchesName(const std::string& name) const {
    #####:  824:    return positive_filter_.MatchesName(name) &&
    %%%%%:  824-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  824-block  1
    %%%%%:  824-block  2
    #####:  825:           !negative_filter_.MatchesName(name);
    %%%%%:  825-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  825-block  1
        -:  826:  }
        -:  827:
        -:  828: private:
        -:  829:  UnitTestFilter positive_filter_;
        -:  830:  UnitTestFilter negative_filter_;
        -:  831:};
        -:  832:}  // namespace
        -:  833:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 0 returned 0% blocks executed 0%
    #####:  834:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
    %%%%%:  834-block  0
        -:  835:                                    const char* filter) {
    #####:  836:  return UnitTestFilter(filter).MatchesName(name_str);
    %%%%%:  836-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  836-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  836-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  836-block  3
    %%%%%:  836-block  4
call    9 never executed
call   10 never executed
    %%%%%:  836-block  5
    $$$$$:  836-block  6
call   11 never executed
    $$$$$:  836-block  7
call   12 never executed
    $$$$$:  836-block  8
    $$$$$:  836-block  9
        -:  837:}
        -:  838:
        -:  839:// Returns true if and only if the user-specified filter matches the test
        -:  840:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####:  841:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  842:                                        const std::string& test_name) {
        -:  843:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  844:  // positive filter and negative filter portions
    #####:  845:  return PositiveAndNegativeUnitTestFilter(GTEST_FLAG_GET(filter))
    %%%%%:  845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  845-block  1
call    3 never executed
    $$$$$:  845-block  2
call    4 never executed
    #####:  846:      .MatchesTest(test_suite_name, test_name);
    %%%%%:  846-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  846-block  1
    %%%%%:  846-block  2
        -:  847:}
        -:  848:
        -:  849:#if GTEST_HAS_SEH
        -:  850:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  851:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  852:// This function is useful as an __except condition.
        -:  853:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  854:  // Google Test should handle a SEH exception if:
        -:  855:  //   1. the user wants it to, AND
        -:  856:  //   2. this is not a breakpoint exception, AND
        -:  857:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  858:  //      apparently).
        -:  859:  //
        -:  860:  // SEH exception code for C++ exceptions.
        -:  861:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  862:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  863:
        -:  864:  bool should_handle = true;
        -:  865:
        -:  866:  if (!GTEST_FLAG_GET(catch_exceptions))
        -:  867:    should_handle = false;
        -:  868:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  869:    should_handle = false;
        -:  870:  else if (exception_code == kCxxExceptionCode)
        -:  871:    should_handle = false;
        -:  872:
        -:  873:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  874:}
        -:  875:#endif  // GTEST_HAS_SEH
        -:  876:
        -:  877:}  // namespace internal
        -:  878:
        -:  879:// The c'tor sets this object as the test part result reporter used by
        -:  880:// Google Test.  The 'result' parameter specifies where to report the
        -:  881:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  882:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  883:    TestPartResultArray* result)
    #####:  884:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD), result_(result) {
    %%%%%:  884-block  0
call    0 never executed
    #####:  885:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  886:}
    %%%%%:  886-block  0
    $$$$$:  886-block  1
call    0 never executed
        -:  887:
        -:  888:// The c'tor sets this object as the test part result reporter used by
        -:  889:// Google Test.  The 'result' parameter specifies where to report the
        -:  890:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  891:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  892:    InterceptMode intercept_mode, TestPartResultArray* result)
    #####:  893:    : intercept_mode_(intercept_mode), result_(result) {
    %%%%%:  893-block  0
call    0 never executed
    #####:  894:  Init();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  895:}
    %%%%%:  895-block  0
    $$$$$:  895-block  1
call    0 never executed
        -:  896:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  897:void ScopedFakeTestPartResultReporter::Init() {
    #####:  898:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  898-block  0
call    0 never executed
    #####:  899:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  900:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  900-block  0
call    0 never executed
    #####:  901:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  902:  } else {
    #####:  903:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  903-block  0
call    0 never executed
    #####:  904:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  905:  }
    #####:  906:}
        -:  907:
        -:  908:// The d'tor restores the test part result reporter used by Google Test
        -:  909:// before.
    #####:  910:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  911:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  912:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  913:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  914:  } else {
    #####:  915:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  916:  }
    #####:  917:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  910:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  911:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  912:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  913:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  914:  } else {
        -:  915:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  916:  }
    #####:  917:}
    %%%%%:  917-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  910:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  911:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  911-block  0
call    0 never executed
    #####:  912:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  913:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  913-block  0
call    0 never executed
        -:  914:  } else {
    #####:  915:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  915-block  0
call    0 never executed
        -:  916:  }
    #####:  917:}
    %%%%%:  917-block  0
call    0 never executed
------------------
        -:  918:
        -:  919:// Increments the test part result count and remembers the result.
        -:  920:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  921:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  922:    const TestPartResult& result) {
    #####:  923:  result_->Append(result);
    %%%%%:  923-block  0
call    0 never executed
    #####:  924:}
        -:  925:
        -:  926:namespace internal {
        -:  927:
        -:  928:// Returns the type ID of ::testing::Test.  We should always call this
        -:  929:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  930:// testing::Test.  This is to work around a suspected linker bug when
        -:  931:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  932:// GetTypeId< ::testing::Test>() to return different values depending
        -:  933:// on whether the call is from the Google Test framework itself or
        -:  934:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  935:// return the same value, as it always calls GetTypeId<>() from the
        -:  936:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 5 returned 100% blocks executed 100%
        5:  937:TypeId GetTestTypeId() { return GetTypeId<Test>(); }
        5:  937-block  0
call    0 returned 5
        -:  938:
        -:  939:// The value of GetTestTypeId() as seen from within the Google Test
        -:  940:// library.  This is solely for testing GetTestTypeId().
        -:  941:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  942:
        -:  943:// This predicate-formatter checks that 'results' contains a test part
        -:  944:// failure of the given type and that the failure message contains the
        -:  945:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  946:static AssertionResult HasOneFailure(const char* /* results_expr */,
    %%%%%:  946-block  0
        -:  947:                                     const char* /* type_expr */,
        -:  948:                                     const char* /* substr_expr */,
        -:  949:                                     const TestPartResultArray& results,
        -:  950:                                     TestPartResult::Type type,
        -:  951:                                     const std::string& substr) {
        -:  952:  const std::string expected(type == TestPartResult::kFatalFailure
        -:  953:                                 ? "1 fatal failure"
    #####:  954:                                 : "1 non-fatal failure");
    %%%%%:  954-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  954-block  1
    %%%%%:  954-block  2
    %%%%%:  954-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$:  954-block  4
    #####:  955:  Message msg;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  956:  if (results.size() != 1) {
    %%%%%:  956-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  957:    msg << "Expected: " << expected << "\n"
    %%%%%:  957-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  957-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  957-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####:  958:        << "  Actual: " << results.size() << " failures";
    %%%%%:  958-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  958-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  958-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    $$$$$:  958-block  3
    #####:  959:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  959-block  0
    %%%%%:  959-block  1
    %%%%%:  959-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####:  960:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  960-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  960-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  960-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -:  961:    }
    #####:  962:    return AssertionFailure() << msg;
    %%%%%:  962-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  962-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  962-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  962-block  3
    %%%%%:  962-block  4
call    9 never executed
    $$$$$:  962-block  5
call   10 never executed
    $$$$$:  962-block  6
        -:  963:  }
        -:  964:
    #####:  965:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  965-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  966:  if (r.type() != type) {
    %%%%%:  966-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  967:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  967-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  967-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  967-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  967-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  967-block  4
call   12 never executed
    $$$$$:  967-block  5
call   13 never executed
    $$$$$:  967-block  6
    #####:  968:                              << "  Actual:\n"
    %%%%%:  968-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  969:                              << r;
    %%%%%:  969-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  969-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  970:  }
        -:  971:
    #####:  972:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  972-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  973:    return AssertionFailure()
    %%%%%:  973-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  973-block  1
call    3 never executed
    $$$$$:  973-block  2
call    4 never executed
    $$$$$:  973-block  3
    #####:  974:           << "Expected: " << expected << " containing \"" << substr << "\"\n"
    %%%%%:  974-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  974-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  974-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  974-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  974-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####:  975:           << "  Actual:\n"
    %%%%%:  975-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  976:           << r;
    %%%%%:  976-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  976-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  977:  }
        -:  978:
    #####:  979:  return AssertionSuccess();
    %%%%%:  979-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  980:}
    %%%%%:  980-block  0
call    0 never executed
call    1 never executed
    $$$$$:  980-block  1
call    2 never executed
    $$$$$:  980-block  2
call    3 never executed
        -:  981:
        -:  982:// The constructor of SingleFailureChecker remembers where to look up
        -:  983:// test part results, what type of failure we expect, and what
        -:  984:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  985:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  986:                                           TestPartResult::Type type,
    #####:  987:                                           const std::string& substr)
    #####:  988:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  988-block  0
call    0 never executed
        -:  989:
        -:  990:// The destructor of SingleFailureChecker verifies that the given
        -:  991:// TestPartResultArray contains exactly one failure that has the given
        -:  992:// type and contains the given substring.  If that's not the case, a
        -:  993:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  994:SingleFailureChecker::~SingleFailureChecker() {
    #####:  995:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  995-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%:  995-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  995-block  2
call   10 never executed
    #####:  996:}
call    0 never executed
        -:  997:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  998:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  999:    UnitTestImpl* unit_test)
        1: 1000:    : unit_test_(unit_test) {}
        1: 1000-block  0
call    0 returned 1
        -: 1001:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1002:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -: 1003:    const TestPartResult& result) {
    #####: 1004:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%: 1004-block  0
call    0 never executed
call    1 never executed
    #####: 1005:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1006:}
        -: 1007:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1: 1008:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1: 1009:    UnitTestImpl* unit_test)
        1: 1010:    : unit_test_(unit_test) {}
        1: 1010-block  0
call    0 returned 1
        -: 1011:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 1012:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -: 1013:    const TestPartResult& result) {
    #####: 1014:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%: 1014-block  0
call    0 never executed
call    1 never executed
    #####: 1015:}
        -: 1016:
        -: 1017:// Returns the global test part result reporter.
        -: 1018:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####: 1019:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####: 1020:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1020-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1021:  return global_test_part_result_reporter_;
    %%%%%: 1021-block  0
    #####: 1022:}
    %%%%%: 1022-block  0
call    0 never executed
        -: 1023:
        -: 1024:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1025:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -: 1026:    TestPartResultReporterInterface* reporter) {
    #####: 1027:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%: 1027-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1028:  global_test_part_result_reporter_ = reporter;
    #####: 1029:}
    %%%%%: 1029-block  0
call    0 never executed
        -: 1030:
        -: 1031:// Returns the test part result reporter for the current thread.
        -: 1032:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####: 1033:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####: 1034:  return per_thread_test_part_result_reporter_.get();
    %%%%%: 1034-block  0
call    0 never executed
        -: 1035:}
        -: 1036:
        -: 1037:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 1038:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -: 1039:    TestPartResultReporterInterface* reporter) {
    #####: 1040:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%: 1040-block  0
call    0 never executed
    #####: 1041:}
        -: 1042:
        -: 1043:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1044:int UnitTestImpl::successful_test_suite_count() const {
    #####: 1045:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%: 1045-block  0
call    0 never executed
        -: 1046:}
        -: 1047:
        -: 1048:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1049:int UnitTestImpl::failed_test_suite_count() const {
    #####: 1050:  return CountIf(test_suites_, TestSuiteFailed);
    %%%%%: 1050-block  0
call    0 never executed
        -: 1051:}
        -: 1052:
        -: 1053:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 1054:int UnitTestImpl::total_test_suite_count() const {
    #####: 1055:  return static_cast<int>(test_suites_.size());
    %%%%%: 1055-block  0
call    0 never executed
        -: 1056:}
        -: 1057:
        -: 1058:// Gets the number of all test suites that contain at least one test
        -: 1059:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 1060:int UnitTestImpl::test_suite_to_run_count() const {
    #####: 1061:  return CountIf(test_suites_, ShouldRunTestSuite);
    %%%%%: 1061-block  0
call    0 never executed
        -: 1062:}
        -: 1063:
        -: 1064:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1065:int UnitTestImpl::successful_test_count() const {
    #####: 1066:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
    %%%%%: 1066-block  0
call    0 never executed
        -: 1067:}
        -: 1068:
        -: 1069:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1070:int UnitTestImpl::skipped_test_count() const {
    #####: 1071:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
    %%%%%: 1071-block  0
call    0 never executed
        -: 1072:}
        -: 1073:
        -: 1074:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1075:int UnitTestImpl::failed_test_count() const {
    #####: 1076:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%: 1076-block  0
call    0 never executed
        -: 1077:}
        -: 1078:
        -: 1079:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1080:int UnitTestImpl::reportable_disabled_test_count() const {
    #####: 1081:  return SumOverTestSuiteList(test_suites_,
    %%%%%: 1081-block  0
call    0 never executed
    #####: 1082:                              &TestSuite::reportable_disabled_test_count);
        -: 1083:}
        -: 1084:
        -: 1085:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1086:int UnitTestImpl::disabled_test_count() const {
    #####: 1087:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%: 1087-block  0
call    0 never executed
        -: 1088:}
        -: 1089:
        -: 1090:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1091:int UnitTestImpl::reportable_test_count() const {
    #####: 1092:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1092-block  0
call    0 never executed
        -: 1093:}
        -: 1094:
        -: 1095:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1096:int UnitTestImpl::total_test_count() const {
    #####: 1097:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1097-block  0
call    0 never executed
        -: 1098:}
        -: 1099:
        -: 1100:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 1101:int UnitTestImpl::test_to_run_count() const {
    #####: 1102:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
    %%%%%: 1102-block  0
call    0 never executed
        -: 1103:}
        -: 1104:
        -: 1105:// Returns the current OS stack trace as an std::string.
        -: 1106://
        -: 1107:// The maximum number of stack frames to be included is specified by
        -: 1108:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1109:// specifies the number of top frames to be skipped, which doesn't
        -: 1110:// count against the number of frames to be included.
        -: 1111://
        -: 1112:// For example, if Foo() calls Bar(), which in turn calls
        -: 1113:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1114:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1115:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1116:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1116-block  0
call    0 never executed
        -: 1117:      static_cast<int>(GTEST_FLAG_GET(stack_trace_depth)), skip_count + 1
        -: 1118:      // Skips the user-specified number of frames plus this function
        -: 1119:      // itself.
    #####: 1120:  );  // NOLINT
call    0 never executed
        -: 1121:}
        -: 1122:
        -: 1123:// A helper class for measuring elapsed times.
        -: 1124:class Timer {
        -: 1125: public:
function _ZN7testing8internal5TimerC1Ev called 0 returned 0% blocks executed 0%
    #####: 1126:  Timer() : start_(std::chrono::steady_clock::now()) {}
    %%%%%: 1126-block  0
call    0 never executed
        -: 1127:
        -: 1128:  // Return time elapsed in milliseconds since the timer was created.
function _ZN7testing8internal5Timer7ElapsedEv called 0 returned 0% blocks executed 0%
    #####: 1129:  TimeInMillis Elapsed() {
    #####: 1130:    return std::chrono::duration_cast<std::chrono::milliseconds>(
    %%%%%: 1130-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1131:               std::chrono::steady_clock::now() - start_)
    %%%%%: 1131-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1131-block  1
    $$$$$: 1131-block  2
    #####: 1132:        .count();
    %%%%%: 1132-block  0
call    0 never executed
    %%%%%: 1132-block  1
        -: 1133:  }
        -: 1134:
        -: 1135: private:
        -: 1136:  std::chrono::steady_clock::time_point start_;
        -: 1137:};
        -: 1138:
        -: 1139:// Returns a timestamp as milliseconds since the epoch. Note this time may jump
        -: 1140:// around subject to adjustments by the system, to measure elapsed time use
        -: 1141:// Timer instead.
function _ZN7testing8internal15GetTimeInMillisEv called 0 returned 0% blocks executed 0%
    #####: 1142:TimeInMillis GetTimeInMillis() {
    #####: 1143:  return std::chrono::duration_cast<std::chrono::milliseconds>(
    %%%%%: 1143-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1144:             std::chrono::system_clock::now() -
call    0 never executed
    $$$$$: 1144-block  0
    $$$$$: 1144-block  1
    #####: 1145:             std::chrono::system_clock::from_time_t(0))
    %%%%%: 1145-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 1145-block  1
    #####: 1146:      .count();
    %%%%%: 1146-block  0
call    0 never executed
    %%%%%: 1146-block  1
        -: 1147:}
        -: 1148:
        -: 1149:// Utilities
        -: 1150:
        -: 1151:// class String.
        -: 1152:
        -: 1153:#if GTEST_OS_WINDOWS_MOBILE
        -: 1154:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1155:// memory using new. The caller is responsible for deleting the return
        -: 1156:// value using delete[]. Returns the wide string, or NULL if the
        -: 1157:// input is NULL.
        -: 1158:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1159:  if (!ansi) return nullptr;
        -: 1160:  const int length = strlen(ansi);
        -: 1161:  const int unicode_length =
        -: 1162:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1163:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1164:  MultiByteToWideChar(CP_ACP, 0, ansi, length, unicode, unicode_length);
        -: 1165:  unicode[unicode_length] = 0;
        -: 1166:  return unicode;
        -: 1167:}
        -: 1168:
        -: 1169:// Creates an ANSI string from the given wide string, allocating
        -: 1170:// memory using new. The caller is responsible for deleting the return
        -: 1171:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1172:// input is NULL.
        -: 1173:const char* String::Utf16ToAnsi(LPCWSTR utf16_str) {
        -: 1174:  if (!utf16_str) return nullptr;
        -: 1175:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1176:                                              0, nullptr, nullptr);
        -: 1177:  char* ansi = new char[ansi_length + 1];
        -: 1178:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1179:                      nullptr);
        -: 1180:  ansi[ansi_length] = 0;
        -: 1181:  return ansi;
        -: 1182:}
        -: 1183:
        -: 1184:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1185:
        -: 1186:// Compares two C strings.  Returns true if and only if they have the same
        -: 1187:// content.
        -: 1188://
        -: 1189:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1190:// C string is considered different to any non-NULL C string,
        -: 1191:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 1192:bool String::CStringEquals(const char* lhs, const char* rhs) {
    #####: 1193:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 1193-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1193-block  1
        -: 1194:
    #####: 1195:  if (rhs == nullptr) return false;
    %%%%%: 1195-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1195-block  1
        -: 1196:
    #####: 1197:  return strcmp(lhs, rhs) == 0;
    %%%%%: 1197-block  0
        -: 1198:}
        -: 1199:
        -: 1200:#if GTEST_HAS_STD_WSTRING
        -: 1201:
        -: 1202:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1203:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwyPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1204:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1205:                                     Message* msg) {
    #####: 1206:  for (size_t i = 0; i != length;) {  // NOLINT
    %%%%%: 1206-block  0
    %%%%%: 1206-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1207:    if (wstr[i] != L'\0') {
    %%%%%: 1207-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1208:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1208-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1208-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1208-block  2
call    6 never executed
    $$$$$: 1208-block  3
call    7 never executed
    $$$$$: 1208-block  4
call    8 never executed
    #####: 1209:      while (i != length && wstr[i] != L'\0') i++;
    %%%%%: 1209-block  0
    %%%%%: 1209-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1209-block  2
branch  2 never executed
branch  3 never executed
        -: 1210:    } else {
    #####: 1211:      *msg << '\0';
    %%%%%: 1211-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1212:      i++;
    %%%%%: 1212-block  0
        -: 1213:    }
        -: 1214:  }
    #####: 1215:}
    %%%%%: 1215-block  0
        -: 1216:
        -: 1217:#endif  // GTEST_HAS_STD_WSTRING
        -: 1218:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 4 returned 100% blocks executed 69%
        4: 1219:void SplitString(const ::std::string& str, char delimiter,
        -: 1220:                 ::std::vector< ::std::string>* dest) {
        4: 1221:  ::std::vector< ::std::string> parsed;
        4: 1221-block  0
call    0 returned 4
        4: 1222:  ::std::string::size_type pos = 0;
        8: 1223:  while (::testing::internal::AlwaysTrue()) {
        8: 1223-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1223-block  1
branch  3 taken 8
branch  4 taken 0 (fallthrough)
        8: 1224:    const ::std::string::size_type colon = str.find(delimiter, pos);
        8: 1224-block  0
call    0 returned 8
        8: 1225:    if (colon == ::std::string::npos) {
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        4: 1226:      parsed.push_back(str.substr(pos));
        4: 1226-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1226-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1226-block  2
call    6 returned 4
    $$$$$: 1226-block  3
call    7 never executed
    $$$$$: 1226-block  4
        4: 1227:      break;
        -: 1228:    } else {
        4: 1229:      parsed.push_back(str.substr(pos, colon - pos));
        4: 1229-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 1229-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 1229-block  2
call    6 returned 4
    $$$$$: 1229-block  3
call    7 never executed
    $$$$$: 1229-block  4
        4: 1230:      pos = colon + 1;
        -: 1231:    }
        -: 1232:  }
        4: 1233:  dest->swap(parsed);
        4: 1233-block  0
call    0 returned 4
        4: 1234:}
call    0 returned 4
    $$$$$: 1234-block  0
call    1 never executed
        -: 1235:
        -: 1236:}  // namespace internal
        -: 1237:
        -: 1238:// Constructs an empty Message.
        -: 1239:// We allocate the stringstream separately because otherwise each use of
        -: 1240:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1241:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1242:// the stack space.
function _ZN7testing7MessageC2Ev called 42 returned 100% blocks executed 80%
       42: 1243:Message::Message() : ss_(new ::std::stringstream) {
       42: 1243-block  0
call    0 returned 42
call    1 returned 42
branch  2 taken 42 (fallthrough)
branch  3 taken 0 (throw)
       42: 1243-block  1
call    4 returned 42
    $$$$$: 1243-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 1243-block  3
call    7 never executed
        -: 1244:  // By default, we want there to be enough precision when printing
        -: 1245:  // a double to a Message.
       42: 1246:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 42
call    1 returned 42
call    2 returned 42
       42: 1247:}
        -: 1248:
        -: 1249:// These two overloads allow streaming a wide C string to a Message
        -: 1250:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1251:Message& Message::operator<<(const wchar_t* wide_c_str) {
    #####: 1252:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1252-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1252-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1252-block  2
    %%%%%: 1252-block  3
call    6 never executed
    %%%%%: 1252-block  4
    $$$$$: 1252-block  5
call    7 never executed
        -: 1253:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1254:Message& Message::operator<<(wchar_t* wide_c_str) {
    #####: 1255:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1255-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1255-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1255-block  2
    %%%%%: 1255-block  3
call    6 never executed
    %%%%%: 1255-block  4
    $$$$$: 1255-block  5
call    7 never executed
        -: 1256:}
        -: 1257:
        -: 1258:#if GTEST_HAS_STD_WSTRING
        -: 1259:// Converts the given wide string to a narrow string using the UTF-8
        -: 1260:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1261:Message& Message::operator<<(const ::std::wstring& wstr) {
    #####: 1262:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1262-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1263:  return *this;
        -: 1264:}
        -: 1265:#endif  // GTEST_HAS_STD_WSTRING
        -: 1266:
        -: 1267:// Gets the text streamed to this object so far as an std::string.
        -: 1268:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 42 returned 100% blocks executed 100%
       42: 1269:std::string Message::GetString() const {
       42: 1270:  return internal::StringStreamToString(ss_.get());
       42: 1270-block  0
call    0 returned 42
call    1 returned 42
        -: 1271:}
        -: 1272:
        -: 1273:namespace internal {
        -: 1274:
        -: 1275:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorIySaIyEES6_ called 0 returned 0% blocks executed 0%
    #####: 1276:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
    %%%%%: 1276-block  0
        -: 1277:                                            const std::vector<size_t>& right) {
        -: 1278:  std::vector<std::vector<double> > costs(
    #####: 1279:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1279-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1279-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1279-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1279-block  3
call   10 never executed
    $$$$$: 1279-block  4
    $$$$$: 1279-block  5
    $$$$$: 1279-block  6
        -: 1280:  std::vector<std::vector<EditType> > best_move(
    #####: 1281:      left.size() + 1, std::vector<EditType>(right.size() + 1));
    %%%%%: 1281-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1281-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1281-block  2
call    8 never executed
call    9 never executed
    $$$$$: 1281-block  3
call   10 never executed
    $$$$$: 1281-block  4
    $$$$$: 1281-block  5
    $$$$$: 1281-block  6
        -: 1282:
        -: 1283:  // Populate for empty right.
    #####: 1284:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1284-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1285:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1285-block  0
call    0 never executed
call    1 never executed
    #####: 1286:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1287:  }
        -: 1288:  // Populate for empty left.
    #####: 1289:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1289-block  0
    %%%%%: 1289-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 1290:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1290-block  0
call    0 never executed
call    1 never executed
    #####: 1291:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1292:  }
        -: 1293:
    #####: 1294:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1294-block  0
    %%%%%: 1294-block  1
    %%%%%: 1294-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1295:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1295-block  0
    %%%%%: 1295-block  1
    %%%%%: 1295-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1296:      if (left[l_i] == right[r_i]) {
    %%%%%: 1296-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 1297:        // Found a match. Consume it.
    #####: 1298:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1298-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1299:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1300:        continue;
        -: 1301:      }
        -: 1302:
    #####: 1303:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1303-block  0
call    0 never executed
call    1 never executed
    #####: 1304:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1305:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1306:      if (add < remove && add < replace) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1306-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1307:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1307-block  0
call    0 never executed
call    1 never executed
    #####: 1308:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1309:      } else if (remove < add && remove < replace) {
    %%%%%: 1309-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1309-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1310:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1310-block  0
call    0 never executed
call    1 never executed
    #####: 1311:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1312:      } else {
        -: 1313:        // We make replace a little more expensive than add/remove to lower
        -: 1314:        // their priority.
    #####: 1315:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1315-block  0
call    0 never executed
call    1 never executed
    #####: 1316:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1317:      }
        -: 1318:    }
        -: 1319:  }
        -: 1320:
        -: 1321:  // Reconstruct the best path. We do it in reverse order.
    #####: 1322:  std::vector<EditType> best_path;
    %%%%%: 1322-block  0
call    0 never executed
    #####: 1323:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1323-block  0
branch  2 never executed
branch  3 never executed (fallthrough)
    %%%%%: 1323-block  1
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1324:    EditType move = best_move[l_i][r_i];
    %%%%%: 1324-block  0
call    0 never executed
call    1 never executed
    #####: 1325:    best_path.push_back(move);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1326:    l_i -= move != kAdd;
    #####: 1327:    r_i -= move != kRemove;
    %%%%%: 1327-block  0
        -: 1328:  }
    #####: 1329:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1329-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 1330:  return best_path;
    %%%%%: 1330-block  0
    %%%%%: 1330-block  1
    #####: 1331:}
    %%%%%: 1331-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1331-block  1
call    2 never executed
    $$$$$: 1331-block  2
call    3 never executed
    $$$$$: 1331-block  3
call    4 never executed
        -: 1332:
        -: 1333:namespace {
        -: 1334:
        -: 1335:// Helper class to convert string into ids with deduplication.
        -: 1336:class InternalStrings {
        -: 1337: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1338:  size_t GetId(const std::string& str) {
    #####: 1339:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1339-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1340:    if (it != ids_.end()) return it->second;
    %%%%%: 1340-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1340-block  1
call    4 never executed
    #####: 1341:    size_t id = ids_.size();
    %%%%%: 1341-block  0
call    0 never executed
    #####: 1342:    return ids_[str] = id;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1342-block  0
        -: 1343:  }
        -: 1344:
        -: 1345: private:
        -: 1346:  typedef std::map<std::string, size_t> IdMap;
        -: 1347:  IdMap ids_;
        -: 1348:};
        -: 1349:
        -: 1350:}  // namespace
        -: 1351:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1352:std::vector<EditType> CalculateOptimalEdits(
        -: 1353:    const std::vector<std::string>& left,
        -: 1354:    const std::vector<std::string>& right) {
    #####: 1355:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1355-block  0
call    0 never executed
call    1 never executed
        -: 1356:  {
    #####: 1357:    InternalStrings intern_table;
call    0 never executed
    #####: 1358:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1359:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1359-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1359-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1359-block  2
    $$$$$: 1359-block  3
        -: 1360:    }
    #####: 1361:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1361-block  0
    %%%%%: 1361-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1362:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1362-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1362-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 1362-block  2
    $$$$$: 1362-block  3
        -: 1363:    }
    #####: 1364:  }
    %%%%%: 1364-block  0
call    0 never executed
    $$$$$: 1364-block  1
call    1 never executed
    #####: 1365:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1365-block  0
    #####: 1366:}
    %%%%%: 1366-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1366-block  1
call    2 never executed
    $$$$$: 1366-block  2
call    3 never executed
        -: 1367:
        -: 1368:namespace {
        -: 1369:
        -: 1370:// Helper class that holds the state for one hunk and prints it out to the
        -: 1371:// stream.
        -: 1372:// It reorders adds/removes when possible to group all removes before all
        -: 1373:// adds. It also adds the hunk header before printint into the stream.
        -: 1374:class Hunk {
        -: 1375: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Eyy called 0 returned 0% blocks executed 0%
    #####: 1376:  Hunk(size_t left_start, size_t right_start)
    #####: 1377:      : left_start_(left_start),
    #####: 1378:        right_start_(right_start),
    #####: 1379:        adds_(),
    #####: 1380:        removes_(),
    #####: 1381:        common_() {}
    %%%%%: 1381-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1382:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1383:  void PushLine(char edit, const char* line) {
    #####: 1384:    switch (edit) {
    %%%%%: 1384-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1385:      case ' ':
    #####: 1386:        ++common_;
    #####: 1387:        FlushEdits();
    %%%%%: 1387-block  0
call    0 never executed
    #####: 1388:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1388-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1388-block  1
    $$$$$: 1388-block  2
call    6 never executed
    #####: 1389:        break;
    %%%%%: 1389-block  0
    #####: 1390:      case '-':
    #####: 1391:        ++removes_;
    #####: 1392:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1392-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1392-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1392-block  2
    $$$$$: 1392-block  3
call    6 never executed
    #####: 1393:        break;
    %%%%%: 1393-block  0
    #####: 1394:      case '+':
    #####: 1395:        ++adds_;
    #####: 1396:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1396-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 1396-block  2
    #####: 1397:        break;
    %%%%%: 1397-block  0
        -: 1398:    }
    #####: 1399:  }
    %%%%%: 1399-block  0
        -: 1400:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1401:  void PrintTo(std::ostream* os) {
    #####: 1402:    PrintHeader(os);
    %%%%%: 1402-block  0
call    0 never executed
    #####: 1403:    FlushEdits();
call    0 never executed
    #####: 1404:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1405:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1406:         it != hunk_.end(); ++it) {
    %%%%%: 1406-block  0
call    0 never executed
    %%%%%: 1406-block  1
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 1407:      *os << it->first << it->second << "\n";
    %%%%%: 1407-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 1407-block  1
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1407-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
        -: 1408:    }
    #####: 1409:  }
    %%%%%: 1409-block  0
        -: 1410:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1411:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1411-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1411-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1411-block  2
    %%%%%: 1411-block  3
    %%%%%: 1411-block  4
        -: 1412:
        -: 1413: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1414:  void FlushEdits() {
    #####: 1415:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1415-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1416:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1417:  }
        -: 1418:
        -: 1419:  // Print a unified diff header for one hunk.
        -: 1420:  // The format is
        -: 1421:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1422:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1423:  void PrintHeader(std::ostream* ss) const {
    #####: 1424:    *ss << "@@ ";
    %%%%%: 1424-block  0
call    0 never executed
    #####: 1425:    if (removes_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1426:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1426-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1427:    }
    #####: 1428:    if (removes_ && adds_) {
    %%%%%: 1428-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1428-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1429:      *ss << " ";
    %%%%%: 1429-block  0
call    0 never executed
        -: 1430:    }
    #####: 1431:    if (adds_) {
    %%%%%: 1431-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1432:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1432-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1433:    }
    #####: 1434:    *ss << " @@\n";
    %%%%%: 1434-block  0
call    0 never executed
    #####: 1435:  }
        -: 1436:
        -: 1437:  size_t left_start_, right_start_;
        -: 1438:  size_t adds_, removes_, common_;
        -: 1439:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1440:};
        -: 1441:
        -: 1442:}  // namespace
        -: 1443:
        -: 1444:// Create a list of diff hunks in Unified diff format.
        -: 1445:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1446:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1447:// addition.
        -: 1448:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1449:// If two hunks are close enough that their contexts overlap, then they are
        -: 1450:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_y called 0 returned 0% blocks executed 0%
    #####: 1451:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1452:                              const std::vector<std::string>& right,
        -: 1453:                              size_t context) {
    #####: 1454:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1454-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1455:
    #####: 1456:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1457:  std::stringstream ss;
    %%%%%: 1457-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1458:  while (edit_i < edits.size()) {
    %%%%%: 1458-block  0
    %%%%%: 1458-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 1459:    // Find first edit.
    #####: 1460:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1460-block  0
    %%%%%: 1460-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1460-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1460-block  3
    %%%%%: 1460-block  4
    %%%%%: 1460-block  5
branch  6 never executed
branch  7 never executed (fallthrough)
    #####: 1461:      ++l_i;
    #####: 1462:      ++r_i;
    #####: 1463:      ++edit_i;
    %%%%%: 1463-block  0
        -: 1464:    }
        -: 1465:
        -: 1466:    // Find the first line to include in the hunk.
    #####: 1467:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1467-block  0
call    0 never executed
    #####: 1468:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    #####: 1469:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1469-block  0
    %%%%%: 1469-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1470:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1470-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1471:    }
        -: 1472:
        -: 1473:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1474:    // is over.
    #####: 1475:    size_t n_suffix = 0;
    #####: 1476:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1476-block  0
    %%%%%: 1476-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 1477:      if (n_suffix >= context) {
    %%%%%: 1477-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 1478:        // Continue only if the next hunk is very close.
    #####: 1479:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1479-block  0
call    0 never executed
call    1 never executed
    #####: 1480:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1480-block  0
call    0 never executed
    %%%%%: 1480-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1480-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1480-block  3
    %%%%%: 1480-block  4
    %%%%%: 1480-block  5
branch  8 never executed
branch  9 never executed (fallthrough)
    #####: 1481:        if (it == edits.end() ||
    %%%%%: 1481-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1481-block  1
    %%%%%: 1481-block  2
    #####: 1482:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1482-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1482-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
        -: 1483:          // There is no next edit or it is too far away.
    #####: 1484:          break;
    %%%%%: 1484-block  0
        -: 1485:        }
        -: 1486:      }
        -: 1487:
    #####: 1488:      EditType edit = edits[edit_i];
    %%%%%: 1488-block  0
call    0 never executed
        -: 1489:      // Reset count when a non match is found.
    #####: 1490:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1490-block  0
    %%%%%: 1490-block  1
        -: 1491:
    #####: 1492:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1492-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1492-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1492-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 1493:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1493-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1493-block  1
    %%%%%: 1493-block  2
    %%%%%: 1493-block  3
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 1494:      }
    #####: 1495:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1495-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1495-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 1496:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1496-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 1497:      }
        -: 1498:
        -: 1499:      // Advance indices, depending on edit type.
    #####: 1500:      l_i += edit != kAdd;
    #####: 1501:      r_i += edit != kRemove;
    %%%%%: 1501-block  0
        -: 1502:    }
        -: 1503:
    #####: 1504:    if (!hunk.has_edits()) {
    %%%%%: 1504-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 1505:      // We are done. We don't want this hunk.
    #####: 1506:      break;
    %%%%%: 1506-block  0
        -: 1507:    }
        -: 1508:
    #####: 1509:    hunk.PrintTo(&ss);
    %%%%%: 1509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1510:  }
    %%%%%: 1510-block  0
    %%%%%: 1510-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 1510-block  2
call    3 never executed
    #####: 1511:  return ss.str();
    %%%%%: 1511-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1511-block  1
    #####: 1512:}
    %%%%%: 1512-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1512-block  1
call    2 never executed
    $$$$$: 1512-block  2
call    3 never executed
        -: 1513:
        -: 1514:}  // namespace edit_distance
        -: 1515:
        -: 1516:namespace {
        -: 1517:
        -: 1518:// The string representation of the values received in EqFailure() are already
        -: 1519:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1520:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1521:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1522:  std::vector<std::string> lines;
    %%%%%: 1522-block  0
call    0 never executed
    #####: 1523:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1524:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1524-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1524-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1524-block  2
    %%%%%: 1524-block  3
    %%%%%: 1524-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1525:    ++start;
    #####: 1526:    --end;
    %%%%%: 1526-block  0
        -: 1527:  }
    #####: 1528:  bool escaped = false;
    #####: 1529:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1529-block  0
    %%%%%: 1529-block  1
    %%%%%: 1529-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 1530:    if (escaped) {
    %%%%%: 1530-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1531:      escaped = false;
    #####: 1532:      if (str[i] == 'n') {
    %%%%%: 1532-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1533:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1533-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1533-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1533-block  2
call    6 never executed
    $$$$$: 1533-block  3
call    7 never executed
    $$$$$: 1533-block  4
    #####: 1534:        start = i + 1;
        -: 1535:      }
        -: 1536:    } else {
    #####: 1537:      escaped = str[i] == '\\';
    %%%%%: 1537-block  0
call    0 never executed
        -: 1538:    }
        -: 1539:  }
    #####: 1540:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1540-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1540-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1540-block  2
call    6 never executed
    $$$$$: 1540-block  3
call    7 never executed
    $$$$$: 1540-block  4
    #####: 1541:  return lines;
    %%%%%: 1541-block  0
    =====: 1542:}
    $$$$$: 1542-block  0
call    0 never executed
        -: 1543:
        -: 1544:}  // namespace
        -: 1545:
        -: 1546:// Constructs and returns the message for an equality assertion
        -: 1547:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1548://
        -: 1549:// The first four parameters are the expressions used in the assertion
        -: 1550:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1551:// where foo is 5 and bar is 6, we have:
        -: 1552://
        -: 1553://   lhs_expression: "foo"
        -: 1554://   rhs_expression: "bar"
        -: 1555://   lhs_value:      "5"
        -: 1556://   rhs_value:      "6"
        -: 1557://
        -: 1558:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1559:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1560:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1561:AssertionResult EqFailure(const char* lhs_expression,
        -: 1562:                          const char* rhs_expression,
        -: 1563:                          const std::string& lhs_value,
        -: 1564:                          const std::string& rhs_value, bool ignoring_case) {
    #####: 1565:  Message msg;
    %%%%%: 1565-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1566:  msg << "Expected equality of these values:";
    %%%%%: 1566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1567:  msg << "\n  " << lhs_expression;
    %%%%%: 1567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1567-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1568:  if (lhs_value != lhs_expression) {
    %%%%%: 1568-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1568-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1569:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1569-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1569-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1570:  }
    #####: 1571:  msg << "\n  " << rhs_expression;
    %%%%%: 1571-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1571-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1572:  if (rhs_value != rhs_expression) {
    %%%%%: 1572-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1572-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1573:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1573-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1573-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1574:  }
        -: 1575:
    #####: 1576:  if (ignoring_case) {
    %%%%%: 1576-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1577:    msg << "\nIgnoring case";
    %%%%%: 1577-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1578:  }
        -: 1579:
    #####: 1580:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1580-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1580-block  2
    %%%%%: 1580-block  3
    %%%%%: 1580-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1581:    const std::vector<std::string> lhs_lines = SplitEscapedString(lhs_value);
    %%%%%: 1581-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1582:    const std::vector<std::string> rhs_lines = SplitEscapedString(rhs_value);
    %%%%%: 1582-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1583:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1583-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1583-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1583-block  2
    %%%%%: 1583-block  3
    %%%%%: 1583-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 1584:      msg << "\nWith diff:\n"
    %%%%%: 1584-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1585:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1585-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1585-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1585-block  2
call    6 never executed
    $$$$$: 1585-block  3
call    7 never executed
    $$$$$: 1585-block  4
        -: 1586:    }
    #####: 1587:  }
    %%%%%: 1587-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1587-block  1
call    2 never executed
    $$$$$: 1587-block  2
call    3 never executed
        -: 1588:
    #####: 1589:  return AssertionFailure() << msg;
    %%%%%: 1589-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1589-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1589-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1589-block  3
    %%%%%: 1589-block  4
call    9 never executed
    %%%%%: 1589-block  5
    $$$$$: 1589-block  6
call   10 never executed
    $$$$$: 1589-block  7
    #####: 1590:}
call    0 never executed
    $$$$$: 1590-block  0
call    1 never executed
        -: 1591:
        -: 1592:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1593:std::string GetBoolAssertionFailureMessage(
        -: 1594:    const AssertionResult& assertion_result, const char* expression_text,
        -: 1595:    const char* actual_predicate_value, const char* expected_predicate_value) {
    #####: 1596:  const char* actual_message = assertion_result.message();
    %%%%%: 1596-block  0
call    0 never executed
    #####: 1597:  Message msg;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1598:  msg << "Value of: " << expression_text
    %%%%%: 1598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1598-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1599:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1599-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1599-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1600:  if (actual_message[0] != '\0') msg << " (" << actual_message << ")";
    %%%%%: 1600-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1600-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1600-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1600-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    #####: 1601:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1601-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1601-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1602:  return msg.GetString();
    %%%%%: 1602-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1602-block  1
    #####: 1603:}
    %%%%%: 1603-block  0
call    0 never executed
    $$$$$: 1603-block  1
call    1 never executed
        -: 1604:
        -: 1605:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1606:AssertionResult DoubleNearPredFormat(const char* expr1, const char* expr2,
        -: 1607:                                     const char* abs_error_expr, double val1,
        -: 1608:                                     double val2, double abs_error) {
    #####: 1609:  const double diff = fabs(val1 - val2);
    #####: 1610:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1610-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1610-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 1610-block  2
        -: 1611:
        -: 1612:  // Find the value which is closest to zero.
    #####: 1613:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1613-block  0
call    0 never executed
        -: 1614:  // Find the distance to the next double from that value.
        -: 1615:  const double epsilon =
    #####: 1616:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1617:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1618:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1619:  // message so that the situation can be more easily understood without
        -: 1620:  // requiring exotic floating-point knowledge.
        -: 1621:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1622:  // that an equality check was actually intended.
    #####: 1623:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 1623-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 1623-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 1623-block  2
    %%%%%: 1623-block  3
    %%%%%: 1623-block  4
branch  8 never executed (fallthrough)
branch  9 never executed
    #####: 1624:      abs_error < epsilon) {
    %%%%%: 1624-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1625:    return AssertionFailure()
    %%%%%: 1625-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1625-block  1
call    3 never executed
    $$$$$: 1625-block  2
call    4 never executed
    $$$$$: 1625-block  3
    #####: 1626:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1626-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1626-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1626-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1626-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1626-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1627:           << diff << ", where\n"
    %%%%%: 1627-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1627-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 1628:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1628-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1628-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1628-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1628-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1629:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1629-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1629-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1629-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1629-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1630:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1630-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1630-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1630-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 1631:           << " which is smaller than the minimum distance between doubles for "
    #####: 1632:              "numbers of this magnitude which is "
    %%%%%: 1632-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1633:           << epsilon
    %%%%%: 1633-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1634:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1635:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1635-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1635-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 1636:  }
    #####: 1637:  return AssertionFailure()
    %%%%%: 1637-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1637-block  1
call    3 never executed
    $$$$$: 1637-block  2
call    4 never executed
    $$$$$: 1637-block  3
    #####: 1638:         << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1638-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1638-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1638-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1638-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1638-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1639:         << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1639-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1639-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1639-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1640:         << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1640-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1640-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1640-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1641:         << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1641-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1641-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1641-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1641-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1642:         << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1642-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1642-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1642-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1642-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1642-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1642-block  5
        -: 1643:}
        -: 1644:
        -: 1645:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1646:template <typename RawType>
    #####: 1647:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1648:                                RawType val1, RawType val2) {
        -: 1649:  // Returns success if val1 is less than val2,
    #####: 1650:  if (val1 < val2) {
    #####: 1651:    return AssertionSuccess();
        -: 1652:  }
        -: 1653:
        -: 1654:  // or if val1 is almost equal to val2.
    #####: 1655:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1656:  if (lhs.AlmostEquals(rhs)) {
    #####: 1657:    return AssertionSuccess();
        -: 1658:  }
        -: 1659:
        -: 1660:  // Note that the above two checks will both fail if either val1 or
        -: 1661:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1662:  // any predicate involving a NaN must return false.
        -: 1663:
    #####: 1664:  ::std::stringstream val1_ss;
    #####: 1665:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1666:          << val1;
        -: 1667:
    #####: 1668:  ::std::stringstream val2_ss;
    #####: 1669:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1670:          << val2;
        -: 1671:
        -: 1672:  return AssertionFailure()
    #####: 1673:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1674:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1675:         << StringStreamToString(&val2_ss);
    #####: 1676:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1647:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1648:                                RawType val1, RawType val2) {
        -: 1649:  // Returns success if val1 is less than val2,
    #####: 1650:  if (val1 < val2) {
    %%%%%: 1650-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1651:    return AssertionSuccess();
    %%%%%: 1651-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1652:  }
        -: 1653:
        -: 1654:  // or if val1 is almost equal to val2.
    #####: 1655:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
    #####: 1656:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1656-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1657:    return AssertionSuccess();
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1658:  }
        -: 1659:
        -: 1660:  // Note that the above two checks will both fail if either val1 or
        -: 1661:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1662:  // any predicate involving a NaN must return false.
        -: 1663:
    #####: 1664:  ::std::stringstream val1_ss;
    %%%%%: 1664-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1665:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1665-block  0
call    0 never executed
call    1 never executed
    #####: 1666:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1667:
    #####: 1668:  ::std::stringstream val2_ss;
    %%%%%: 1668-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1669:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1669-block  0
call    0 never executed
call    1 never executed
    #####: 1670:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1671:
        -: 1672:  return AssertionFailure()
    #####: 1673:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1673-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1673-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1673-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1673-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1673-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1673-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1673-block  6
call   18 never executed
    $$$$$: 1673-block  7
    #####: 1674:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1674-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1674-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1674-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1674-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1674-block  4
call   13 never executed
    $$$$$: 1674-block  5
    #####: 1675:         << StringStreamToString(&val2_ss);
    %%%%%: 1675-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1675-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1675-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1675-block  3
    %%%%%: 1675-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1675-block  5
call   11 never executed
    $$$$$: 1675-block  6
    #####: 1676:}
call    0 never executed
call    1 never executed
    $$$$$: 1676-block  0
call    2 never executed
    $$$$$: 1676-block  1
call    3 never executed
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1647:AssertionResult FloatingPointLE(const char* expr1, const char* expr2,
        -: 1648:                                RawType val1, RawType val2) {
        -: 1649:  // Returns success if val1 is less than val2,
    #####: 1650:  if (val1 < val2) {
    %%%%%: 1650-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1651:    return AssertionSuccess();
    %%%%%: 1651-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1652:  }
        -: 1653:
        -: 1654:  // or if val1 is almost equal to val2.
    #####: 1655:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1655-block  0
call    0 never executed
call    1 never executed
    #####: 1656:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1656-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 1657:    return AssertionSuccess();
    %%%%%: 1657-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1658:  }
        -: 1659:
        -: 1660:  // Note that the above two checks will both fail if either val1 or
        -: 1661:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1662:  // any predicate involving a NaN must return false.
        -: 1663:
    #####: 1664:  ::std::stringstream val1_ss;
    %%%%%: 1664-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1665:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1665-block  0
call    0 never executed
call    1 never executed
    #####: 1666:          << val1;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1667:
    #####: 1668:  ::std::stringstream val2_ss;
    %%%%%: 1668-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 1669:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1669-block  0
call    0 never executed
call    1 never executed
    #####: 1670:          << val2;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1671:
        -: 1672:  return AssertionFailure()
    #####: 1673:         << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1673-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1673-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1673-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1673-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1673-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1673-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    $$$$$: 1673-block  6
call   18 never executed
    $$$$$: 1673-block  7
    #####: 1674:         << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1674-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1674-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1674-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1674-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
call   12 never executed
    $$$$$: 1674-block  4
call   13 never executed
    $$$$$: 1674-block  5
    #####: 1675:         << StringStreamToString(&val2_ss);
    %%%%%: 1675-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1675-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1675-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1675-block  3
    %%%%%: 1675-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1675-block  5
call   11 never executed
    $$$$$: 1675-block  6
    #####: 1676:}
call    0 never executed
call    1 never executed
    $$$$$: 1676-block  0
call    2 never executed
    $$$$$: 1676-block  1
call    3 never executed
------------------
        -: 1677:
        -: 1678:}  // namespace internal
        -: 1679:
        -: 1680:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1681:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1682:AssertionResult FloatLE(const char* expr1, const char* expr2, float val1,
        -: 1683:                        float val2) {
    #####: 1684:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1684-block  0
call    0 never executed
        -: 1685:}
        -: 1686:
        -: 1687:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1688:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1689:AssertionResult DoubleLE(const char* expr1, const char* expr2, double val1,
        -: 1690:                         double val2) {
    #####: 1691:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1691-block  0
call    0 never executed
        -: 1692:}
        -: 1693:
        -: 1694:namespace internal {
        -: 1695:
        -: 1696:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1697:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1698:                               const char* rhs_expression, const char* lhs,
        -: 1699:                               const char* rhs) {
    #####: 1700:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1700-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1701:    return AssertionSuccess();
    %%%%%: 1701-block  0
call    0 never executed
        -: 1702:  }
        -: 1703:
    #####: 1704:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1704-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1704-block  1
call    3 never executed
    $$$$$: 1704-block  2
call    4 never executed
    $$$$$: 1704-block  3
    #####: 1705:                   PrintToString(rhs), false);
    %%%%%: 1705-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1705-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1705-block  2
call    7 never executed
        -: 1706:}
        -: 1707:
        -: 1708:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1709:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1710:                                   const char* rhs_expression, const char* lhs,
        -: 1711:                                   const char* rhs) {
    #####: 1712:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1712-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1713:    return AssertionSuccess();
    %%%%%: 1713-block  0
call    0 never executed
        -: 1714:  }
        -: 1715:
    #####: 1716:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 1716-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1716-block  1
call    3 never executed
    $$$$$: 1716-block  2
call    4 never executed
    $$$$$: 1716-block  3
    #####: 1717:                   PrintToString(rhs), true);
    %%%%%: 1717-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1717-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 1717-block  2
call    7 never executed
        -: 1718:}
        -: 1719:
        -: 1720:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1721:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1722:                               const char* s2_expression, const char* s1,
        -: 1723:                               const char* s2) {
    #####: 1724:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1724-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1725:    return AssertionSuccess();
    %%%%%: 1725-block  0
call    0 never executed
        -: 1726:  } else {
    #####: 1727:    return AssertionFailure()
    %%%%%: 1727-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1727-block  1
call    3 never executed
    $$$$$: 1727-block  2
call    4 never executed
    #####: 1728:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1728-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1728-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1728-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1728-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1729:           << "), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1729-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1729-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1729-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1729-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1729-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1729-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1729-block  6
        -: 1730:  }
        -: 1731:}
        -: 1732:
        -: 1733:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1734:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1735:                                   const char* s2_expression, const char* s1,
        -: 1736:                                   const char* s2) {
    #####: 1737:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1737-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1738:    return AssertionSuccess();
    %%%%%: 1738-block  0
call    0 never executed
        -: 1739:  } else {
    #####: 1740:    return AssertionFailure()
    %%%%%: 1740-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1740-block  1
call    3 never executed
    $$$$$: 1740-block  2
call    4 never executed
    #####: 1741:           << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 1741-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1741-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1741-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1741-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1742:           << ") (ignoring case), actual: \"" << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1742-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1742-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1742-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1742-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1742-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1742-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1742-block  6
        -: 1743:  }
        -: 1744:}
        -: 1745:
        -: 1746:}  // namespace internal
        -: 1747:
        -: 1748:namespace {
        -: 1749:
        -: 1750:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1751:
        -: 1752:// This group of overloaded functions return true if and only if needle
        -: 1753:// is a substring of haystack.  NULL is considered a substring of
        -: 1754:// itself only.
        -: 1755:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1756:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1757:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1757-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1757-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1757-block  2
        -: 1758:
    #####: 1759:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1759-block  0
        -: 1760:}
        -: 1761:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1762:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1763:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1763-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1763-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 1763-block  2
        -: 1764:
    #####: 1765:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1765-block  0
call    0 never executed
        -: 1766:}
        -: 1767:
        -: 1768:// StringType here can be either ::std::string or ::std::wstring.
        -: 1769:template <typename StringType>
    #####: 1770:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1771:  return haystack.find(needle) != StringType::npos;
        -: 1772:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1770:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1771:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1771-block  0
call    0 never executed
        -: 1772:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1770:bool IsSubstringPred(const StringType& needle, const StringType& haystack) {
    #####: 1771:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1771-block  0
call    0 never executed
        -: 1772:}
------------------
        -: 1773:
        -: 1774:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1775:// depending on the value of the expected_to_be_substring parameter.
        -: 1776:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1777:// or ::std::wstring.
        -: 1778:template <typename StringType>
    #####: 1779:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1780:                                const char* needle_expr,
        -: 1781:                                const char* haystack_expr,
        -: 1782:                                const StringType& needle,
        -: 1783:                                const StringType& haystack) {
    #####: 1784:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1785:    return AssertionSuccess();
        -: 1786:
    #####: 1787:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1788:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1789:  return AssertionFailure()
    #####: 1790:         << "Value of: " << needle_expr << "\n"
    #####: 1791:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1792:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1793:         << "a substring of " << haystack_expr << "\n"
    #####: 1794:         << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1795:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1779:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1780:                                const char* needle_expr,
        -: 1781:                                const char* haystack_expr,
        -: 1782:                                const StringType& needle,
        -: 1783:                                const StringType& haystack) {
    #####: 1784:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1785:    return AssertionSuccess();
    %%%%%: 1785-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1786:
    #####: 1787:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1788:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1789:  return AssertionFailure()
    #####: 1790:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1790-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1790-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1790-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1790-block  4
call   12 never executed
    $$$$$: 1790-block  5
    #####: 1791:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1791-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1792:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1792-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1792-block  2
    %%%%%: 1792-block  3
    %%%%%: 1792-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1792-block  5
call    8 never executed
    $$$$$: 1792-block  6
    #####: 1793:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1793-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1793-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1794:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1794-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1794-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1794-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1794-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1794-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1794-block  5
        -: 1795:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1779:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1780:                                const char* needle_expr,
        -: 1781:                                const char* haystack_expr,
        -: 1782:                                const StringType& needle,
        -: 1783:                                const StringType& haystack) {
    #####: 1784:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1785:    return AssertionSuccess();
    %%%%%: 1785-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1786:
    #####: 1787:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1788:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1789:  return AssertionFailure()
    #####: 1790:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1790-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1790-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1790-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1790-block  4
call   12 never executed
    $$$$$: 1790-block  5
    #####: 1791:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1791-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1792:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1792-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1792-block  2
    %%%%%: 1792-block  3
    %%%%%: 1792-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1792-block  5
call    8 never executed
    $$$$$: 1792-block  6
    #####: 1793:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1793-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1793-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1794:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1794-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1794-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1794-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1794-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1794-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1794-block  5
        -: 1795:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1779:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1780:                                const char* needle_expr,
        -: 1781:                                const char* haystack_expr,
        -: 1782:                                const StringType& needle,
        -: 1783:                                const StringType& haystack) {
    #####: 1784:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1785:    return AssertionSuccess();
    %%%%%: 1785-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1786:
    #####: 1787:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1788:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1789:  return AssertionFailure()
    #####: 1790:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1790-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1790-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1790-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1790-block  4
call   12 never executed
    $$$$$: 1790-block  5
    #####: 1791:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1791-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1792:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1792-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1792-block  2
    %%%%%: 1792-block  3
    %%%%%: 1792-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1792-block  5
call    8 never executed
    $$$$$: 1792-block  6
    #####: 1793:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1793-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1793-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1794:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1794-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1794-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1794-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1794-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1794-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1794-block  5
        -: 1795:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1779:AssertionResult IsSubstringImpl(bool expected_to_be_substring,
        -: 1780:                                const char* needle_expr,
        -: 1781:                                const char* haystack_expr,
        -: 1782:                                const StringType& needle,
        -: 1783:                                const StringType& haystack) {
    #####: 1784:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 1785:    return AssertionSuccess();
    %%%%%: 1785-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1786:
    #####: 1787:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1788:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1789:  return AssertionFailure()
    #####: 1790:         << "Value of: " << needle_expr << "\n"
    %%%%%: 1790-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1790-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1790-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1790-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    $$$$$: 1790-block  4
call   12 never executed
    $$$$$: 1790-block  5
    #####: 1791:         << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1791-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1791-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1791-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 1792:         << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1792-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1792-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1792-block  2
    %%%%%: 1792-block  3
    %%%%%: 1792-block  4
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 1792-block  5
call    8 never executed
    $$$$$: 1792-block  6
    #####: 1793:         << "a substring of " << haystack_expr << "\n"
    %%%%%: 1793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1793-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1793-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 1794:         << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1794-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1794-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1794-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1794-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1794-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1794-block  5
        -: 1795:}
------------------
        -: 1796:
        -: 1797:}  // namespace
        -: 1798:
        -: 1799:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1800:// substring of haystack (NULL is considered a substring of itself
        -: 1801:// only), and return an appropriate error message when they fail.
        -: 1802:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1803:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1804:                            const char* needle, const char* haystack) {
    #####: 1805:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1805-block  0
call    0 never executed
        -: 1806:}
        -: 1807:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1808:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1809:                            const wchar_t* needle, const wchar_t* haystack) {
    #####: 1810:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1810-block  0
call    0 never executed
        -: 1811:}
        -: 1812:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1813:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1814:                               const char* haystack_expr, const char* needle,
        -: 1815:                               const char* haystack) {
    #####: 1816:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1816-block  0
call    0 never executed
        -: 1817:}
        -: 1818:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1819:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1820:                               const char* haystack_expr, const wchar_t* needle,
        -: 1821:                               const wchar_t* haystack) {
    #####: 1822:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1822-block  0
call    0 never executed
        -: 1823:}
        -: 1824:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1825:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1826:                            const ::std::string& needle,
        -: 1827:                            const ::std::string& haystack) {
    #####: 1828:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1828-block  0
call    0 never executed
        -: 1829:}
        -: 1830:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1831:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1832:                               const char* haystack_expr,
        -: 1833:                               const ::std::string& needle,
        -: 1834:                               const ::std::string& haystack) {
    #####: 1835:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1835-block  0
call    0 never executed
        -: 1836:}
        -: 1837:
        -: 1838:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1839:AssertionResult IsSubstring(const char* needle_expr, const char* haystack_expr,
        -: 1840:                            const ::std::wstring& needle,
        -: 1841:                            const ::std::wstring& haystack) {
    #####: 1842:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1842-block  0
call    0 never executed
        -: 1843:}
        -: 1844:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1845:AssertionResult IsNotSubstring(const char* needle_expr,
        -: 1846:                               const char* haystack_expr,
        -: 1847:                               const ::std::wstring& needle,
        -: 1848:                               const ::std::wstring& haystack) {
    #####: 1849:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1849-block  0
call    0 never executed
        -: 1850:}
        -: 1851:#endif  // GTEST_HAS_STD_WSTRING
        -: 1852:
        -: 1853:namespace internal {
        -: 1854:
        -: 1855:#if GTEST_OS_WINDOWS
        -: 1856:
        -: 1857:namespace {
        -: 1858:
        -: 1859:// Helper function for IsHRESULT{SuccessFailure} predicates
function _ZN7testing8internal12_GLOBAL__N_120HRESULTFailureHelperEPKcS3_l called 0 returned 0% blocks executed 0%
    #####: 1860:AssertionResult HRESULTFailureHelper(const char* expr, const char* expected,
        -: 1861:                                     long hr) {  // NOLINT
        -: 1862:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1863:
        -: 1864:  // Windows CE doesn't support FormatMessage.
        -: 1865:  const char error_text[] = "";
        -: 1866:
        -: 1867:#else
        -: 1868:
        -: 1869:  // Looks up the human-readable system message for the HRESULT code
        -: 1870:  // and since we're not passing any params to FormatMessage, we don't
        -: 1871:  // want inserts expanded.
    #####: 1872:  const DWORD kFlags =
        -: 1873:      FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;
    #####: 1874:  const DWORD kBufSize = 4096;
        -: 1875:  // Gets the system's human readable message string for this HRESULT.
    #####: 1876:  char error_text[kBufSize] = {'\0'};
    #####: 1877:  DWORD message_length = ::FormatMessageA(kFlags,
    %%%%%: 1877-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 1878:                                          0,  // no source, we're asking system
        -: 1879:                                          static_cast<DWORD>(hr),  // the error
        -: 1880:                                          0,  // no line width restrictions
        -: 1881:                                          error_text,  // output buffer
        -: 1882:                                          kBufSize,    // buf size
        -: 1883:                                          nullptr);  // no arguments for inserts
        -: 1884:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
    #####: 1885:  for (; message_length && IsSpace(error_text[message_length - 1]);
    %%%%%: 1885-block  0
    %%%%%: 1885-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1885-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 1885-block  3
    %%%%%: 1885-block  4
    %%%%%: 1885-block  5
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 1886:       --message_length) {
    #####: 1887:    error_text[message_length - 1] = '\0';
    %%%%%: 1887-block  0
        -: 1888:  }
        -: 1889:
        -: 1890:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1891:
    #####: 1892:  const std::string error_hex("0x" + String::FormatHexInt(hr));
    %%%%%: 1892-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1892-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1892-block  2
call    6 never executed
    $$$$$: 1892-block  3
call    7 never executed
    $$$$$: 1892-block  4
    #####: 1893:  return ::testing::AssertionFailure()
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1893-block  0
call    3 never executed
    $$$$$: 1893-block  1
call    4 never executed
    $$$$$: 1893-block  2
    #####: 1894:         << "Expected: " << expr << " " << expected << ".\n"
    %%%%%: 1894-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1894-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1894-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1894-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1894-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    #####: 1895:         << "  Actual: " << error_hex << " " << error_text << "\n";
    %%%%%: 1895-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1895-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1895-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1895-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 1895-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 1895-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 1895-block  6
    %%%%%: 1895-block  7
    #####: 1896:}
call    0 never executed
    $$$$$: 1896-block  0
call    1 never executed
        -: 1897:
        -: 1898:}  // namespace
        -: 1899:
function _ZN7testing8internal16IsHRESULTSuccessEPKcl called 0 returned 0% blocks executed 0%
    #####: 1900:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
    #####: 1901:  if (SUCCEEDED(hr)) {
    %%%%%: 1901-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1902:    return AssertionSuccess();
    %%%%%: 1902-block  0
call    0 never executed
        -: 1903:  }
    #####: 1904:  return HRESULTFailureHelper(expr, "succeeds", hr);
    %%%%%: 1904-block  0
call    0 never executed
        -: 1905:}
        -: 1906:
function _ZN7testing8internal16IsHRESULTFailureEPKcl called 0 returned 0% blocks executed 0%
    #####: 1907:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
    #####: 1908:  if (FAILED(hr)) {
    %%%%%: 1908-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1909:    return AssertionSuccess();
    %%%%%: 1909-block  0
call    0 never executed
        -: 1910:  }
    #####: 1911:  return HRESULTFailureHelper(expr, "fails", hr);
    %%%%%: 1911-block  0
call    0 never executed
        -: 1912:}
        -: 1913:
        -: 1914:#endif  // GTEST_OS_WINDOWS
        -: 1915:
        -: 1916:// Utility functions for encoding Unicode text (wide strings) in
        -: 1917:// UTF-8.
        -: 1918:
        -: 1919:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1920:// like this:
        -: 1921://
        -: 1922:// Code-point length   Encoding
        -: 1923://   0 -  7 bits       0xxxxxxx
        -: 1924://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1925://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1926://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1927:
        -: 1928:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1929:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) << 7) - 1;
        -: 1930:
        -: 1931:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1932:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1933:
        -: 1934:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1935:constexpr uint32_t kMaxCodePoint3 =
        -: 1936:    (static_cast<uint32_t>(1) << (4 + 2 * 6)) - 1;
        -: 1937:
        -: 1938:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1939:constexpr uint32_t kMaxCodePoint4 =
        -: 1940:    (static_cast<uint32_t>(1) << (3 + 3 * 6)) - 1;
        -: 1941:
        -: 1942:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1943:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1944:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1945:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1946:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1947:  *bits >>= n;
    #####: 1948:  return low_bits;
    %%%%%: 1948-block  0
        -: 1949:}
        -: 1950:
        -: 1951:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1952:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1953:// wide enough to contain a code point.
        -: 1954:// If the code_point is not a valid Unicode code point
        -: 1955:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1956:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1957:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1958:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1958-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1959:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1959-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 1959-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 1959-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 1959-block  3
    %%%%%: 1959-block  4
call    9 never executed
call   10 never executed
    $$$$$: 1959-block  5
call   11 never executed
    $$$$$: 1959-block  6
call   12 never executed
    $$$$$: 1959-block  7
    $$$$$: 1959-block  8
        -: 1960:  }
        -: 1961:
        -: 1962:  char str[5];  // Big enough for the largest valid code point.
    #####: 1963:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1963-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1964:    str[1] = '\0';
    #####: 1965:    str[0] = static_cast<char>(code_point);  // 0xxxxxxx
    %%%%%: 1965-block  0
    #####: 1966:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1966-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1967:    str[2] = '\0';
    #####: 1968:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1968-block  0
call    0 never executed
    #####: 1969:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1970:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1970-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 1971:    str[3] = '\0';
    #####: 1972:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1972-block  0
call    0 never executed
    #####: 1973:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1974:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1975:  } else {  // code_point <= kMaxCodePoint4
    #####: 1976:    str[4] = '\0';
    #####: 1977:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1977-block  0
call    0 never executed
    #####: 1978:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1979:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1980:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1981:  }
    #####: 1982:  return str;
    %%%%%: 1982-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 1982-block  1
        -: 1983:}
        -: 1984:
        -: 1985:// The following two functions only make sense if the system
        -: 1986:// uses UTF-16 for wide string encoding. All supported systems
        -: 1987:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1988:
        -: 1989:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1990:// and thus should be combined into a single Unicode code point
        -: 1991:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1992:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
    #####: 1993:  return sizeof(wchar_t) == 2 && (first & 0xFC00) == 0xD800 &&
    %%%%%: 1993-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1993-block  1
    %%%%%: 1993-block  2
    #####: 1994:         (second & 0xFC00) == 0xDC00;
    %%%%%: 1994-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 1994-block  1
        -: 1995:}
        -: 1996:
        -: 1997:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1998:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1999:                                                      wchar_t second) {
    #####: 2000:  const auto first_u = static_cast<uint32_t>(first);
    #####: 2001:  const auto second_u = static_cast<uint32_t>(second);
    #####: 2002:  const uint32_t mask = (1 << 10) - 1;
        -: 2003:  return (sizeof(wchar_t) == 2)
    #####: 2004:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 2005:             :
        -: 2006:             // This function should not be called when the condition is
        -: 2007:             // false, but we provide a sensible default in case it is.
    #####: 2008:             first_u;
    %%%%%: 2008-block  0
        -: 2009:}
        -: 2010:
        -: 2011:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 2012:// The wide string is assumed to have the following encoding:
        -: 2013://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 2014://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 2015:// Parameter str points to a null-terminated wide string.
        -: 2016:// Parameter num_chars may additionally limit the number
        -: 2017:// of wchar_t characters processed. -1 is used when the entire string
        -: 2018:// should be processed.
        -: 2019:// If the string contains code points that are not valid Unicode code points
        -: 2020:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 2021:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 2022:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 2023:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 2024:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 2025:  if (num_chars == -1) num_chars = static_cast<int>(wcslen(str));
    %%%%%: 2025-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2025-block  1
call    2 never executed
        -: 2026:
    #####: 2027:  ::std::stringstream stream;
    %%%%%: 2027-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2028:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2028-block  0
    %%%%%: 2028-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
        -: 2029:    uint32_t unicode_code_point;
        -: 2030:
    #####: 2031:    if (str[i] == L'\0') {
    %%%%%: 2031-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2032:      break;
    %%%%%: 2032-block  0
    #####: 2033:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2033-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2033-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2033-block  2
    %%%%%: 2033-block  3
    %%%%%: 2033-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
        -: 2034:      unicode_code_point =
    #####: 2035:          CreateCodePointFromUtf16SurrogatePair(str[i], str[i + 1]);
    %%%%%: 2035-block  0
call    0 never executed
    #####: 2036:      i++;
        -: 2037:    } else {
    #####: 2038:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2038-block  0
        -: 2039:    }
        -: 2040:
    #####: 2041:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2041-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2041-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2041-block  2
call    6 never executed
    $$$$$: 2041-block  3
call    7 never executed
    $$$$$: 2041-block  4
        -: 2042:  }
    #####: 2043:  return StringStreamToString(&stream);
    %%%%%: 2043-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2043-block  1
    #####: 2044:}
    %%%%%: 2044-block  0
call    0 never executed
    $$$$$: 2044-block  1
call    1 never executed
        -: 2045:
        -: 2046:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2047:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2048:std::string String::ShowWideCString(const wchar_t* wide_c_str) {
    #####: 2049:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2049-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2049-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
        -: 2050:
    #####: 2051:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2051-block  0
call    0 never executed
        -: 2052:}
        -: 2053:
        -: 2054:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2055:// same content.
        -: 2056://
        -: 2057:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2058:// C string is considered different to any non-NULL C string,
        -: 2059:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2060:bool String::WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs) {
    #####: 2061:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2061-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2061-block  1
        -: 2062:
    #####: 2063:  if (rhs == nullptr) return false;
    %%%%%: 2063-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2063-block  1
        -: 2064:
    #####: 2065:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2065-block  0
call    0 never executed
        -: 2066:}
        -: 2067:
        -: 2068:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2069:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2070:                               const char* rhs_expression, const wchar_t* lhs,
        -: 2071:                               const wchar_t* rhs) {
    #####: 2072:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2072-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2073:    return AssertionSuccess();
    %%%%%: 2073-block  0
call    0 never executed
        -: 2074:  }
        -: 2075:
    #####: 2076:  return EqFailure(lhs_expression, rhs_expression, PrintToString(lhs),
    %%%%%: 2076-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2076-block  1
call    3 never executed
    $$$$$: 2076-block  2
call    4 never executed
    $$$$$: 2076-block  3
    #####: 2077:                   PrintToString(rhs), false);
    %%%%%: 2077-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2077-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 2077-block  2
call    7 never executed
        -: 2078:}
        -: 2079:
        -: 2080:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2081:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2082:                               const char* s2_expression, const wchar_t* s1,
        -: 2083:                               const wchar_t* s2) {
    #####: 2084:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2084-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2085:    return AssertionSuccess();
    %%%%%: 2085-block  0
call    0 never executed
        -: 2086:  }
        -: 2087:
    #####: 2088:  return AssertionFailure()
    %%%%%: 2088-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2088-block  1
call    3 never executed
    #####: 2089:         << "Expected: (" << s1_expression << ") != (" << s2_expression
    %%%%%: 2089-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2089-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2089-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2089-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2090:         << "), actual: " << PrintToString(s1) << " vs " << PrintToString(s2);
    %%%%%: 2090-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2090-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2090-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2090-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2090-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 2090-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 2090-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 2090-block  7
    %%%%%: 2090-block  8
call   21 never executed
call   22 never executed
call   23 never executed
    $$$$$: 2090-block  9
call   24 never executed
    $$$$$: 2090-block 10
    $$$$$: 2090-block 11
call   25 never executed
    $$$$$: 2090-block 12
        -: 2091:}
        -: 2092:
        -: 2093:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2094:// the same content.
        -: 2095://
        -: 2096:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2097:// NULL C string is considered different to any non-NULL C string,
        -: 2098:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 2099:bool String::CaseInsensitiveCStringEquals(const char* lhs, const char* rhs) {
    #####: 2100:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2100-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2100-block  1
    #####: 2101:  if (rhs == nullptr) return false;
    %%%%%: 2101-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2101-block  1
    #####: 2102:  return posix::StrCaseCmp(lhs, rhs) == 0;
    %%%%%: 2102-block  0
call    0 never executed
        -: 2103:}
        -: 2104:
        -: 2105:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2106:// have the same content.
        -: 2107://
        -: 2108:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2109:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2110:// including the empty string.
        -: 2111:// NB: The implementations on different platforms slightly differ.
        -: 2112:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2113:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2114:// which compares according to LC_CTYPE category of the current locale.
        -: 2115:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2116:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2117:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2118:                                              const wchar_t* rhs) {
    #####: 2119:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2119-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2119-block  1
        -: 2120:
    #####: 2121:  if (rhs == nullptr) return false;
    %%%%%: 2121-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2121-block  1
        -: 2122:
        -: 2123:#if GTEST_OS_WINDOWS
    #####: 2124:  return _wcsicmp(lhs, rhs) == 0;
    %%%%%: 2124-block  0
call    0 never executed
        -: 2125:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
        -: 2126:  return wcscasecmp(lhs, rhs) == 0;
        -: 2127:#else
        -: 2128:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2129:  // Other unknown OSes may not define it either.
        -: 2130:  wint_t left, right;
        -: 2131:  do {
        -: 2132:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2133:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2134:  } while (left && left == right);
        -: 2135:  return left == right;
        -: 2136:#endif  // OS selector
        -: 2137:}
        -: 2138:
        -: 2139:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2140:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2141:bool String::EndsWithCaseInsensitive(const std::string& str,
        -: 2142:                                     const std::string& suffix) {
    #####: 2143:  const size_t str_len = str.length();
    %%%%%: 2143-block  0
call    0 never executed
    #####: 2144:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2145:  return (str_len >= suffix_len) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2145-block  0
    %%%%%: 2145-block  1
    #####: 2146:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2146-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2147:                                      suffix.c_str());
    %%%%%: 2147-block  0
        -: 2148:}
        -: 2149:
        -: 2150:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2151:std::string String::FormatIntWidth2(int value) {
    #####: 2152:  return FormatIntWidthN(value, 2);
    %%%%%: 2152-block  0
call    0 never executed
        -: 2153:}
        -: 2154:
        -: 2155:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2156:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2157:  std::stringstream ss;
    %%%%%: 2157-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2158:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2158-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2158-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2159:  return ss.str();
    %%%%%: 2159-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2159-block  1
    #####: 2160:}
    %%%%%: 2160-block  0
call    0 never executed
    $$$$$: 2160-block  1
call    1 never executed
        -: 2161:
        -: 2162:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2163:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2164:  std::stringstream ss;
    %%%%%: 2164-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2165:  ss << std::hex << std::uppercase << value;
    %%%%%: 2165-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2165-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2165-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2166:  return ss.str();
    %%%%%: 2166-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2166-block  1
    #####: 2167:}
    %%%%%: 2167-block  0
call    0 never executed
    $$$$$: 2167-block  1
call    1 never executed
        -: 2168:
        -: 2169:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2170:std::string String::FormatHexInt(int value) {
    #####: 2171:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2171-block  0
call    0 never executed
        -: 2172:}
        -: 2173:
        -: 2174:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2175:std::string String::FormatByte(unsigned char value) {
    #####: 2176:  std::stringstream ss;
    %%%%%: 2176-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2177:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2177-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2177-block  1
call    4 never executed
call    5 never executed
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2177-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2178:     << static_cast<unsigned int>(value);
    %%%%%: 2178-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2179:  return ss.str();
    %%%%%: 2179-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2179-block  1
    #####: 2180:}
    %%%%%: 2180-block  0
call    0 never executed
    $$$$$: 2180-block  1
call    1 never executed
        -: 2181:
        -: 2182:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2183:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 42 returned 100% blocks executed 75%
       42: 2184:std::string StringStreamToString(::std::stringstream* ss) {
       42: 2185:  const ::std::string& str = ss->str();
       42: 2185-block  0
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
       42: 2186:  const char* const start = str.c_str();
       42: 2186-block  0
call    0 returned 42
       42: 2187:  const char* const end = start + str.length();
call    0 returned 42
        -: 2188:
       42: 2189:  std::string result;
call    0 returned 42
       42: 2190:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 42
branch  1 taken 42 (fallthrough)
branch  2 taken 0 (throw)
      870: 2191:  for (const char* ch = start; ch != end; ++ch) {
       42: 2191-block  0
      828: 2191-block  1
      870: 2191-block  2
branch  0 taken 828
branch  1 taken 42 (fallthrough)
      828: 2192:    if (*ch == '\0') {
      828: 2192-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 828
    #####: 2193:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2193-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2194:    } else {
      828: 2195:      result += *ch;
      828: 2195-block  0
call    0 returned 828
branch  1 taken 828 (fallthrough)
branch  2 taken 0 (throw)
        -: 2196:    }
        -: 2197:  }
        -: 2198:
       84: 2199:  return result;
       42: 2199-block  0
       42: 2199-block  1
       42: 2200:}
       42: 2200-block  0
call    0 returned 42
    $$$$$: 2200-block  1
call    1 never executed
    $$$$$: 2200-block  2
call    2 never executed
        -: 2201:
        -: 2202:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2203:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2204:                              const Message& user_msg) {
        -: 2205:  // Appends the user message if it's non-empty.
    #####: 2206:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2206-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2207:  if (user_msg_string.empty()) {
    %%%%%: 2207-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2208:    return gtest_msg;
    %%%%%: 2208-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2209:  }
    #####: 2210:  if (gtest_msg.empty()) {
    %%%%%: 2210-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2211:    return user_msg_string;
    %%%%%: 2211-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2212:  }
    #####: 2213:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2213-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2213-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2213-block  2
    %%%%%: 2213-block  3
call    6 never executed
    $$$$$: 2213-block  4
call    7 never executed
    $$$$$: 2213-block  5
    #####: 2214:}
    %%%%%: 2214-block  0
call    0 never executed
    $$$$$: 2214-block  1
call    1 never executed
        -: 2215:
        -: 2216:}  // namespace internal
        -: 2217:
        -: 2218:// class TestResult
        -: 2219:
        -: 2220:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 9 returned 100% blocks executed 100%
        9: 2221:TestResult::TestResult()
        9: 2222:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
        9: 2222-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
        -: 2223:
        -: 2224:// D'tor.
function _ZN7testing10TestResultD2Ev called 0 returned 0% blocks executed 0%
    #####: 2225:TestResult::~TestResult() {}
    %%%%%: 2225-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2226:
        -: 2227:// Returns the i-th test part result among all the results. i can
        -: 2228:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2229:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2230:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2231:  if (i < 0 || i >= total_part_count()) internal::posix::Abort();
    %%%%%: 2231-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2231-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2231-block  2
    %%%%%: 2231-block  3
    %%%%%: 2231-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 2231-block  5
call    7 never executed
    #####: 2232:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2232-block  0
call    0 never executed
        -: 2233:}
        -: 2234:
        -: 2235:// Returns the i-th test property. i can range from 0 to
        -: 2236:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2237:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2238:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2239:  if (i < 0 || i >= test_property_count()) internal::posix::Abort();
    %%%%%: 2239-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2239-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2239-block  2
    %%%%%: 2239-block  3
    %%%%%: 2239-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 2239-block  5
call    7 never executed
    #####: 2240:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2240-block  0
call    0 never executed
        -: 2241:}
        -: 2242:
        -: 2243:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2244:void TestResult::ClearTestPartResults() { test_part_results_.clear(); }
    %%%%%: 2244-block  0
call    0 never executed
        -: 2245:
        -: 2246:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2247:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2248:  test_part_results_.push_back(test_part_result);
    %%%%%: 2248-block  0
call    0 never executed
    #####: 2249:}
        -: 2250:
        -: 2251:// Adds a test property to the list. If a property with the same key as the
        -: 2252:// supplied property is already represented, the value of this test_property
        -: 2253:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2254:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2255:                                const TestProperty& test_property) {
    #####: 2256:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2256-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2256-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 2257:    return;
    %%%%%: 2257-block  0
    %%%%%: 2257-block  1
        -: 2258:  }
    #####: 2259:  internal::MutexLock lock(&test_properties_mutex_);
    %%%%%: 2259-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2260:  const std::vector<TestProperty>::iterator property_with_matching_key =
    #####: 2261:      std::find_if(test_properties_.begin(), test_properties_.end(),
    %%%%%: 2261-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2262:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2262-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2262-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2262-block  2
call    7 never executed
call    8 never executed
    $$$$$: 2262-block  3
call    9 never executed
    $$$$$: 2262-block  4
call   10 never executed
    $$$$$: 2262-block  5
    $$$$$: 2262-block  6
    $$$$$: 2262-block  7
    #####: 2263:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 2264:    test_properties_.push_back(test_property);
    %%%%%: 2264-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2265:    return;
    %%%%%: 2265-block  0
        -: 2266:  }
    #####: 2267:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2267-block  0
call    0 never executed
    %%%%%: 2267-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2267-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2267-block  3
call    8 never executed
    $$$$$: 2267-block  4
call    9 never executed
    $$$$$: 2267-block  5
    $$$$$: 2267-block  6
    #####: 2268:}
    %%%%%: 2268-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 2268-block  1
call    3 never executed
        -: 2269:
        -: 2270:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2271:// output.
        -: 2272:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2273:    "disabled",    "errors", "failures", "name",
        -: 2274:    "random_seed", "tests",  "time",     "timestamp"};
        -: 2275:
        -: 2276:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2277:// output.
        -: 2278:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2279:    "disabled", "errors", "failures",  "name",
        -: 2280:    "tests",    "time",   "timestamp", "skipped"};
        -: 2281:
        -: 2282:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2283:static const char* const kReservedTestCaseAttributes[] = {
        -: 2284:    "classname",  "name",        "status", "time",
        -: 2285:    "type_param", "value_param", "file",   "line"};
        -: 2286:
        -: 2287:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2288:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2289:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2290:    "classname",   "name", "status", "time",   "type_param",
        -: 2291:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2292:
        -: 2293:template <size_t kSize>
    #####: 2294:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2295:  return std::vector<std::string>(array, array + kSize);
        -: 2296:}
------------------
_ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2294:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2294-block  0
    #####: 2295:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2295-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2295-block  1
        -: 2296:}
------------------
_ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILy8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2294:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    %%%%%: 2294-block  0
    #####: 2295:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2295-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2295-block  1
        -: 2296:}
------------------
        -: 2297:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2298:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2299:    const std::string& xml_element) {
    #####: 2300:  if (xml_element == "testsuites") {
    %%%%%: 2300-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2301:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2301-block  0
call    0 never executed
    #####: 2302:  } else if (xml_element == "testsuite") {
    %%%%%: 2302-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2303:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2303-block  0
call    0 never executed
    #####: 2304:  } else if (xml_element == "testcase") {
    %%%%%: 2304-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2305:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2305-block  0
call    0 never executed
        -: 2306:  } else {
    #####: 2307:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2307-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2307-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2307-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2307-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2307-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2307-block  5
call   16 never executed
    $$$$$: 2307-block  6
call   17 never executed
        -: 2308:  }
        -: 2309:  // This code is unreachable but some compilers may not realizes that.
    #####: 2310:  return std::vector<std::string>();
    %%%%%: 2310-block  0
call    0 never executed
        -: 2311:}
        -: 2312:
        -: 2313:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2314:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2315:    const std::string& xml_element) {
    #####: 2316:  if (xml_element == "testsuites") {
    %%%%%: 2316-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2317:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2317-block  0
call    0 never executed
    #####: 2318:  } else if (xml_element == "testsuite") {
    %%%%%: 2318-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2319:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2319-block  0
call    0 never executed
    #####: 2320:  } else if (xml_element == "testcase") {
    %%%%%: 2320-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2321:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2321-block  0
call    0 never executed
        -: 2322:  } else {
    #####: 2323:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2323-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2323-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2323-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2323-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 2323-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 2323-block  5
call   16 never executed
    $$$$$: 2323-block  6
call   17 never executed
        -: 2324:  }
        -: 2325:  // This code is unreachable but some compilers may not realizes that.
    #####: 2326:  return std::vector<std::string>();
    %%%%%: 2326-block  0
call    0 never executed
        -: 2327:}
        -: 2328:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2329:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2330:  Message word_list;
    %%%%%: 2330-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2331:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2331-block  0
    %%%%%: 2331-block  1
    %%%%%: 2331-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2332:    if (i > 0 && words.size() > 2) {
    %%%%%: 2332-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2332-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2332-block  2
    %%%%%: 2332-block  3
    %%%%%: 2332-block  4
branch  5 never executed (fallthrough)
branch  6 never executed
    #####: 2333:      word_list << ", ";
    %%%%%: 2333-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2334:    }
    #####: 2335:    if (i == words.size() - 1) {
    %%%%%: 2335-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 2336:      word_list << "and ";
    %%%%%: 2336-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2337:    }
    #####: 2338:    word_list << "'" << words[i] << "'";
    %%%%%: 2338-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2338-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2338-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
        -: 2339:  }
    #####: 2340:  return word_list.GetString();
    %%%%%: 2340-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2340-block  1
    #####: 2341:}
    %%%%%: 2341-block  0
call    0 never executed
    $$$$$: 2341-block  1
call    1 never executed
        -: 2342:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2343:static bool ValidateTestPropertyName(
        -: 2344:    const std::string& property_name,
        -: 2345:    const std::vector<std::string>& reserved_names) {
    #####: 2346:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2346-block  0
call    5 never executed
    $$$$$: 2346-block  1
    #####: 2347:      reserved_names.end()) {
    %%%%%: 2347-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 2347-block  1
call    3 never executed
    #####: 2348:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2348-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2348-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2348-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2348-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2348-block  4
call   12 never executed
    $$$$$: 2348-block  5
call   13 never executed
    $$$$$: 2348-block  6
    $$$$$: 2348-block  7
call   14 never executed
    #####: 2349:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2349-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2349-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2349-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
    $$$$$: 2349-block  3
call   11 never executed
    $$$$$: 2349-block  4
    #####: 2350:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2350-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2350-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2350-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 2351:    return false;
        -: 2352:  }
    #####: 2353:  return true;
    %%%%%: 2353-block  0
        -: 2354:}
        -: 2355:
        -: 2356:// Adds a failure if the key is a reserved attribute of the element named
        -: 2357:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2358:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2359:                                      const TestProperty& test_property) {
    #####: 2360:  return ValidateTestPropertyName(test_property.key(),
    %%%%%: 2360-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2360-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2360-block  2
call    7 never executed
    $$$$$: 2360-block  3
call    8 never executed
    $$$$$: 2360-block  4
    $$$$$: 2360-block  5
    #####: 2361:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2361-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2361-block  1
call    3 never executed
    %%%%%: 2361-block  2
    $$$$$: 2361-block  3
call    4 never executed
        -: 2362:}
        -: 2363:
        -: 2364:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 0 returned 0% blocks executed 0%
    #####: 2365:void TestResult::Clear() {
    #####: 2366:  test_part_results_.clear();
    %%%%%: 2366-block  0
call    0 never executed
    #####: 2367:  test_properties_.clear();
call    0 never executed
    #####: 2368:  death_test_count_ = 0;
    #####: 2369:  elapsed_time_ = 0;
    #####: 2370:}
        -: 2371:
        -: 2372:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2373:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2374:  return result.skipped();
    %%%%%: 2374-block  0
call    0 never executed
        -: 2375:}
        -: 2376:
        -: 2377:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 0 returned 0% blocks executed 0%
    #####: 2378:bool TestResult::Skipped() const {
    #####: 2379:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
    %%%%%: 2379-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2379-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 2379-block  2
    %%%%%: 2379-block  3
    %%%%%: 2379-block  4
        -: 2380:}
        -: 2381:
        -: 2382:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 0 returned 0% blocks executed 0%
    #####: 2383:bool TestResult::Failed() const {
    #####: 2384:  for (int i = 0; i < total_part_count(); ++i) {
    %%%%%: 2384-block  0
    %%%%%: 2384-block  1
    %%%%%: 2384-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 2385:    if (GetTestPartResult(i).failed()) return true;
    %%%%%: 2385-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2385-block  1
        -: 2386:  }
    #####: 2387:  return false;
    %%%%%: 2387-block  0
        -: 2388:}
        -: 2389:
        -: 2390:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2391:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2392:  return result.fatally_failed();
    %%%%%: 2392-block  0
call    0 never executed
        -: 2393:}
        -: 2394:
        -: 2395:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2396:bool TestResult::HasFatalFailure() const {
    #####: 2397:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
    %%%%%: 2397-block  0
call    0 never executed
        -: 2398:}
        -: 2399:
        -: 2400:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2401:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2402:  return result.nonfatally_failed();
    %%%%%: 2402-block  0
call    0 never executed
        -: 2403:}
        -: 2404:
        -: 2405:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2406:bool TestResult::HasNonfatalFailure() const {
    #####: 2407:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2407-block  0
call    0 never executed
        -: 2408:}
        -: 2409:
        -: 2410:// Gets the number of all test parts.  This is the sum of the number
        -: 2411:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 0 returned 0% blocks executed 0%
    #####: 2412:int TestResult::total_part_count() const {
    #####: 2413:  return static_cast<int>(test_part_results_.size());
    %%%%%: 2413-block  0
call    0 never executed
        -: 2414:}
        -: 2415:
        -: 2416:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2417:int TestResult::test_property_count() const {
    #####: 2418:  return static_cast<int>(test_properties_.size());
    %%%%%: 2418-block  0
call    0 never executed
        -: 2419:}
        -: 2420:
        -: 2421:// class Test
        -: 2422:
        -: 2423:// Creates a Test object.
        -: 2424:
        -: 2425:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 0 returned 0% blocks executed 0%
    #####: 2426:Test::Test() : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {}
    %%%%%: 2426-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2426-block  1
call    4 never executed
    $$$$$: 2426-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$: 2426-block  3
call    7 never executed
        -: 2427:
        -: 2428:// The d'tor restores the states of all flags.  The actual work is
        -: 2429:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2430:// visible here.
    #####: 2431:Test::~Test() {}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2431:Test::~Test() {}
    %%%%%: 2431-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 0 returned 0% blocks executed 0%
    #####: 2431:Test::~Test() {}
    %%%%%: 2431-block  0
call    0 never executed
------------------
        -: 2432:
        -: 2433:// Sets up the test fixture.
        -: 2434://
        -: 2435:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 0 returned 0% blocks executed 0%
    #####: 2436:void Test::SetUp() {}
        -: 2437:
        -: 2438:// Tears down the test fixture.
        -: 2439://
        -: 2440:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 0 returned 0% blocks executed 0%
    #####: 2441:void Test::TearDown() {}
        -: 2442:
        -: 2443:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2444:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2445:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2445-block  0
call    0 never executed
call    1 never executed
    #####: 2446:}
        -: 2447:
        -: 2448:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2449:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2450:  Message value_message;
    %%%%%: 2450-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2451:  value_message << value;
    %%%%%: 2451-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2452:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2452-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2452-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2452-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 2452-block  3
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 2452-block  4
call   13 never executed
    $$$$$: 2452-block  5
call   14 never executed
    $$$$$: 2452-block  6
    $$$$$: 2452-block  7
    $$$$$: 2452-block  8
    #####: 2453:}
call    0 never executed
    $$$$$: 2453-block  0
call    1 never executed
        -: 2454:
        -: 2455:namespace internal {
        -: 2456:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2457:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2458:                                    const std::string& message) {
        -: 2459:  // This function is a friend of UnitTest and as such has access to
        -: 2460:  // AddTestPartResult.
    #####: 2461:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2461-block  0
call    0 never executed
    %%%%%: 2461-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2461-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2461-block  3
call    7 never executed
    $$$$$: 2461-block  4
call    8 never executed
    $$$$$: 2461-block  5
        -: 2462:      result_type,
        -: 2463:      nullptr,  // No info about the source file where the exception occurred.
        -: 2464:      -1,       // We have no info on which line caused the exception.
        -: 2465:      message,
        -: 2466:      "");  // No stack trace, either.
    #####: 2467:}
        -: 2468:
        -: 2469:}  // namespace internal
        -: 2470:
        -: 2471:// Google Test requires all tests in the same test suite to use the same test
        -: 2472:// fixture class.  This function checks if the current test has the
        -: 2473:// same fixture class as the first test in the current test suite.  If
        -: 2474:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2475:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 0 returned 0% blocks executed 0%
    #####: 2476:bool Test::HasSameFixtureClass() {
    #####: 2477:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2477-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2478:  const TestSuite* const test_suite = impl->current_test_suite();
    %%%%%: 2478-block  0
call    0 never executed
        -: 2479:
        -: 2480:  // Info about the first test in the current test suite.
    #####: 2481:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 never executed
call    1 never executed
    #####: 2482:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
    #####: 2483:  const char* const first_test_name = first_test_info->name();
call    0 never executed
        -: 2484:
        -: 2485:  // Info about the current test.
    #####: 2486:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 never executed
    #####: 2487:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
    #####: 2488:  const char* const this_test_name = this_test_info->name();
call    0 never executed
        -: 2489:
    #####: 2490:  if (this_fixture_id != first_fixture_id) {
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2491:    // Is the first test defined using TEST?
    #####: 2492:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2492-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2493:    // Is this test defined using TEST?
    #####: 2494:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2494-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2495:
    #####: 2496:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2496-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2496-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2497:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2498:      // Tell the user how to fix this.
        -: 2499:
        -: 2500:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2501:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2502:      // the fixture IDs are different for the two tests.
    #####: 2503:      const char* const TEST_name =
    %%%%%: 2503-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2503-block  1
    %%%%%: 2503-block  2
        -: 2504:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2505:      const char* const TEST_F_name =
    %%%%%: 2505-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2505-block  1
    %%%%%: 2505-block  2
        -: 2506:          first_is_TEST ? this_test_name : first_test_name;
        -: 2507:
    #####: 2508:      ADD_FAILURE()
    %%%%%: 2508-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2508-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2508-block  2
call    6 never executed
    $$$$$: 2508-block  3
call    7 never executed
    $$$$$: 2508-block  4
    $$$$$: 2508-block  5
call    8 never executed
    $$$$$: 2508-block  6
    #####: 2509:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2510:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2510-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2511:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2511-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2511-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2511-block  2
    #####: 2512:          << ",\n"
    %%%%%: 2512-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2513:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2513-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2513-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2513-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2514:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2514-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2514-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2514-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2515:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2515-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2516:          << "case.";
    %%%%%: 2516-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2516-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2517:    } else {
        -: 2518:      // Two fixture classes with the same name appear in two different
        -: 2519:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2520:      ADD_FAILURE()
    %%%%%: 2520-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2520-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2520-block  2
call    6 never executed
    $$$$$: 2520-block  3
call    7 never executed
    $$$$$: 2520-block  4
    $$$$$: 2520-block  5
call    8 never executed
    $$$$$: 2520-block  6
    #####: 2521:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2521-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2522:          << "class.  However, in test suite "
    %%%%%: 2522-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2523:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2523-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 2523-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
call    7 never executed
    $$$$$: 2523-block  2
    #####: 2524:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2524-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2524-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2524-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2525:          << this_test_name << "\n"
    %%%%%: 2525-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2525-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2526:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2526-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2527:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2527-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2528:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2528-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2529:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2529-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2529-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2530:    }
    #####: 2531:    return false;
    %%%%%: 2531-block  0
        -: 2532:  }
        -: 2533:
    #####: 2534:  return true;
    %%%%%: 2534-block  0
        -: 2535:}
        -: 2536:
        -: 2537:#if GTEST_HAS_SEH
        -: 2538:
        -: 2539:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2540:// function returns its result via an output parameter pointer because VC++
        -: 2541:// prohibits creation of objects with destructors on stack in functions
        -: 2542:// using __try (see error C2712).
        -: 2543:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2544:                                              const char* location) {
        -: 2545:  Message message;
        -: 2546:  message << "SEH exception with code 0x" << std::setbase(16) << exception_code
        -: 2547:          << std::setbase(10) << " thrown in " << location << ".";
        -: 2548:
        -: 2549:  return new std::string(message.GetString());
        -: 2550:}
        -: 2551:
        -: 2552:#endif  // GTEST_HAS_SEH
        -: 2553:
        -: 2554:namespace internal {
        -: 2555:
        -: 2556:#if GTEST_HAS_EXCEPTIONS
        -: 2557:
        -: 2558:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2559:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2560:                                             const char* location) {
    #####: 2561:  Message message;
    %%%%%: 2561-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2562:  if (description != nullptr) {
    %%%%%: 2562-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2563:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2563-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2563-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2563-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2564:  } else {
    #####: 2565:    message << "Unknown C++ exception";
    %%%%%: 2565-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2566:  }
    #####: 2567:  message << " thrown in " << location << ".";
    %%%%%: 2567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2567-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2567-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 2568:
    #####: 2569:  return message.GetString();
    %%%%%: 2569-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2569-block  1
    #####: 2570:}
    %%%%%: 2570-block  0
call    0 never executed
    $$$$$: 2570-block  1
call    1 never executed
        -: 2571:
        -: 2572:static std::string PrintTestPartResultToString(
        -: 2573:    const TestPartResult& test_part_result);
        -: 2574:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2575:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2576:    const TestPartResult& failure)
    #####: 2577:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2577-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2577-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 2577-block  2
call    7 never executed
    $$$$$: 2577-block  3
call    8 never executed
        -: 2578:
        -: 2579:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2580:
        -: 2581:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2582:// compiler rejects the code if they were declared static.
        -: 2583:
        -: 2584:// Runs the given method and handles SEH exceptions it throws, when
        -: 2585:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2586:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2587:// exceptions in the same function.  Therefore, we provide a separate
        -: 2588:// wrapper function for handling SEH exceptions.)
        -: 2589:template <class T, typename Result>
    #####: 2590:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2591:                                              const char* location) {
        -: 2592:#if GTEST_HAS_SEH
        -: 2593:  __try {
        -: 2594:    return (object->*method)();
        -: 2595:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2596:      GetExceptionCode())) {
        -: 2597:    // We create the exception message on the heap because VC++ prohibits
        -: 2598:    // creation of objects with destructors on stack in functions using __try
        -: 2599:    // (see error C2712).
        -: 2600:    std::string* exception_message =
        -: 2601:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2602:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2603:                                             *exception_message);
        -: 2604:    delete exception_message;
        -: 2605:    return static_cast<Result>(0);
        -: 2606:  }
        -: 2607:#else
        -: 2608:  (void)location;
    #####: 2609:  return (object->*method)();
        -: 2610:#endif  // GTEST_HAS_SEH
        -: 2611:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2590:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2591:                                              const char* location) {
        -: 2592:#if GTEST_HAS_SEH
        -: 2593:  __try {
        -: 2594:    return (object->*method)();
        -: 2595:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2596:      GetExceptionCode())) {
        -: 2597:    // We create the exception message on the heap because VC++ prohibits
        -: 2598:    // creation of objects with destructors on stack in functions using __try
        -: 2599:    // (see error C2712).
        -: 2600:    std::string* exception_message =
        -: 2601:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2602:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2603:                                             *exception_message);
        -: 2604:    delete exception_message;
        -: 2605:    return static_cast<Result>(0);
        -: 2606:  }
        -: 2607:#else
        -: 2608:  (void)location;
    #####: 2609:  return (object->*method)();
    %%%%%: 2609-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2609-block  1
    %%%%%: 2609-block  2
    %%%%%: 2609-block  3
call    2 never executed
        -: 2610:#endif  // GTEST_HAS_SEH
        -: 2611:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2590:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2591:                                              const char* location) {
        -: 2592:#if GTEST_HAS_SEH
        -: 2593:  __try {
        -: 2594:    return (object->*method)();
        -: 2595:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2596:      GetExceptionCode())) {
        -: 2597:    // We create the exception message on the heap because VC++ prohibits
        -: 2598:    // creation of objects with destructors on stack in functions using __try
        -: 2599:    // (see error C2712).
        -: 2600:    std::string* exception_message =
        -: 2601:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2602:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2603:                                             *exception_message);
        -: 2604:    delete exception_message;
        -: 2605:    return static_cast<Result>(0);
        -: 2606:  }
        -: 2607:#else
        -: 2608:  (void)location;
    #####: 2609:  return (object->*method)();
    %%%%%: 2609-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2609-block  1
    %%%%%: 2609-block  2
    %%%%%: 2609-block  3
call    2 never executed
        -: 2610:#endif  // GTEST_HAS_SEH
        -: 2611:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2590:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2591:                                              const char* location) {
        -: 2592:#if GTEST_HAS_SEH
        -: 2593:  __try {
        -: 2594:    return (object->*method)();
        -: 2595:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2596:      GetExceptionCode())) {
        -: 2597:    // We create the exception message on the heap because VC++ prohibits
        -: 2598:    // creation of objects with destructors on stack in functions using __try
        -: 2599:    // (see error C2712).
        -: 2600:    std::string* exception_message =
        -: 2601:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2602:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2603:                                             *exception_message);
        -: 2604:    delete exception_message;
        -: 2605:    return static_cast<Result>(0);
        -: 2606:  }
        -: 2607:#else
        -: 2608:  (void)location;
    #####: 2609:  return (object->*method)();
    %%%%%: 2609-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2609-block  1
    %%%%%: 2609-block  2
    %%%%%: 2609-block  3
call    2 never executed
        -: 2610:#endif  // GTEST_HAS_SEH
        -: 2611:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2590:Result HandleSehExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2591:                                              const char* location) {
        -: 2592:#if GTEST_HAS_SEH
        -: 2593:  __try {
        -: 2594:    return (object->*method)();
        -: 2595:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2596:      GetExceptionCode())) {
        -: 2597:    // We create the exception message on the heap because VC++ prohibits
        -: 2598:    // creation of objects with destructors on stack in functions using __try
        -: 2599:    // (see error C2712).
        -: 2600:    std::string* exception_message =
        -: 2601:        FormatSehExceptionMessage(GetExceptionCode(), location);
        -: 2602:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2603:                                             *exception_message);
        -: 2604:    delete exception_message;
        -: 2605:    return static_cast<Result>(0);
        -: 2606:  }
        -: 2607:#else
        -: 2608:  (void)location;
    #####: 2609:  return (object->*method)();
    %%%%%: 2609-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2609-block  1
    %%%%%: 2609-block  2
    %%%%%: 2609-block  3
call    2 never executed
        -: 2610:#endif  // GTEST_HAS_SEH
        -: 2611:}
------------------
        -: 2612:
        -: 2613:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2614:// exceptions, if they are supported; returns the 0-value for type
        -: 2615:// Result in case of an SEH exception.
        -: 2616:template <class T, typename Result>
    #####: 2617:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2618:                                           const char* location) {
        -: 2619:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2620:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2621:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2622:  // after the exception is caught and either report or re-throw the
        -: 2623:  // exception based on the flag's value:
        -: 2624:  //
        -: 2625:  // try {
        -: 2626:  //   // Perform the test method.
        -: 2627:  // } catch (...) {
        -: 2628:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2629:  //     // Report the exception as failure.
        -: 2630:  //   else
        -: 2631:  //     throw;  // Re-throws the original exception.
        -: 2632:  // }
        -: 2633:  //
        -: 2634:  // However, the purpose of this flag is to allow the program to drop into
        -: 2635:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2636:  // control enters the catch block, the exception origin information is
        -: 2637:  // lost and the debugger will stop the program at the point of the
        -: 2638:  // re-throw in this function -- instead of at the point of the original
        -: 2639:  // throw statement in the code under test.  For this reason, we perform
        -: 2640:  // the check early, sacrificing the ability to affect Google Test's
        -: 2641:  // exception handling in the method where the exception is thrown.
    #####: 2642:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2643:#if GTEST_HAS_EXCEPTIONS
        -: 2644:    try {
    #####: 2645:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2646:    } catch (const AssertionException&) {  // NOLINT
        -: 2647:      // This failure was reported already.
    =====: 2648:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2649:      // This exception type can only be thrown by a failed Google
        -: 2650:      // Test assertion with the intention of letting another testing
        -: 2651:      // framework catch it.  Therefore we just re-throw it.
    =====: 2652:      throw;
    =====: 2653:    } catch (const std::exception& e) {  // NOLINT
    =====: 2654:      internal::ReportFailureInUnknownLocation(
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2657:    } catch (...) {  // NOLINT
    =====: 2658:      internal::ReportFailureInUnknownLocation(
        -: 2659:          TestPartResult::kFatalFailure,
        -: 2660:          FormatCxxExceptionMessage(nullptr, location));
        -: 2661:    }
    =====: 2662:    return static_cast<Result>(0);
        -: 2663:#else
        -: 2664:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2665:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2666:  } else {
    #####: 2667:    return (object->*method)();
        -: 2668:  }
        -: 2669:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2617:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2618:                                           const char* location) {
        -: 2619:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2620:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2621:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2622:  // after the exception is caught and either report or re-throw the
        -: 2623:  // exception based on the flag's value:
        -: 2624:  //
        -: 2625:  // try {
        -: 2626:  //   // Perform the test method.
        -: 2627:  // } catch (...) {
        -: 2628:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2629:  //     // Report the exception as failure.
        -: 2630:  //   else
        -: 2631:  //     throw;  // Re-throws the original exception.
        -: 2632:  // }
        -: 2633:  //
        -: 2634:  // However, the purpose of this flag is to allow the program to drop into
        -: 2635:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2636:  // control enters the catch block, the exception origin information is
        -: 2637:  // lost and the debugger will stop the program at the point of the
        -: 2638:  // re-throw in this function -- instead of at the point of the original
        -: 2639:  // throw statement in the code under test.  For this reason, we perform
        -: 2640:  // the check early, sacrificing the ability to affect Google Test's
        -: 2641:  // exception handling in the method where the exception is thrown.
    #####: 2642:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
    %%%%%: 2642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2643:#if GTEST_HAS_EXCEPTIONS
        -: 2644:    try {
    #####: 2645:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    %%%%%: 2645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2645-block  1
    =====: 2646:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2646-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2646-block  1
call    4 never executed
call    5 never executed
        -: 2647:      // This failure was reported already.
    =====: 2648:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2648-block  0
call    0 never executed
    $$$$$: 2648-block  1
call    1 never executed
        -: 2649:      // This exception type can only be thrown by a failed Google
        -: 2650:      // Test assertion with the intention of letting another testing
        -: 2651:      // framework catch it.  Therefore we just re-throw it.
    =====: 2652:      throw;
call    0 never executed
    =====: 2653:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2653-block  0
call    0 never executed
    $$$$$: 2653-block  1
call    1 never executed
    =====: 2654:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2654-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2654-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2654-block  2
call    8 never executed
    $$$$$: 2654-block  3
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2657:    } catch (...) {  // NOLINT
    $$$$$: 2657-block  0
call    0 never executed
    $$$$$: 2657-block  1
call    1 never executed
    =====: 2658:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2658-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2658-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2658-block  2
call    8 never executed
    $$$$$: 2658-block  3
        -: 2659:          TestPartResult::kFatalFailure,
        -: 2660:          FormatCxxExceptionMessage(nullptr, location));
        -: 2661:    }
    =====: 2662:    return static_cast<Result>(0);
    $$$$$: 2662-block  0
        -: 2663:#else
        -: 2664:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2665:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2666:  } else {
    #####: 2667:    return (object->*method)();
    %%%%%: 2667-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2667-block  1
    %%%%%: 2667-block  2
    %%%%%: 2667-block  3
call    2 never executed
        -: 2668:  }
        -: 2669:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2617:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2618:                                           const char* location) {
        -: 2619:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2620:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2621:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2622:  // after the exception is caught and either report or re-throw the
        -: 2623:  // exception based on the flag's value:
        -: 2624:  //
        -: 2625:  // try {
        -: 2626:  //   // Perform the test method.
        -: 2627:  // } catch (...) {
        -: 2628:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2629:  //     // Report the exception as failure.
        -: 2630:  //   else
        -: 2631:  //     throw;  // Re-throws the original exception.
        -: 2632:  // }
        -: 2633:  //
        -: 2634:  // However, the purpose of this flag is to allow the program to drop into
        -: 2635:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2636:  // control enters the catch block, the exception origin information is
        -: 2637:  // lost and the debugger will stop the program at the point of the
        -: 2638:  // re-throw in this function -- instead of at the point of the original
        -: 2639:  // throw statement in the code under test.  For this reason, we perform
        -: 2640:  // the check early, sacrificing the ability to affect Google Test's
        -: 2641:  // exception handling in the method where the exception is thrown.
    #####: 2642:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
    %%%%%: 2642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2643:#if GTEST_HAS_EXCEPTIONS
        -: 2644:    try {
    #####: 2645:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    %%%%%: 2645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2645-block  1
    =====: 2646:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2646-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2646-block  1
call    4 never executed
call    5 never executed
        -: 2647:      // This failure was reported already.
    =====: 2648:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2648-block  0
call    0 never executed
    $$$$$: 2648-block  1
call    1 never executed
        -: 2649:      // This exception type can only be thrown by a failed Google
        -: 2650:      // Test assertion with the intention of letting another testing
        -: 2651:      // framework catch it.  Therefore we just re-throw it.
    =====: 2652:      throw;
call    0 never executed
    =====: 2653:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2653-block  0
call    0 never executed
    $$$$$: 2653-block  1
call    1 never executed
    =====: 2654:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2654-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2654-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2654-block  2
call    8 never executed
    $$$$$: 2654-block  3
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2657:    } catch (...) {  // NOLINT
    $$$$$: 2657-block  0
call    0 never executed
    $$$$$: 2657-block  1
call    1 never executed
    =====: 2658:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2658-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2658-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2658-block  2
call    8 never executed
    $$$$$: 2658-block  3
        -: 2659:          TestPartResult::kFatalFailure,
        -: 2660:          FormatCxxExceptionMessage(nullptr, location));
        -: 2661:    }
    =====: 2662:    return static_cast<Result>(0);
    $$$$$: 2662-block  0
        -: 2663:#else
        -: 2664:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2665:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2666:  } else {
    #####: 2667:    return (object->*method)();
    %%%%%: 2667-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2667-block  1
    %%%%%: 2667-block  2
    %%%%%: 2667-block  3
call    2 never executed
        -: 2668:  }
        -: 2669:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2617:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2618:                                           const char* location) {
        -: 2619:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2620:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2621:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2622:  // after the exception is caught and either report or re-throw the
        -: 2623:  // exception based on the flag's value:
        -: 2624:  //
        -: 2625:  // try {
        -: 2626:  //   // Perform the test method.
        -: 2627:  // } catch (...) {
        -: 2628:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2629:  //     // Report the exception as failure.
        -: 2630:  //   else
        -: 2631:  //     throw;  // Re-throws the original exception.
        -: 2632:  // }
        -: 2633:  //
        -: 2634:  // However, the purpose of this flag is to allow the program to drop into
        -: 2635:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2636:  // control enters the catch block, the exception origin information is
        -: 2637:  // lost and the debugger will stop the program at the point of the
        -: 2638:  // re-throw in this function -- instead of at the point of the original
        -: 2639:  // throw statement in the code under test.  For this reason, we perform
        -: 2640:  // the check early, sacrificing the ability to affect Google Test's
        -: 2641:  // exception handling in the method where the exception is thrown.
    #####: 2642:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
    %%%%%: 2642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2643:#if GTEST_HAS_EXCEPTIONS
        -: 2644:    try {
    #####: 2645:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    %%%%%: 2645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2645-block  1
    =====: 2646:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2646-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2646-block  1
call    4 never executed
call    5 never executed
        -: 2647:      // This failure was reported already.
    =====: 2648:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2648-block  0
call    0 never executed
    $$$$$: 2648-block  1
call    1 never executed
        -: 2649:      // This exception type can only be thrown by a failed Google
        -: 2650:      // Test assertion with the intention of letting another testing
        -: 2651:      // framework catch it.  Therefore we just re-throw it.
    =====: 2652:      throw;
call    0 never executed
    =====: 2653:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2653-block  0
call    0 never executed
    $$$$$: 2653-block  1
call    1 never executed
    =====: 2654:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2654-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2654-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2654-block  2
call    8 never executed
    $$$$$: 2654-block  3
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2657:    } catch (...) {  // NOLINT
    $$$$$: 2657-block  0
call    0 never executed
    $$$$$: 2657-block  1
call    1 never executed
    =====: 2658:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2658-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2658-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2658-block  2
call    8 never executed
    $$$$$: 2658-block  3
        -: 2659:          TestPartResult::kFatalFailure,
        -: 2660:          FormatCxxExceptionMessage(nullptr, location));
        -: 2661:    }
    =====: 2662:    return static_cast<Result>(0);
    $$$$$: 2662-block  0
        -: 2663:#else
        -: 2664:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2665:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2666:  } else {
    #####: 2667:    return (object->*method)();
    %%%%%: 2667-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2667-block  1
    %%%%%: 2667-block  2
    %%%%%: 2667-block  3
call    2 never executed
        -: 2668:  }
        -: 2669:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 0 returned 0% blocks executed 0%
    #####: 2617:Result HandleExceptionsInMethodIfSupported(T* object, Result (T::*method)(),
        -: 2618:                                           const char* location) {
        -: 2619:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2620:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2621:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2622:  // after the exception is caught and either report or re-throw the
        -: 2623:  // exception based on the flag's value:
        -: 2624:  //
        -: 2625:  // try {
        -: 2626:  //   // Perform the test method.
        -: 2627:  // } catch (...) {
        -: 2628:  //   if (GTEST_FLAG_GET(catch_exceptions))
        -: 2629:  //     // Report the exception as failure.
        -: 2630:  //   else
        -: 2631:  //     throw;  // Re-throws the original exception.
        -: 2632:  // }
        -: 2633:  //
        -: 2634:  // However, the purpose of this flag is to allow the program to drop into
        -: 2635:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2636:  // control enters the catch block, the exception origin information is
        -: 2637:  // lost and the debugger will stop the program at the point of the
        -: 2638:  // re-throw in this function -- instead of at the point of the original
        -: 2639:  // throw statement in the code under test.  For this reason, we perform
        -: 2640:  // the check early, sacrificing the ability to affect Google Test's
        -: 2641:  // exception handling in the method where the exception is thrown.
    #####: 2642:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
    %%%%%: 2642-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 2643:#if GTEST_HAS_EXCEPTIONS
        -: 2644:    try {
    #####: 2645:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    %%%%%: 2645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2645-block  1
    =====: 2646:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2646-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 2646-block  1
call    4 never executed
call    5 never executed
        -: 2647:      // This failure was reported already.
    =====: 2648:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2648-block  0
call    0 never executed
    $$$$$: 2648-block  1
call    1 never executed
        -: 2649:      // This exception type can only be thrown by a failed Google
        -: 2650:      // Test assertion with the intention of letting another testing
        -: 2651:      // framework catch it.  Therefore we just re-throw it.
    =====: 2652:      throw;
call    0 never executed
    =====: 2653:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2653-block  0
call    0 never executed
    $$$$$: 2653-block  1
call    1 never executed
    =====: 2654:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2654-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2654-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2654-block  2
call    8 never executed
    $$$$$: 2654-block  3
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2657:    } catch (...) {  // NOLINT
    $$$$$: 2657-block  0
call    0 never executed
    $$$$$: 2657-block  1
call    1 never executed
    =====: 2658:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 2658-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 2658-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2658-block  2
call    8 never executed
    $$$$$: 2658-block  3
        -: 2659:          TestPartResult::kFatalFailure,
        -: 2660:          FormatCxxExceptionMessage(nullptr, location));
        -: 2661:    }
    =====: 2662:    return static_cast<Result>(0);
    $$$$$: 2662-block  0
        -: 2663:#else
        -: 2664:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2665:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2666:  } else {
    #####: 2667:    return (object->*method)();
    %%%%%: 2667-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2667-block  1
    %%%%%: 2667-block  2
    %%%%%: 2667-block  3
call    2 never executed
        -: 2668:  }
        -: 2669:}
------------------
        -: 2670:
        -: 2671:}  // namespace internal
        -: 2672:
        -: 2673:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 0 returned 0% blocks executed 0%
    #####: 2674:void Test::Run() {
    #####: 2675:  if (!HasSameFixtureClass()) return;
    %%%%%: 2675-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2675-block  1
        -: 2676:
    #####: 2677:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2677-block  0
call    0 never executed
    #####: 2678:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 never executed
call    1 never executed
    #####: 2679:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 never executed
        -: 2680:  // We will run the test only if SetUp() was successful and didn't call
        -: 2681:  // GTEST_SKIP().
    #####: 2682:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 2682-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 2682-block  1
    %%%%%: 2682-block  2
    %%%%%: 2682-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 2683:    impl->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 2683-block  0
call    0 never executed
call    1 never executed
    #####: 2684:    internal::HandleExceptionsInMethodIfSupported(this, &Test::TestBody,
call    0 never executed
        -: 2685:                                                  "the test body");
        -: 2686:  }
        -: 2687:
        -: 2688:  // However, we want to clean up as much as possible.  Hence we will
        -: 2689:  // always call TearDown(), even if SetUp() or the test body has
        -: 2690:  // failed.
    #####: 2691:  impl->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 2691-block  0
call    0 never executed
call    1 never executed
    #####: 2692:  internal::HandleExceptionsInMethodIfSupported(this, &Test::TearDown,
call    0 never executed
        -: 2693:                                                "TearDown()");
        -: 2694:}
        -: 2695:
        -: 2696:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2697:bool Test::HasFatalFailure() {
    #####: 2698:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
    %%%%%: 2698-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2699:}
        -: 2700:
        -: 2701:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2702:bool Test::HasNonfatalFailure() {
        -: 2703:  return internal::GetUnitTestImpl()
        -: 2704:      ->current_test_result()
    #####: 2705:      ->HasNonfatalFailure();
    %%%%%: 2705-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2706:}
        -: 2707:
        -: 2708:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 0 returned 0% blocks executed 0%
    #####: 2709:bool Test::IsSkipped() {
    #####: 2710:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
    %%%%%: 2710-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2711:}
        -: 2712:
        -: 2713:// class TestInfo
        -: 2714:
        -: 2715:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2716:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 4 returned 100% blocks executed 30%
        4: 2717:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2718:                   const std::string& a_name, const char* a_type_param,
        -: 2719:                   const char* a_value_param,
        -: 2720:                   internal::CodeLocation a_code_location,
        -: 2721:                   internal::TypeId fixture_class_id,
        4: 2722:                   internal::TestFactoryBase* factory)
        4: 2723:    : test_suite_name_(a_test_suite_name),
        4: 2723-block  0
call    0 returned 4
        -: 2724:      // begin()/end() is MSVC 17.3.3 ASAN crash workaround (GitHub issue #3997)
        8: 2725:      name_(a_name.begin(), a_name.end()),
        4: 2725-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 2725-block  1
       4*: 2726:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2726-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2726-block  1
    %%%%%: 2726-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2726-block  3
        4: 2726-block  4
        4: 2726-block  5
call    8 returned 4
branch  9 taken 0 (fallthrough)
branch 10 taken 4
    $$$$$: 2726-block  6
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2726-block  7
    $$$$$: 2726-block  8
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2726-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2726-block 10
call   17 never executed
       4*: 2727:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
        4: 2727-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2727-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2727-block  2
    %%%%%: 2727-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2727-block  4
        4: 2727-block  5
        4: 2727-block  6
call    8 returned 4
branch  9 taken 0 (fallthrough)
branch 10 taken 4
    $$$$$: 2727-block  7
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2727-block  8
    $$$$$: 2727-block  9
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2727-block 10
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2727-block 11
call   17 never executed
        4: 2728:      location_(a_code_location),
        4: 2728-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 2729:      fixture_class_id_(fixture_class_id),
        4: 2730:      should_run_(false),
        4: 2731:      is_disabled_(false),
        4: 2732:      matches_filter_(false),
        4: 2733:      is_in_another_shard_(false),
        4: 2734:      factory_(factory),
        4: 2735:      result_() {}
        4: 2735-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 2735-block  1
    $$$$$: 2735-block  2
call    3 never executed
    $$$$$: 2735-block  3
call    4 never executed
    $$$$$: 2735-block  4
call    5 never executed
    $$$$$: 2735-block  5
call    6 never executed
    $$$$$: 2735-block  6
call    7 never executed
        -: 2736:
        -: 2737:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 0 returned 0% blocks executed 0%
    #####: 2738:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2738-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2738-block  1
call    2 never executed
    %%%%%: 2738-block  2
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
        -: 2739:
        -: 2740:namespace internal {
        -: 2741:
        -: 2742:// Creates a new TestInfo object and registers it with Google Test;
        -: 2743:// returns the created object.
        -: 2744://
        -: 2745:// Arguments:
        -: 2746://
        -: 2747://   test_suite_name:  name of the test suite
        -: 2748://   name:             name of the test
        -: 2749://   type_param:       the name of the test's type parameter, or NULL if
        -: 2750://                     this is not a typed or a type-parameterized test.
        -: 2751://   value_param:      text representation of the test's value parameter,
        -: 2752://                     or NULL if this is not a value-parameterized test.
        -: 2753://   code_location:    code location where the test is defined
        -: 2754://   fixture_class_id: ID of the test fixture class
        -: 2755://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2756://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2757://   factory:          pointer to the factory that creates a test object.
        -: 2758://                     The newly created TestInfo instance will assume
        -: 2759://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 4 returned 100% blocks executed 53%
        4: 2760:TestInfo* MakeAndRegisterTestInfo(
        -: 2761:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2762:    const char* value_param, CodeLocation code_location,
        -: 2763:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2764:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2765:  TestInfo* const test_info =
        -: 2766:      new TestInfo(test_suite_name, name, type_param, value_param,
       20: 2767:                   code_location, fixture_class_id, factory);
        4: 2767-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 2767-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 2767-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4: 2767-block  3
call   10 returned 4
branch 11 taken 4 (fallthrough)
branch 12 taken 0 (throw)
        4: 2767-block  4
call   13 returned 4
call   14 returned 4
call   15 returned 4
    $$$$$: 2767-block  5
call   16 never executed
    $$$$$: 2767-block  6
    $$$$$: 2767-block  7
    $$$$$: 2767-block  8
call   17 never executed
    $$$$$: 2767-block  9
    $$$$$: 2767-block 10
    $$$$$: 2767-block 11
call   18 never executed
    $$$$$: 2767-block 12
    $$$$$: 2767-block 13
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$: 2767-block 14
call   21 never executed
        4: 2768:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 4
call    1 returned 4
        4: 2769:  return test_info;
        4: 2769-block  0
        -: 2770:}
        -: 2771:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2772:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2773:                                CodeLocation code_location) {
    #####: 2774:  Message errors;
    %%%%%: 2774-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2775:  errors
    #####: 2776:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2776-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2776-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2776-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2777:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2777-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2778:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2778-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2778-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2778-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 2779:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2779-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2780:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2780-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2781:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2781-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2782:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2782-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2783:      << "test suites.";
    %%%%%: 2783-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2784:
    #####: 2785:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2785-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2785-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
    $$$$$: 2785-block  2
call    9 never executed
    $$$$$: 2785-block  3
    $$$$$: 2785-block  4
call   10 never executed
    $$$$$: 2785-block  5
        -: 2786:                                          code_location.line)
    #####: 2787:                    << " " << errors.GetString();
    %%%%%: 2787-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2787-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 2787-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 2787-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 2787-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2787-block  5
call   14 never executed
    $$$$$: 2787-block  6
    #####: 2788:}
call    0 never executed
    $$$$$: 2788-block  0
call    1 never executed
        -: 2789:}  // namespace internal
        -: 2790:
        -: 2791:namespace {
        -: 2792:
        -: 2793:// A predicate that checks the test name of a TestInfo against a known
        -: 2794:// value.
        -: 2795://
        -: 2796:// This is used for implementation of the TestSuite class only.  We put
        -: 2797:// it in the anonymous namespace to prevent polluting the outer
        -: 2798:// namespace.
        -: 2799://
        -: 2800:// TestNameIs is copyable.
        -: 2801:class TestNameIs {
        -: 2802: public:
        -: 2803:  // Constructor.
        -: 2804:  //
        -: 2805:  // TestNameIs has NO default constructor.
        -: 2806:  explicit TestNameIs(const char* name) : name_(name) {}
        -: 2807:
        -: 2808:  // Returns true if and only if the test name of test_info matches name_.
        -: 2809:  bool operator()(const TestInfo* test_info) const {
        -: 2810:    return test_info && test_info->name() == name_;
        -: 2811:  }
        -: 2812:
        -: 2813: private:
        -: 2814:  std::string name_;
        -: 2815:};
        -: 2816:
        -: 2817:}  // namespace
        -: 2818:
        -: 2819:namespace internal {
        -: 2820:
        -: 2821:// This method expands all parameterized tests registered with macros TEST_P
        -: 2822:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2823:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 0 returned 0% blocks executed 0%
    #####: 2824:void UnitTestImpl::RegisterParameterizedTests() {
    #####: 2825:  if (!parameterized_tests_registered_) {
    %%%%%: 2825-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2826:    parameterized_test_registry_.RegisterTests();
    %%%%%: 2826-block  0
call    0 never executed
    #####: 2827:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 never executed
    #####: 2828:    parameterized_tests_registered_ = true;
        -: 2829:  }
    #####: 2830:}
        -: 2831:
        -: 2832:}  // namespace internal
        -: 2833:
        -: 2834:// Creates the test object, runs it, records its result, and then
        -: 2835:// deletes it.
function _ZN7testing8TestInfo3RunEv called 0 returned 0% blocks executed 0%
    #####: 2836:void TestInfo::Run() {
    #####: 2837:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
    %%%%%: 2837-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2837-block  1
call    3 never executed
call    4 never executed
    #####: 2838:  if (!should_run_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 2839:    if (is_disabled_ && matches_filter_) repeater->OnTestDisabled(*this);
    %%%%%: 2839-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2839-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 2839-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    #####: 2840:    return;
    %%%%%: 2840-block  0
        -: 2841:  }
        -: 2842:
        -: 2843:  // Tells UnitTest where to store test result.
    #####: 2844:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2844-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2845:  impl->set_current_test_info(this);
    %%%%%: 2845-block  0
call    0 never executed
        -: 2846:
        -: 2847:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2848:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2849:  result_.set_start_timestamp(internal::GetTimeInMillis());
    %%%%%: 2849-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2849-block  1
call    3 never executed
    #####: 2850:  internal::Timer timer;
call    0 never executed
    #####: 2851:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2851-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2852:
        -: 2853:  // Creates the test object.
    #####: 2854:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
    #####: 2855:      factory_, &internal::TestFactoryBase::CreateTest,
    %%%%%: 2855-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2856:      "the test fixture's constructor");
        -: 2857:
        -: 2858:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2859:  // GTEST_SKIP().
        -: 2860:  // Note that the object will not be null
    #####: 2861:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
    %%%%%: 2861-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2861-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 2861-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2861-block  3
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 2861-block  4
    %%%%%: 2861-block  5
    %%%%%: 2861-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
        -: 2862:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2863:    // exception handling code.
    #####: 2864:    test->Run();
    %%%%%: 2864-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2865:  }
        -: 2866:
    #####: 2867:  if (test != nullptr) {
    %%%%%: 2867-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 2868:    // Deletes the test object.
    #####: 2869:    impl->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 2869-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2869-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 2870:    internal::HandleExceptionsInMethodIfSupported(
    %%%%%: 2870-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2871:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2872:  }
        -: 2873:
    #####: 2874:  result_.set_elapsed_time(timer.Elapsed());
    %%%%%: 2874-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2874-block  1
call    3 never executed
        -: 2875:
        -: 2876:  // Notifies the unit test event listener that a test has just finished.
    #####: 2877:  repeater->OnTestEnd(*this);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2878:
        -: 2879:  // Tells UnitTest to stop associating assertion results to this
        -: 2880:  // test.
    #####: 2881:  impl->set_current_test_info(nullptr);
    %%%%%: 2881-block  0
call    0 never executed
        -: 2882:}
        -: 2883:
        -: 2884:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2885:void TestInfo::Skip() {
    #####: 2886:  if (!should_run_) return;
    %%%%%: 2886-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2886-block  1
    %%%%%: 2886-block  2
        -: 2887:
    #####: 2888:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2888-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2889:  impl->set_current_test_info(this);
    %%%%%: 2889-block  0
call    0 never executed
        -: 2890:
    #####: 2891:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2891-block  0
call    3 never executed
call    4 never executed
        -: 2892:
        -: 2893:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2894:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 2895:
        -: 2896:  const TestPartResult test_part_result =
    #####: 2897:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2897-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 2898:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2898-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 2898-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 2899:      test_part_result);
        -: 2900:
        -: 2901:  // Notifies the unit test event listener that a test has just finished.
    #####: 2902:  repeater->OnTestEnd(*this);
    %%%%%: 2902-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 2903:  impl->set_current_test_info(nullptr);
    %%%%%: 2903-block  0
call    0 never executed
    #####: 2904:}
call    0 never executed
    $$$$$: 2904-block  0
call    1 never executed
        -: 2905:
        -: 2906:// class TestSuite
        -: 2907:
        -: 2908:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2909:int TestSuite::successful_test_count() const {
    #####: 2910:  return CountIf(test_info_list_, TestPassed);
    %%%%%: 2910-block  0
call    0 never executed
        -: 2911:}
        -: 2912:
        -: 2913:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2914:int TestSuite::skipped_test_count() const {
    #####: 2915:  return CountIf(test_info_list_, TestSkipped);
    %%%%%: 2915-block  0
call    0 never executed
        -: 2916:}
        -: 2917:
        -: 2918:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2919:int TestSuite::failed_test_count() const {
    #####: 2920:  return CountIf(test_info_list_, TestFailed);
    %%%%%: 2920-block  0
call    0 never executed
        -: 2921:}
        -: 2922:
        -: 2923:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2924:int TestSuite::reportable_disabled_test_count() const {
    #####: 2925:  return CountIf(test_info_list_, TestReportableDisabled);
    %%%%%: 2925-block  0
call    0 never executed
        -: 2926:}
        -: 2927:
        -: 2928:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2929:int TestSuite::disabled_test_count() const {
    #####: 2930:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2930-block  0
call    0 never executed
        -: 2931:}
        -: 2932:
        -: 2933:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2934:int TestSuite::reportable_test_count() const {
    #####: 2935:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2935-block  0
call    0 never executed
        -: 2936:}
        -: 2937:
        -: 2938:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 2939:int TestSuite::test_to_run_count() const {
    #####: 2940:  return CountIf(test_info_list_, ShouldRunTest);
    %%%%%: 2940-block  0
call    0 never executed
        -: 2941:}
        -: 2942:
        -: 2943:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2944:int TestSuite::total_test_count() const {
    #####: 2945:  return static_cast<int>(test_info_list_.size());
    %%%%%: 2945-block  0
call    0 never executed
        -: 2946:}
        -: 2947:
        -: 2948:// Creates a TestSuite with the given name.
        -: 2949://
        -: 2950:// Arguments:
        -: 2951://
        -: 2952://   a_name:       name of the test suite
        -: 2953://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2954://                 this is not a typed or a type-parameterized test suite.
        -: 2955://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2956://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 4 returned 100% blocks executed 33%
        4: 2957:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2958:                     internal::SetUpTestSuiteFunc set_up_tc,
        4: 2959:                     internal::TearDownTestSuiteFunc tear_down_tc)
        4: 2960:    : name_(a_name),
        4: 2960-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 2960-block  1
call    3 never executed
       4*: 2961:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2961-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 2961-block  1
    %%%%%: 2961-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 2961-block  3
        4: 2961-block  4
        4: 2961-block  5
call    8 returned 4
branch  9 taken 0 (fallthrough)
branch 10 taken 4
    $$$$$: 2961-block  6
branch 11 never executed (fallthrough)
branch 12 never executed
    $$$$$: 2961-block  7
    $$$$$: 2961-block  8
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 2961-block  9
branch 15 never executed (fallthrough)
branch 16 never executed
    $$$$$: 2961-block 10
call   17 never executed
        4: 2962:      set_up_tc_(set_up_tc),
        4: 2963:      tear_down_tc_(tear_down_tc),
        4: 2964:      should_run_(false),
        4: 2965:      start_timestamp_(0),
        8: 2966:      elapsed_time_(0) {}
        4: 2966-block  0
        4: 2966-block  1
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4: 2966-block  2
    $$$$$: 2966-block  3
call    5 never executed
    $$$$$: 2966-block  4
call    6 never executed
    $$$$$: 2966-block  5
call    7 never executed
    $$$$$: 2966-block  6
call    8 never executed
        -: 2967:
        -: 2968:// Destructor of TestSuite.
    #####: 2969:TestSuite::~TestSuite() {
        -: 2970:  // Deletes every Test in the collection.
    #####: 2971:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2972:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 0 returned 0% blocks executed 0%
    #####: 2969:TestSuite::~TestSuite() {
        -: 2970:  // Deletes every Test in the collection.
        -: 2971:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2972:}
    %%%%%: 2972-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 0 returned 0% blocks executed 0%
    #####: 2969:TestSuite::~TestSuite() {
        -: 2970:  // Deletes every Test in the collection.
    #####: 2971:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2971-block  0
call    0 never executed
    #####: 2972:}
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
------------------
        -: 2973:
        -: 2974:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2975:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2976:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2977:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2977-block  0
call    0 never executed
    #####: 2978:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2978-block  0
call    2 never executed
    %%%%%: 2978-block  1
    %%%%%: 2978-block  2
        -: 2979:}
        -: 2980:
        -: 2981:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2982:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2983:TestInfo* TestSuite::GetMutableTestInfo(int i) {
    #####: 2984:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2984-block  0
call    0 never executed
    #####: 2985:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2985-block  0
call    2 never executed
    %%%%%: 2985-block  1
    %%%%%: 2985-block  2
        -: 2986:}
        -: 2987:
        -: 2988:// Adds a test to this test suite.  Will delete the test upon
        -: 2989:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 4 returned 100% blocks executed 100%
        4: 2990:void TestSuite::AddTestInfo(TestInfo* test_info) {
        4: 2991:  test_info_list_.push_back(test_info);
        4: 2991-block  0
call    0 returned 4
        4: 2992:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 2993:}
        4: 2993-block  0
        -: 2994:
        -: 2995:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 0 returned 0% blocks executed 0%
    #####: 2996:void TestSuite::Run() {
    #####: 2997:  if (!should_run_) return;
    %%%%%: 2997-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 2997-block  1
    %%%%%: 2997-block  2
        -: 2998:
    #####: 2999:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2999-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3000:  impl->set_current_test_suite(this);
    %%%%%: 3000-block  0
call    0 never executed
        -: 3001:
    #####: 3002:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3002-block  0
call    3 never executed
call    4 never executed
        -: 3003:
        -: 3004:  // Call both legacy and the new API
    #####: 3005:  repeater->OnTestSuiteStart(*this);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3006://  Legacy API is deprecated but still available
        -: 3007:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3008:  repeater->OnTestCaseStart(*this);
    %%%%%: 3008-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3009:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3010:
    #####: 3011:  impl->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 3011-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3011-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3012:  internal::HandleExceptionsInMethodIfSupported(
    %%%%%: 3012-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3013:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3014:
    #####: 3015:  const bool skip_all = ad_hoc_test_result().Failed();
    %%%%%: 3015-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3016:
    #####: 3017:  start_timestamp_ = internal::GetTimeInMillis();
    %%%%%: 3017-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3018:  internal::Timer timer;
    %%%%%: 3018-block  0
call    0 never executed
    #####: 3019:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3019-block  0
    %%%%%: 3019-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3020:    if (skip_all) {
    %%%%%: 3020-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3021:      GetMutableTestInfo(i)->Skip();
    %%%%%: 3021-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3021-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3022:    } else {
    #####: 3023:      GetMutableTestInfo(i)->Run();
    %%%%%: 3023-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3023-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3024:    }
    #####: 3025:    if (GTEST_FLAG_GET(fail_fast) &&
    %%%%%: 3025-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3025-block  1
    %%%%%: 3025-block  2
    %%%%%: 3025-block  3
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3026:        GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3026-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3026-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3026-block  2
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3027:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3027-block  0
    %%%%%: 3027-block  1
    %%%%%: 3027-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3028:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3028-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3028-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3029:      }
    #####: 3030:      break;
    %%%%%: 3030-block  0
        -: 3031:    }
        -: 3032:  }
    #####: 3033:  elapsed_time_ = timer.Elapsed();
    %%%%%: 3033-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3034:
    #####: 3035:  impl->os_stack_trace_getter()->UponLeavingGTest();
    %%%%%: 3035-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3035-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3036:  internal::HandleExceptionsInMethodIfSupported(
    %%%%%: 3036-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3037:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3038:
        -: 3039:  // Call both legacy and the new API
    #####: 3040:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3040-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3041://  Legacy API is deprecated but still available
        -: 3042:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3043:  repeater->OnTestCaseEnd(*this);
    %%%%%: 3043-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3044:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3045:
    #####: 3046:  impl->set_current_test_suite(nullptr);
    %%%%%: 3046-block  0
call    0 never executed
        -: 3047:}
        -: 3048:
        -: 3049:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3050:void TestSuite::Skip() {
    #####: 3051:  if (!should_run_) return;
    %%%%%: 3051-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3051-block  1
        -: 3052:
    #####: 3053:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3053-block  0
call    0 never executed
    #####: 3054:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3055:
    #####: 3056:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3057:
        -: 3058:  // Call both legacy and the new API
    #####: 3059:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3060://  Legacy API is deprecated but still available
        -: 3061:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3062:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3063:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3064:
    #####: 3065:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3065-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3066:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3066-block  0
call    0 never executed
call    1 never executed
        -: 3067:  }
        -: 3068:
        -: 3069:  // Call both legacy and the new API
    #####: 3070:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3070-block  0
call    0 never executed
        -: 3071:  // Legacy API is deprecated but still available
        -: 3072:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3073:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3074:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3075:
    #####: 3076:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3077:}
        -: 3078:
        -: 3079:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 0 returned 0% blocks executed 0%
    #####: 3080:void TestSuite::ClearResult() {
    #####: 3081:  ad_hoc_test_result_.Clear();
    %%%%%: 3081-block  0
call    0 never executed
    #####: 3082:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 never executed
    #####: 3083:}
        -: 3084:
        -: 3085:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3086:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3087:  Shuffle(random, &test_indices_);
    %%%%%: 3087-block  0
call    0 never executed
    #####: 3088:}
        -: 3089:
        -: 3090:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 3091:void TestSuite::UnshuffleTests() {
    #####: 3092:  for (size_t i = 0; i < test_indices_.size(); i++) {
    %%%%%: 3092-block  0
    %%%%%: 3092-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3093:    test_indices_[i] = static_cast<int>(i);
    %%%%%: 3093-block  0
call    0 never executed
        -: 3094:  }
    #####: 3095:}
        -: 3096:
        -: 3097:// Formats a countable noun.  Depending on its quantity, either the
        -: 3098:// singular form or the plural form is used. e.g.
        -: 3099://
        -: 3100:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3101:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 0 returned 0% blocks executed 0%
    #####: 3102:static std::string FormatCountableNoun(int count, const char* singular_form,
        -: 3103:                                       const char* plural_form) {
    #####: 3104:  return internal::StreamableToString(count) + " " +
    %%%%%: 3104-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3104-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3104-block  2
call    6 never executed
call    7 never executed
    $$$$$: 3104-block  3
call    8 never executed
    $$$$$: 3104-block  4
call    9 never executed
    $$$$$: 3104-block  5
    #####: 3105:         (count == 1 ? singular_form : plural_form);
    %%%%%: 3105-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3105-block  1
    %%%%%: 3105-block  2
    %%%%%: 3105-block  3
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3105-block  4
        -: 3106:}
        -: 3107:
        -: 3108:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 0 returned 0% blocks executed 0%
    #####: 3109:static std::string FormatTestCount(int test_count) {
    #####: 3110:  return FormatCountableNoun(test_count, "test", "tests");
    %%%%%: 3110-block  0
call    0 never executed
        -: 3111:}
        -: 3112:
        -: 3113:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 0 returned 0% blocks executed 0%
    #####: 3114:static std::string FormatTestSuiteCount(int test_suite_count) {
    #####: 3115:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
    %%%%%: 3115-block  0
call    0 never executed
        -: 3116:}
        -: 3117:
        -: 3118:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3119:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3120:// to "Failure", as the user usually doesn't care about the difference
        -: 3121:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3122:static const char* TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3123:  switch (type) {
    %%%%%: 3123-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3124:    case TestPartResult::kSkip:
    #####: 3125:      return "Skipped\n";
    %%%%%: 3125-block  0
    #####: 3126:    case TestPartResult::kSuccess:
    #####: 3127:      return "Success";
    %%%%%: 3127-block  0
        -: 3128:
    #####: 3129:    case TestPartResult::kNonFatalFailure:
        -: 3130:    case TestPartResult::kFatalFailure:
        -: 3131:#ifdef _MSC_VER
        -: 3132:      return "error: ";
        -: 3133:#else
    #####: 3134:      return "Failure\n";
    %%%%%: 3134-block  0
        -: 3135:#endif
    #####: 3136:    default:
    #####: 3137:      return "Unknown result type";
    %%%%%: 3137-block  0
        -: 3138:  }
        -: 3139:}
        -: 3140:
        -: 3141:namespace internal {
        -: 3142:namespace {
        -: 3143:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3144:}  // namespace
        -: 3145:
        -: 3146:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3147:static std::string PrintTestPartResultToString(
        -: 3148:    const TestPartResult& test_part_result) {
    #####: 3149:  return (Message() << internal::FormatFileLocation(
    %%%%%: 3149-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3149-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
    $$$$$: 3149-block  2
call    9 never executed
    $$$$$: 3149-block  3
    $$$$$: 3149-block  4
call   10 never executed
        -: 3150:                           test_part_result.file_name(),
    #####: 3151:                           test_part_result.line_number())
    %%%%%: 3151-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3152:                    << " "
    %%%%%: 3152-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3153:                    << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3153-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 3153-block  1
    #####: 3154:                    << test_part_result.message())
    %%%%%: 3154-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3154-block  1
call    4 never executed
    $$$$$: 3154-block  2
    #####: 3155:      .GetString();
    %%%%%: 3155-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3155-block  1
        -: 3156:}
        -: 3157:
        -: 3158:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3159:static void PrintTestPartResult(const TestPartResult& test_part_result) {
    #####: 3160:  const std::string& result = PrintTestPartResultToString(test_part_result);
    %%%%%: 3160-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3161:  printf("%s\n", result.c_str());
    %%%%%: 3161-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3162:  fflush(stdout);
    %%%%%: 3162-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3162-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 3163:  // If the test program runs in Visual Studio or a debugger, the
        -: 3164:  // following statements add the test part result message to the Output
        -: 3165:  // window such that the user can double-click on it to jump to the
        -: 3166:  // corresponding source code location; otherwise they do nothing.
        -: 3167:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3168:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3169:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3170:  // want the same message printed twice.
    #####: 3171:  ::OutputDebugStringA(result.c_str());
    %%%%%: 3171-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3172:  ::OutputDebugStringA("\n");
    %%%%%: 3172-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3173:#endif
    #####: 3174:}
    %%%%%: 3174-block  0
call    0 never executed
    $$$$$: 3174-block  1
call    1 never executed
        -: 3175:
        -: 3176:// class PrettyUnitTestResultPrinter
        -: 3177:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3178:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3179:
        -: 3180:// Returns the character attribute for the given color.
        -: 3181:static WORD GetColorAttribute(GTestColor color) {
        -: 3182:  switch (color) {
        -: 3183:    case GTestColor::kRed:
        -: 3184:      return FOREGROUND_RED;
        -: 3185:    case GTestColor::kGreen:
        -: 3186:      return FOREGROUND_GREEN;
        -: 3187:    case GTestColor::kYellow:
        -: 3188:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3189:    default:
        -: 3190:      return 0;
        -: 3191:  }
        -: 3192:}
        -: 3193:
        -: 3194:static int GetBitOffset(WORD color_mask) {
        -: 3195:  if (color_mask == 0) return 0;
        -: 3196:
        -: 3197:  int bitOffset = 0;
        -: 3198:  while ((color_mask & 1) == 0) {
        -: 3199:    color_mask >>= 1;
        -: 3200:    ++bitOffset;
        -: 3201:  }
        -: 3202:  return bitOffset;
        -: 3203:}
        -: 3204:
        -: 3205:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3206:  // Let's reuse the BG
        -: 3207:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3208:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3209:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3210:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3211:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3212:
        -: 3213:  WORD new_color =
        -: 3214:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3215:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3216:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3217:
        -: 3218:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3219:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3220:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3221:  }
        -: 3222:  return new_color;
        -: 3223:}
        -: 3224:
        -: 3225:#else
        -: 3226:
        -: 3227:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3228:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3229:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3230:  switch (color) {
    %%%%%: 3230-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3231:    case GTestColor::kRed:
    #####: 3232:      return "1";
    %%%%%: 3232-block  0
    #####: 3233:    case GTestColor::kGreen:
    #####: 3234:      return "2";
    %%%%%: 3234-block  0
    #####: 3235:    case GTestColor::kYellow:
    #####: 3236:      return "3";
    %%%%%: 3236-block  0
    #####: 3237:    default:
    #####: 3238:      return nullptr;
    %%%%%: 3238-block  0
        -: 3239:  }
        -: 3240:}
        -: 3241:
        -: 3242:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3243:
        -: 3244:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 0 returned 0% blocks executed 0%
    #####: 3245:bool ShouldUseColor(bool stdout_is_tty) {
    #####: 3246:  std::string c = GTEST_FLAG_GET(color);
    %%%%%: 3246-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3247:  const char* const gtest_color = c.c_str();
    %%%%%: 3247-block  0
call    0 never executed
        -: 3248:
    #####: 3249:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3249-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 3250:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3251:    // On Windows the TERM variable is usually not set, but the
        -: 3252:    // console there does support colors.
        -: 3253:    return stdout_is_tty;
        -: 3254:#else
        -: 3255:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3256:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3256-block  0
call    0 never executed
    #####: 3257:    const bool term_supports_color = term != nullptr && (
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3257-block  0
    %%%%%: 3257-block  1
    #####: 3258:        String::CStringEquals(term, "xterm") ||
    %%%%%: 3258-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3259:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3259-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3260:        String::CStringEquals(term, "screen") ||
    %%%%%: 3260-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3261:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3261-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3262:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3262-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3263:        String::CStringEquals(term, "linux") ||
    %%%%%: 3263-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3264:        String::CStringEquals(term, "cygwin") ||
    %%%%%: 3264-block  0
call    0 never executed
    %%%%%: 3264-block  1
    #####: 3265:        String::EndsWithCaseInsensitive(term, "-256color"));
    %%%%%: 3265-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3265-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3265-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 3265-block  3
branch  9 never executed (fallthrough)
branch 10 never executed
    %%%%%: 3265-block  4
branch 11 never executed (fallthrough)
branch 12 never executed
    %%%%%: 3265-block  5
call   13 never executed
    %%%%%: 3265-block  6
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%: 3265-block  7
branch 16 never executed (fallthrough)
branch 17 never executed
    %%%%%: 3265-block  8
call   18 never executed
    %%%%%: 3265-block  9
branch 19 never executed (fallthrough)
branch 20 never executed
    $$$$$: 3265-block 10
branch 21 never executed (fallthrough)
branch 22 never executed
    $$$$$: 3265-block 11
call   23 never executed
    $$$$$: 3265-block 12
    $$$$$: 3265-block 13
branch 24 never executed (fallthrough)
branch 25 never executed
    $$$$$: 3265-block 14
    $$$$$: 3265-block 15
branch 26 never executed (fallthrough)
branch 27 never executed
    $$$$$: 3265-block 16
call   28 never executed
    $$$$$: 3265-block 17
    $$$$$: 3265-block 18
branch 29 never executed (fallthrough)
branch 30 never executed
    $$$$$: 3265-block 19
    #####: 3266:    return stdout_is_tty && term_supports_color;
    %%%%%: 3266-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3266-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3266-block  2
    %%%%%: 3266-block  3
    %%%%%: 3266-block  4
        -: 3267:#endif  // GTEST_OS_WINDOWS
        -: 3268:  }
        -: 3269:
    #####: 3270:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
    %%%%%: 3270-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3271:         String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
    %%%%%: 3271-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3271-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 3272:         String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
    %%%%%: 3272-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3272-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3272-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%: 3272-block  3
    %%%%%: 3272-block  4
    #####: 3273:         String::CStringEquals(gtest_color, "1");
    %%%%%: 3273-block  0
call    0 never executed
    %%%%%: 3273-block  1
        -: 3274:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3275:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3276:  // be conservative.
    #####: 3277:}
    %%%%%: 3277-block  0
call    0 never executed
    $$$$$: 3277-block  1
call    1 never executed
        -: 3278:
        -: 3279:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3280:// cannot simply emit special characters and have the terminal change colors.
        -: 3281:// This routine must actually emit the characters rather than return a string
        -: 3282:// that would be colored when printed, as can be done on Linux.
        -: 3283:
        -: 3284:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 0 returned 0% blocks executed 0%
    #####: 3285:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3286:  va_list args;
    #####: 3287:  va_start(args, fmt);
        -: 3288:
        -: 3289:  static const bool in_color_mode =
    #####: 3290:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
    %%%%%: 3290-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3290-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 3290-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 3290-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 3290-block  4
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed (throw)
    %%%%%: 3290-block  5
call   14 never executed
branch 15 never executed (fallthrough)
branch 16 never executed (throw)
    %%%%%: 3290-block  6
call   17 never executed
    $$$$$: 3290-block  7
branch 18 never executed (fallthrough)
branch 19 never executed
    $$$$$: 3290-block  8
call   20 never executed
    #####: 3291:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
    %%%%%: 3291-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3291-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3291-block  2
    %%%%%: 3291-block  3
        -: 3292:
    #####: 3293:  if (!use_color) {
    %%%%%: 3293-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3294:    vprintf(fmt, args);
    %%%%%: 3294-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3295:    va_end(args);
    #####: 3296:    return;
    %%%%%: 3296-block  0
        -: 3297:  }
        -: 3298:
        -: 3299:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && \
        -: 3300:    !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3301:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3302:
        -: 3303:  // Gets the current text color.
        -: 3304:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3305:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3306:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3307:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3308:
        -: 3309:  // We need to flush the stream buffers into the console before each
        -: 3310:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3311:  // printed but has not yet reached the console.
        -: 3312:  fflush(stdout);
        -: 3313:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3314:
        -: 3315:  vprintf(fmt, args);
        -: 3316:
        -: 3317:  fflush(stdout);
        -: 3318:  // Restores the text color.
        -: 3319:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3320:#else
    #####: 3321:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3321-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3322:  vprintf(fmt, args);
    %%%%%: 3322-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3323:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3323-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3324:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3325:  va_end(args);
    %%%%%: 3325-block  0
        -: 3326:}
        -: 3327:
        -: 3328:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3329:// output to label the type parameter and value parameter for a test.
        -: 3330:static const char kTypeParamLabel[] = "TypeParam";
        -: 3331:static const char kValueParamLabel[] = "GetParam()";
        -: 3332:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3333:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3334:  const char* const type_param = test_info.type_param();
    %%%%%: 3334-block  0
call    0 never executed
    #####: 3335:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3336:
    #####: 3337:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3337-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3338:    printf(", where ");
    %%%%%: 3338-block  0
call    0 never executed
    #####: 3339:    if (type_param != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3340:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3340-block  0
call    0 never executed
    #####: 3341:      if (value_param != nullptr) printf(" and ");
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3341-block  0
call    2 never executed
        -: 3342:    }
    #####: 3343:    if (value_param != nullptr) {
    %%%%%: 3343-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3344:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3344-block  0
call    0 never executed
        -: 3345:    }
        -: 3346:  }
    #####: 3347:}
        -: 3348:
        -: 3349:// This class implements the TestEventListener interface.
        -: 3350://
        -: 3351:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3352:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3353: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC1Ev called 1 returned 100% blocks executed 100%
        1: 3354:  PrettyUnitTestResultPrinter() {}
        1: 3354-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3355:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3356:    printf("%s.%s", test_suite, test);
    %%%%%: 3356-block  0
call    0 never executed
    #####: 3357:  }
        -: 3358:
        -: 3359:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3360:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3361:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3362:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3363:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3364:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3365:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3366:#else
        -: 3367:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3368:#endif  // OnTestCaseStart
        -: 3369:
        -: 3370:  void OnTestStart(const TestInfo& test_info) override;
        -: 3371:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3372:
        -: 3373:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3374:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3375:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3376:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3377:#else
        -: 3378:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3379:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3380:
        -: 3381:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3382:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3383:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3384:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3385:
        -: 3386: private:
        -: 3387:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3388:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3389:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3390:};
        -: 3391:
        -: 3392:// Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3393:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3394:    const UnitTest& unit_test, int iteration) {
    #####: 3395:  if (GTEST_FLAG_GET(repeat) != 1)
    %%%%%: 3395-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3396:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3397:
    #####: 3398:  std::string f = GTEST_FLAG_GET(filter);
    %%%%%: 3398-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3399:  const char* const filter = f.c_str();
    %%%%%: 3399-block  0
call    0 never executed
        -: 3400:
        -: 3401:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3402:  // tests may be skipped.
    #####: 3403:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3404:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3404-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3405:                  filter);
        -: 3406:  }
        -: 3407:
    #####: 3408:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
    %%%%%: 3408-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3408-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 3409:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3409-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3410:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
    %%%%%: 3410-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3411:                  static_cast<int>(shard_index) + 1,
        -: 3412:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3413:  }
        -: 3414:
    #####: 3415:  if (GTEST_FLAG_GET(shuffle)) {
    %%%%%: 3415-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3416:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3416-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3417:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3418:                  unit_test.random_seed());
        -: 3419:  }
        -: 3420:
    #####: 3421:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3421-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3422:  printf("Running %s from %s.\n",
    %%%%%: 3422-block  0
call    0 never executed
    %%%%%: 3422-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 3423:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3423-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3423-block  1
call    6 never executed
    $$$$$: 3423-block  2
call    7 never executed
    $$$$$: 3423-block  3
    #####: 3424:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
    %%%%%: 3424-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3424-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 3424-block  2
call    7 never executed
    $$$$$: 3424-block  3
    #####: 3425:  fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3425-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3426:}
    %%%%%: 3426-block  0
call    0 never executed
    $$$$$: 3426-block  1
call    1 never executed
        -: 3427:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3428:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3429:    const UnitTest& /*unit_test*/) {
    #####: 3430:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3430-block  0
call    0 never executed
    #####: 3431:  printf("Global test environment set-up.\n");
call    0 never executed
    #####: 3432:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3433:}
        -: 3434:
        -: 3435:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3436:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3437:  const std::string counts =
    #####: 3438:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
    %%%%%: 3438-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3438-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3439:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3439-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3440:  printf("%s from %s", counts.c_str(), test_case.name());
    %%%%%: 3440-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 3441:  if (test_case.type_param() == nullptr) {
    %%%%%: 3441-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3442:    printf("\n");
    %%%%%: 3442-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 3443:  } else {
    #####: 3444:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3444-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 3445:  }
    #####: 3446:  fflush(stdout);
    %%%%%: 3446-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3446-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3447:}
    %%%%%: 3447-block  0
call    0 never executed
    $$$$$: 3447-block  1
call    1 never executed
        -: 3448:#else
        -: 3449:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3450:    const TestSuite& test_suite) {
        -: 3451:  const std::string counts =
        -: 3452:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3453:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3454:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3455:  if (test_suite.type_param() == nullptr) {
        -: 3456:    printf("\n");
        -: 3457:  } else {
        -: 3458:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3459:  }
        -: 3460:  fflush(stdout);
        -: 3461:}
        -: 3462:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3463:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3464:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
    #####: 3465:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
    %%%%%: 3465-block  0
call    0 never executed
    #####: 3466:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3467:  printf("\n");
call    0 never executed
    #####: 3468:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3469:}
        -: 3470:
function _ZN7testing8internal27PrettyUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3471:void PrettyUnitTestResultPrinter::OnTestDisabled(const TestInfo& test_info) {
    #####: 3472:  ColoredPrintf(GTestColor::kYellow, "[ DISABLED ] ");
    %%%%%: 3472-block  0
call    0 never executed
    #####: 3473:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3474:  printf("\n");
call    0 never executed
    #####: 3475:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3476:}
        -: 3477:
        -: 3478:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3479:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3480:    const TestPartResult& result) {
    #####: 3481:  switch (result.type()) {
    %%%%%: 3481-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3482:    // If the test part succeeded, we don't need to do anything.
    #####: 3483:    case TestPartResult::kSuccess:
    #####: 3484:      return;
    %%%%%: 3484-block  0
    #####: 3485:    default:
        -: 3486:      // Print failure message from the assertion
        -: 3487:      // (e.g. expected this and got that).
    #####: 3488:      PrintTestPartResult(result);
    %%%%%: 3488-block  0
call    0 never executed
    #####: 3489:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3490:  }
        -: 3491:}
        -: 3492:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3493:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3494:  if (test_info.result()->Passed()) {
    %%%%%: 3494-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3495:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
    %%%%%: 3495-block  0
call    0 never executed
    #####: 3496:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3496-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3497:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3497-block  0
call    0 never executed
        -: 3498:  } else {
    #####: 3499:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3499-block  0
call    0 never executed
        -: 3500:  }
    #####: 3501:  PrintTestName(test_info.test_suite_name(), test_info.name());
    %%%%%: 3501-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3502:  if (test_info.result()->Failed()) PrintFullTestCommentIfPresent(test_info);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3502-block  0
call    4 never executed
        -: 3503:
    #####: 3504:  if (GTEST_FLAG_GET(print_time)) {
    %%%%%: 3504-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3505:    printf(" (%s ms)\n",
    %%%%%: 3505-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3506:           internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3506-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3506-block  1
call    5 never executed
    $$$$$: 3506-block  2
call    6 never executed
    $$$$$: 3506-block  3
        -: 3507:               .c_str());
        -: 3508:  } else {
    #####: 3509:    printf("\n");
    %%%%%: 3509-block  0
call    0 never executed
        -: 3510:  }
    #####: 3511:  fflush(stdout);
    %%%%%: 3511-block  0
call    0 never executed
call    1 never executed
    #####: 3512:}
        -: 3513:
        -: 3514:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3515:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
    #####: 3516:  if (!GTEST_FLAG_GET(print_time)) return;
    %%%%%: 3516-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3516-block  1
    %%%%%: 3516-block  2
        -: 3517:
        -: 3518:  const std::string counts =
    #####: 3519:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
    %%%%%: 3519-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3519-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3520:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3520-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 3521:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
    %%%%%: 3521-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3522:         internal::StreamableToString(test_case.elapsed_time()).c_str());
    %%%%%: 3522-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3522-block  1
call    4 never executed
    $$$$$: 3522-block  2
call    5 never executed
    $$$$$: 3522-block  3
    $$$$$: 3522-block  4
    #####: 3523:  fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3523-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 3524:}
    %%%%%: 3524-block  0
call    0 never executed
    $$$$$: 3524-block  1
call    1 never executed
        -: 3525:#else
        -: 3526:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3527:  if (!GTEST_FLAG_GET(print_time)) return;
        -: 3528:
        -: 3529:  const std::string counts =
        -: 3530:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3531:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3532:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3533:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3534:  fflush(stdout);
        -: 3535:}
        -: 3536:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3537:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3538:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3539:    const UnitTest& /*unit_test*/) {
    #####: 3540:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
    %%%%%: 3540-block  0
call    0 never executed
    #####: 3541:  printf("Global test environment tear-down\n");
call    0 never executed
    #####: 3542:  fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 3543:}
        -: 3544:
        -: 3545:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3546:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3547:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3547-block  0
call    0 never executed
    #####: 3548:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3549:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3549-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3549-block  1
call    7 never executed
    $$$$$: 3549-block  2
call    8 never executed
        -: 3550:
    #####: 3551:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3551-block  0
    %%%%%: 3551-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3552:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3552-block  0
call    0 never executed
    #####: 3553:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3553-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3553-block  1
    %%%%%: 3553-block  2
    %%%%%: 3553-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3554:      continue;
    %%%%%: 3554-block  0
        -: 3555:    }
    #####: 3556:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3556-block  0
    %%%%%: 3556-block  1
    %%%%%: 3556-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3557:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3557-block  0
call    0 never executed
    #####: 3558:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3558-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3558-block  1
    %%%%%: 3558-block  2
    %%%%%: 3558-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3559:        continue;
    %%%%%: 3559-block  0
        -: 3560:      }
    #####: 3561:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3561-block  0
call    0 never executed
    #####: 3562:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3563:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3564:      printf("\n");
call    0 never executed
        -: 3565:    }
        -: 3566:  }
    #####: 3567:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3567-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3567-block  1
    %%%%%: 3567-block  2
    %%%%%: 3567-block  3
call    2 never executed
        -: 3568:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3569:}
        -: 3570:
        -: 3571:// Internal helper for printing the list of test suite failures not covered by
        -: 3572:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3573:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3574:    const UnitTest& unit_test) {
    #####: 3575:  int suite_failure_count = 0;
    #####: 3576:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3576-block  0
    %%%%%: 3576-block  1
    %%%%%: 3576-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3577:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3577-block  0
call    0 never executed
    #####: 3578:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3579:      continue;
    %%%%%: 3579-block  0
        -: 3580:    }
    #####: 3581:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3581-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3582:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3582-block  0
call    0 never executed
    #####: 3583:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3584:      ++suite_failure_count;
        -: 3585:    }
        -: 3586:  }
    #####: 3587:  if (suite_failure_count > 0) {
    %%%%%: 3587-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3588:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3588-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3588-block  1
    %%%%%: 3588-block  2
    %%%%%: 3588-block  3
call    2 never executed
        -: 3589:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3590:  }
    #####: 3591:}
        -: 3592:
        -: 3593:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3594:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3595:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3595-block  0
call    0 never executed
    #####: 3596:  if (skipped_test_count == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3597:    return;
    %%%%%: 3597-block  0
        -: 3598:  }
        -: 3599:
    #####: 3600:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3600-block  0
    %%%%%: 3600-block  1
    %%%%%: 3600-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3601:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3601-block  0
call    0 never executed
    #####: 3602:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3602-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3602-block  1
    %%%%%: 3602-block  2
    %%%%%: 3602-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 3603:      continue;
    %%%%%: 3603-block  0
        -: 3604:    }
    #####: 3605:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3605-block  0
    %%%%%: 3605-block  1
    %%%%%: 3605-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3606:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3606-block  0
call    0 never executed
    #####: 3607:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3607-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 3607-block  1
    %%%%%: 3607-block  2
    %%%%%: 3607-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 3608:        continue;
    %%%%%: 3608-block  0
        -: 3609:      }
    #####: 3610:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3610-block  0
call    0 never executed
    #####: 3611:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3612:      printf("\n");
call    0 never executed
        -: 3613:    }
        -: 3614:  }
        -: 3615:}
        -: 3616:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3617:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3618:                                                     int /*iteration*/) {
    #####: 3619:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3619-block  0
call    0 never executed
    #####: 3620:  printf("%s from %s ran.",
    %%%%%: 3620-block  0
call    0 never executed
    %%%%%: 3620-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 3621:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3621-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3621-block  1
call    6 never executed
    $$$$$: 3621-block  2
call    7 never executed
    $$$$$: 3621-block  3
    #####: 3622:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3622-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 3622-block  1
call    7 never executed
    $$$$$: 3622-block  2
call    8 never executed
    #####: 3623:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3624:    printf(" (%s ms total)",
    %%%%%: 3624-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3625:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3625-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3625-block  1
call    4 never executed
    $$$$$: 3625-block  2
call    5 never executed
    $$$$$: 3625-block  3
    $$$$$: 3625-block  4
call    6 never executed
        -: 3626:  }
    #####: 3627:  printf("\n");
    %%%%%: 3627-block  0
call    0 never executed
    #####: 3628:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3629:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3629-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3629-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 3629-block  2
call   10 never executed
    $$$$$: 3629-block  3
call   11 never executed
    $$$$$: 3629-block  4
call   12 never executed
        -: 3630:
    #####: 3631:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3632:  if (skipped_test_count > 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3633:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3633-block  0
call    0 never executed
    #####: 3634:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3634-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3634-block  1
call    7 never executed
    $$$$$: 3634-block  2
call    8 never executed
    #####: 3635:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3636:  }
        -: 3637:
    #####: 3638:  if (!unit_test.Passed()) {
    %%%%%: 3638-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3639:    PrintFailedTests(unit_test);
    %%%%%: 3639-block  0
call    0 never executed
    #####: 3640:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3641:  }
        -: 3642:
    #####: 3643:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3643-block  0
call    0 never executed
    #####: 3644:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3644-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3645:    if (unit_test.Passed()) {
    %%%%%: 3645-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3646:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3646-block  0
call    0 never executed
        -: 3647:    }
    #####: 3648:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3648-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3648-block  1
    %%%%%: 3648-block  2
    %%%%%: 3648-block  3
call    2 never executed
        -: 3649:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3650:  }
        -: 3651:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3652:  fflush(stdout);
    %%%%%: 3652-block  0
call    0 never executed
call    1 never executed
    #####: 3653:}
        -: 3654:
        -: 3655:// End PrettyUnitTestResultPrinter
        -: 3656:
        -: 3657:// This class implements the TestEventListener interface.
        -: 3658://
        -: 3659:// Class BriefUnitTestResultPrinter is copyable.
        -: 3660:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3661: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC1Ev called 0 returned 0% blocks executed 0%
    #####: 3662:  BriefUnitTestResultPrinter() {}
    %%%%%: 3662-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3663:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3664:    printf("%s.%s", test_suite, test);
    %%%%%: 3664-block  0
call    0 never executed
    #####: 3665:  }
        -: 3666:
        -: 3667:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3668:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3669:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3670:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3671:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3672:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3673:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3674:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3675:#else
        -: 3676:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3677:#endif  // OnTestCaseStart
        -: 3678:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3679:  void OnTestStart(const TestInfo& /*test_info*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3680:  void OnTestDisabled(const TestInfo& /*test_info*/) override {}
        -: 3681:
        -: 3682:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3683:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3684:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3685:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3686:#else
        -: 3687:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3688:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3689:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3690:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3691:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3692:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3693:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3694:};
        -: 3695:
        -: 3696:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3697:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3698:    const TestPartResult& result) {
    #####: 3699:  switch (result.type()) {
    %%%%%: 3699-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 3700:    // If the test part succeeded, we don't need to do anything.
    #####: 3701:    case TestPartResult::kSuccess:
    #####: 3702:      return;
    %%%%%: 3702-block  0
    #####: 3703:    default:
        -: 3704:      // Print failure message from the assertion
        -: 3705:      // (e.g. expected this and got that).
    #####: 3706:      PrintTestPartResult(result);
    %%%%%: 3706-block  0
call    0 never executed
    #####: 3707:      fflush(stdout);
call    0 never executed
call    1 never executed
        -: 3708:  }
        -: 3709:}
        -: 3710:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3711:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3712:  if (test_info.result()->Failed()) {
    %%%%%: 3712-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3713:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3713-block  0
call    0 never executed
    #####: 3714:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3715:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3716:
    #####: 3717:    if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3718:      printf(" (%s ms)\n",
    %%%%%: 3718-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3719:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3719-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 3719-block  1
call    5 never executed
    $$$$$: 3719-block  2
call    6 never executed
    $$$$$: 3719-block  3
        -: 3720:                 .c_str());
        -: 3721:    } else {
    #####: 3722:      printf("\n");
    %%%%%: 3722-block  0
call    0 never executed
        -: 3723:    }
    #####: 3724:    fflush(stdout);
    %%%%%: 3724-block  0
call    0 never executed
call    1 never executed
        -: 3725:  }
    #####: 3726:}
    %%%%%: 3726-block  0
        -: 3727:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3728:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3729:                                                    int /*iteration*/) {
    #####: 3730:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3730-block  0
call    0 never executed
    #####: 3731:  printf("%s from %s ran.",
    %%%%%: 3731-block  0
call    0 never executed
    %%%%%: 3731-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 3732:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3732-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3732-block  1
call    6 never executed
    $$$$$: 3732-block  2
call    7 never executed
    $$$$$: 3732-block  3
    #####: 3733:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3733-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 3733-block  1
call    7 never executed
    $$$$$: 3733-block  2
call    8 never executed
    #####: 3734:  if (GTEST_FLAG_GET(print_time)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3735:    printf(" (%s ms total)",
    %%%%%: 3735-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 3736:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3736-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 3736-block  1
call    4 never executed
    $$$$$: 3736-block  2
call    5 never executed
    $$$$$: 3736-block  3
    $$$$$: 3736-block  4
call    6 never executed
        -: 3737:  }
    #####: 3738:  printf("\n");
    %%%%%: 3738-block  0
call    0 never executed
    #####: 3739:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3740:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3740-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 3740-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 3740-block  2
call   10 never executed
    $$$$$: 3740-block  3
call   11 never executed
    $$$$$: 3740-block  4
call   12 never executed
        -: 3741:
    #####: 3742:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3743:  if (skipped_test_count > 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3744:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3744-block  0
call    0 never executed
    #####: 3745:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3745-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3745-block  1
call    7 never executed
    $$$$$: 3745-block  2
call    8 never executed
        -: 3746:  }
        -: 3747:
    #####: 3748:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3748-block  0
call    0 never executed
    #####: 3749:  if (num_disabled && !GTEST_FLAG_GET(also_run_disabled_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3749-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 3750:    if (unit_test.Passed()) {
    %%%%%: 3750-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3751:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3751-block  0
call    0 never executed
        -: 3752:    }
    #####: 3753:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3753-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3753-block  1
    %%%%%: 3753-block  2
    %%%%%: 3753-block  3
call    2 never executed
        -: 3754:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3755:  }
        -: 3756:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3757:  fflush(stdout);
    %%%%%: 3757-block  0
call    0 never executed
call    1 never executed
    #####: 3758:}
        -: 3759:
        -: 3760:// End BriefUnitTestResultPrinter
        -: 3761:
        -: 3762:// class TestEventRepeater
        -: 3763://
        -: 3764:// This class forwards events to other event listeners.
        -: 3765:class TestEventRepeater : public TestEventListener {
        -: 3766: public:
function _ZN7testing8internal17TestEventRepeaterC1Ev called 1 returned 100% blocks executed 100%
        1: 3767:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3767-block  0
call    0 returned 1
call    1 returned 1
        -: 3768:  ~TestEventRepeater() override;
        -: 3769:  void Append(TestEventListener* listener);
        -: 3770:  TestEventListener* Release(TestEventListener* listener);
        -: 3771:
        -: 3772:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3773:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3774:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3774-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3775:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3776:
        -: 3777:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3778:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3779:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3780:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3781://  Legacy API is deprecated but still available
        -: 3782:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3783:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3784:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3785:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3786:  void OnTestStart(const TestInfo& test_info) override;
        -: 3787:  void OnTestDisabled(const TestInfo& test_info) override;
        -: 3788:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3789:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3790://  Legacy API is deprecated but still available
        -: 3791:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3792:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3793:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3794:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3795:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3796:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3797:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3798:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3799:
        -: 3800: private:
        -: 3801:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3802:  // in death test child processes.
        -: 3803:  bool forwarding_enabled_;
        -: 3804:  // The list of listeners that receive events.
        -: 3805:  std::vector<TestEventListener*> listeners_;
        -: 3806:
        -: 3807:  TestEventRepeater(const TestEventRepeater&) = delete;
        -: 3808:  TestEventRepeater& operator=(const TestEventRepeater&) = delete;
        -: 3809:};
        -: 3810:
    #####: 3811:TestEventRepeater::~TestEventRepeater() {
    #####: 3812:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3813:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 0 returned 0% blocks executed 0%
    #####: 3811:TestEventRepeater::~TestEventRepeater() {
        -: 3812:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3813:}
    %%%%%: 3813-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 0 returned 0% blocks executed 0%
    #####: 3811:TestEventRepeater::~TestEventRepeater() {
    #####: 3812:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3812-block  0
call    0 never executed
    #####: 3813:}
call    0 never executed
call    1 never executed
------------------
        -: 3814:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3815:void TestEventRepeater::Append(TestEventListener* listener) {
        1: 3816:  listeners_.push_back(listener);
        1: 3816-block  0
call    0 returned 1
        1: 3817:}
        -: 3818:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3819:TestEventListener* TestEventRepeater::Release(TestEventListener* listener) {
       1*: 3820:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3820-block  0
    %%%%%: 3820-block  1
        1: 3820-block  2
call    0 returned 1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####: 3821:    if (listeners_[i] == listener) {
    %%%%%: 3821-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3822:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3822-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 3822-block  1
    $$$$$: 3822-block  2
    #####: 3823:      return listener;
    %%%%%: 3823-block  0
        -: 3824:    }
        -: 3825:  }
        -: 3826:
        1: 3827:  return nullptr;
        1: 3827-block  0
        -: 3828:}
        -: 3829:
        -: 3830:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3831:// This defines a member that forwards the call to all listeners.
        -: 3832:#define GTEST_REPEATER_METHOD_(Name, Type)              \
        -: 3833:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3834:    if (forwarding_enabled_) {                          \
        -: 3835:      for (size_t i = 0; i < listeners_.size(); i++) {  \
        -: 3836:        listeners_[i]->Name(parameter);                 \
        -: 3837:      }                                                 \
        -: 3838:    }                                                   \
        -: 3839:  }
        -: 3840:// This defines a member that forwards the call to all listeners in reverse
        -: 3841:// order.
        -: 3842:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3843:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3844:    if (forwarding_enabled_) {                          \
        -: 3845:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3846:        listeners_[i - 1]->Name(parameter);             \
        -: 3847:      }                                                 \
        -: 3848:    }                                                   \
        -: 3849:  }
        -: 3850:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3851:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
    %%%%%: 3851-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3851-block  1
    %%%%%: 3851-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3851-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3852:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
    %%%%%: 3852-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3852-block  1
    %%%%%: 3852-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3852-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 3853://  Legacy API is deprecated but still available
        -: 3854:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3855:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
    %%%%%: 3855-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3855-block  1
    %%%%%: 3855-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3855-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 3856:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3857:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
    %%%%%: 3857-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3857-block  1
    %%%%%: 3857-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3857-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3858:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
    %%%%%: 3858-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3858-block  1
    %%%%%: 3858-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3858-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater14OnTestDisabledERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3859:GTEST_REPEATER_METHOD_(OnTestDisabled, TestInfo)
    %%%%%: 3859-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3859-block  1
    %%%%%: 3859-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3859-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3860:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3860-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3860-block  1
    %%%%%: 3860-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3860-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3861:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
    %%%%%: 3861-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3861-block  1
    %%%%%: 3861-block  2
call    2 never executed
call    3 never executed
    %%%%%: 3861-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3862:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
    %%%%%: 3862-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3862-block  1
call    2 never executed
    %%%%%: 3862-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3862-block  3
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3863:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
    %%%%%: 3863-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3863-block  1
call    2 never executed
    %%%%%: 3863-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3863-block  3
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3864:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
    %%%%%: 3864-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3864-block  1
call    2 never executed
    %%%%%: 3864-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3864-block  3
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 3865://  Legacy API is deprecated but still available
        -: 3866:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3867:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
    %%%%%: 3867-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3867-block  1
call    2 never executed
    %%%%%: 3867-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3867-block  3
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 3868:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3869:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
    %%%%%: 3869-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3869-block  1
call    2 never executed
    %%%%%: 3869-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3869-block  3
branch  5 never executed
branch  6 never executed (fallthrough)
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3870:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
    %%%%%: 3870-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3870-block  1
call    2 never executed
    %%%%%: 3870-block  2
call    3 never executed
call    4 never executed
    %%%%%: 3870-block  3
branch  5 never executed
branch  6 never executed (fallthrough)
        -: 3871:
        -: 3872:#undef GTEST_REPEATER_METHOD_
        -: 3873:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3874:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3875:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3876:                                             int iteration) {
    #####: 3877:  if (forwarding_enabled_) {
    %%%%%: 3877-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3878:    for (size_t i = 0; i < listeners_.size(); i++) {
    %%%%%: 3878-block  0
    %%%%%: 3878-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3879:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
    %%%%%: 3879-block  0
call    0 never executed
call    1 never executed
        -: 3880:    }
        -: 3881:  }
    #####: 3882:}
        -: 3883:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3884:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3885:                                           int iteration) {
    #####: 3886:  if (forwarding_enabled_) {
    %%%%%: 3886-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 3887:    for (size_t i = listeners_.size(); i > 0; i--) {
    %%%%%: 3887-block  0
call    0 never executed
    %%%%%: 3887-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 3888:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
    %%%%%: 3888-block  0
call    0 never executed
call    1 never executed
        -: 3889:    }
        -: 3890:  }
    #####: 3891:}
        -: 3892:
        -: 3893:// End TestEventRepeater
        -: 3894:
        -: 3895:// This class generates an XML output file.
        -: 3896:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3897: public:
        -: 3898:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3899:
        -: 3900:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3901:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3902:
        -: 3903:  // Prints an XML summary of all unit tests.
        -: 3904:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3905:                                const std::vector<TestSuite*>& test_suites);
        -: 3906:
        -: 3907: private:
        -: 3908:  // Is c a whitespace character that is normalized to a space character
        -: 3909:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEh called 0 returned 0% blocks executed 0%
    #####: 3910:  static bool IsNormalizableWhitespace(unsigned char c) {
    #####: 3911:    return c == '\t' || c == '\n' || c == '\r';
    %%%%%: 3911-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 3911-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 3911-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 3911-block  3
    %%%%%: 3911-block  4
    %%%%%: 3911-block  5
        -: 3912:  }
        -: 3913:
        -: 3914:  // May c appear in a well-formed XML document?
        -: 3915:  // https://www.w3.org/TR/REC-xml/#charsets
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEh called 0 returned 0% blocks executed 0%
    #####: 3916:  static bool IsValidXmlCharacter(unsigned char c) {
    #####: 3917:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3917-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 3917-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 3917-block  2
    %%%%%: 3917-block  3
    %%%%%: 3917-block  4
        -: 3918:  }
        -: 3919:
        -: 3920:  // Returns an XML-escaped copy of the input string str.  If
        -: 3921:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3922:  // value, and normalizable whitespace is preserved by replacing it
        -: 3923:  // with character references.
        -: 3924:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3925:
        -: 3926:  // Returns the given string with all characters invalid in XML removed.
        -: 3927:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3928:
        -: 3929:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3930:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3931:    return EscapeXml(str, true);
    %%%%%: 3931-block  0
call    0 never executed
        -: 3932:  }
        -: 3933:
        -: 3934:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3935:  static std::string EscapeXmlText(const char* str) {
        -: 3936:    return EscapeXml(str, false);
        -: 3937:  }
        -: 3938:
        -: 3939:  // Verifies that the given attribute belongs to the given element and
        -: 3940:  // streams the attribute as XML.
        -: 3941:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3942:                                 const std::string& element_name,
        -: 3943:                                 const std::string& name,
        -: 3944:                                 const std::string& value);
        -: 3945:
        -: 3946:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3947:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3948:
        -: 3949:  // Streams a test suite XML stanza containing the given test result.
        -: 3950:  //
        -: 3951:  // Requires: result.Failed()
        -: 3952:  static void OutputXmlTestSuiteForTestResult(::std::ostream* stream,
        -: 3953:                                              const TestResult& result);
        -: 3954:
        -: 3955:  // Streams an XML representation of a TestResult object.
        -: 3956:  static void OutputXmlTestResult(::std::ostream* stream,
        -: 3957:                                  const TestResult& result);
        -: 3958:
        -: 3959:  // Streams an XML representation of a TestInfo object.
        -: 3960:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3961:                                const char* test_suite_name,
        -: 3962:                                const TestInfo& test_info);
        -: 3963:
        -: 3964:  // Prints an XML representation of a TestSuite object
        -: 3965:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3966:                                const TestSuite& test_suite);
        -: 3967:
        -: 3968:  // Prints an XML summary of unit_test to output stream out.
        -: 3969:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3970:                               const UnitTest& unit_test);
        -: 3971:
        -: 3972:  // Produces a string representing the test properties in a result as space
        -: 3973:  // delimited XML attributes based on the property key="value" pairs.
        -: 3974:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3975:  // to delimit this attribute from prior attributes.
        -: 3976:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3977:
        -: 3978:  // Streams an XML representation of the test properties of a TestResult
        -: 3979:  // object.
        -: 3980:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3981:                                      const TestResult& result);
        -: 3982:
        -: 3983:  // The output file.
        -: 3984:  const std::string output_file_;
        -: 3985:
        -: 3986:  XmlUnitTestResultPrinter(const XmlUnitTestResultPrinter&) = delete;
        -: 3987:  XmlUnitTestResultPrinter& operator=(const XmlUnitTestResultPrinter&) = delete;
        -: 3988:};
        -: 3989:
        -: 3990:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3991:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3992:    : output_file_(output_file) {
    %%%%%: 3992-block  0
call    0 never executed
    %%%%%: 3992-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 3992-block  2
    #####: 3993:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 3994:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3994-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 3994-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 3994-block  2
call    7 never executed
    $$$$$: 3994-block  3
call    8 never executed
    $$$$$: 3994-block  4
        -: 3995:  }
    #####: 3996:}
    %%%%%: 3996-block  0
    $$$$$: 3996-block  1
call    0 never executed
    $$$$$: 3996-block  2
call    1 never executed
        -: 3997:
        -: 3998:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3999:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4000:                                                  int /*iteration*/) {
    #####: 4001:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4001-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4002:  std::stringstream stream;
    %%%%%: 4002-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4003:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 4003-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4004:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4004-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4004-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4004-block  2
    #####: 4005:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4006:}
    %%%%%: 4006-block  0
call    0 never executed
    $$$$$: 4006-block  1
call    1 never executed
        -: 4007:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 4008:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 4009:    const std::vector<TestSuite*>& test_suites) {
    #####: 4010:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 4010-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4011:  std::stringstream stream;
    %%%%%: 4011-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4012:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 4012-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4013:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4013-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4013-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4013-block  2
    #####: 4014:  fclose(xmlout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4015:}
    %%%%%: 4015-block  0
call    0 never executed
    $$$$$: 4015-block  1
call    1 never executed
        -: 4016:
        -: 4017:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 4018:// is true, the text is meant to appear as an attribute value, and
        -: 4019:// normalizable whitespace is preserved by replacing it with character
        -: 4020:// references.
        -: 4021://
        -: 4022:// Invalid XML characters in str, if any, are stripped from the output.
        -: 4023:// It is expected that most, if not all, of the text processed by this
        -: 4024:// module will consist of ordinary English text.
        -: 4025:// If this module is ever modified to produce version 1.1 XML output,
        -: 4026:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 4027:std::string XmlUnitTestResultPrinter::EscapeXml(const std::string& str,
        -: 4028:                                                bool is_attribute) {
    #####: 4029:  Message m;
    %%%%%: 4029-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4030:
    #####: 4031:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4031-block  0
    %%%%%: 4031-block  1
    %%%%%: 4031-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4032:    const char ch = str[i];
    %%%%%: 4032-block  0
call    0 never executed
    #####: 4033:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4034:      case '<':
    #####: 4035:        m << "&lt;";
    %%%%%: 4035-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4036:        break;
    %%%%%: 4036-block  0
    #####: 4037:      case '>':
    #####: 4038:        m << "&gt;";
    %%%%%: 4038-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4039:        break;
    %%%%%: 4039-block  0
    #####: 4040:      case '&':
    #####: 4041:        m << "&amp;";
    %%%%%: 4041-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4042:        break;
    %%%%%: 4042-block  0
    #####: 4043:      case '\'':
    #####: 4044:        if (is_attribute)
    %%%%%: 4044-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4045:          m << "&apos;";
    %%%%%: 4045-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4046:        else
    #####: 4047:          m << '\'';
    %%%%%: 4047-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4047-block  1
    $$$$$: 4047-block  2
    #####: 4048:        break;
    %%%%%: 4048-block  0
    #####: 4049:      case '"':
    #####: 4050:        if (is_attribute)
    %%%%%: 4050-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4051:          m << "&quot;";
    %%%%%: 4051-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4052:        else
    #####: 4053:          m << '"';
    %%%%%: 4053-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4053-block  1
    $$$$$: 4053-block  2
    #####: 4054:        break;
    %%%%%: 4054-block  0
    #####: 4055:      default:
    #####: 4056:        if (IsValidXmlCharacter(static_cast<unsigned char>(ch))) {
    %%%%%: 4056-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4057:          if (is_attribute &&
    %%%%%: 4057-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4057-block  1
    %%%%%: 4057-block  2
    %%%%%: 4057-block  3
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4058:              IsNormalizableWhitespace(static_cast<unsigned char>(ch)))
    %%%%%: 4058-block  0
call    0 never executed
    #####: 4059:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4059-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4059-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4059-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4059-block  3
call    9 never executed
    $$$$$: 4059-block  4
call   10 never executed
    $$$$$: 4059-block  5
    #####: 4060:              << ";";
    %%%%%: 4060-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4061:          else
    #####: 4062:            m << ch;
    %%%%%: 4062-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4063:        }
    #####: 4064:        break;
    %%%%%: 4064-block  0
        -: 4065:    }
        -: 4066:  }
        -: 4067:
    #####: 4068:  return m.GetString();
    %%%%%: 4068-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4068-block  1
    #####: 4069:}
    %%%%%: 4069-block  0
call    0 never executed
    $$$$$: 4069-block  1
call    1 never executed
        -: 4070:
        -: 4071:// Returns the given string with all characters invalid in XML removed.
        -: 4072:// Currently invalid characters are dropped from the string. An
        -: 4073:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4074:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4075:    const std::string& str) {
    #####: 4076:  std::string output;
    %%%%%: 4076-block  0
call    0 never executed
    #####: 4077:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 4078:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4078-block  0
call    0 never executed
    %%%%%: 4078-block  1
call    1 never executed
    %%%%%: 4078-block  2
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4079:    if (IsValidXmlCharacter(static_cast<unsigned char>(*it)))
    %%%%%: 4079-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4080:      output.push_back(*it);
    %%%%%: 4080-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4081:
    #####: 4082:  return output;
    %%%%%: 4082-block  0
    %%%%%: 4082-block  1
    =====: 4083:}
    $$$$$: 4083-block  0
call    0 never executed
        -: 4084:
        -: 4085:// The following routines generate an XML representation of a UnitTest
        -: 4086:// object.
        -: 4087://
        -: 4088:// This is how Google Test concepts map to the DTD:
        -: 4089://
        -: 4090:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4091://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4092://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4093://       <failure message="...">...</failure>
        -: 4094://       <failure message="...">...</failure>
        -: 4095://       <failure message="...">...</failure>
        -: 4096://                                     <-- individual assertion failures
        -: 4097://     </testcase>
        -: 4098://   </testsuite>
        -: 4099:// </testsuites>
        -: 4100:
        -: 4101:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4102:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4103:  ::std::stringstream ss;
    %%%%%: 4103-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4104:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4104-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4105:  return ss.str();
    %%%%%: 4105-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4105-block  1
    #####: 4106:}
    %%%%%: 4106-block  0
call    0 never executed
    $$$$$: 4106-block  1
call    1 never executed
        -: 4107:
function _ZN7testing8internalL17PortableLocaltimeExP2tm called 0 returned 0% blocks executed 0%
    #####: 4108:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4109:#if defined(_MSC_VER)
        -: 4110:  return localtime_s(out, &seconds) == 0;
        -: 4111:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4112:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4113:  // Windows' localtime(), which has a thread-local tm buffer.
    #####: 4114:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
    %%%%%: 4114-block  0
call    0 never executed
    #####: 4115:  if (tm_ptr == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4115-block  0
    #####: 4116:  *out = *tm_ptr;
    #####: 4117:  return true;
    %%%%%: 4117-block  0
        -: 4118:#elif defined(__STDC_LIB_EXT1__)
        -: 4119:  // Uses localtime_s when available as localtime_r is only available from
        -: 4120:  // C23 standard.
        -: 4121:  return localtime_s(&seconds, out) != nullptr;
        -: 4122:#else
        -: 4123:  return localtime_r(&seconds, out) != nullptr;
        -: 4124:#endif
        -: 4125:}
        -: 4126:
        -: 4127:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4128:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11Ex called 0 returned 0% blocks executed 0%
    #####: 4129:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4130:  struct tm time_struct;
    #####: 4131:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4131-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4131-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4132:    return "";
    %%%%%: 4132-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4132-block  1
        -: 4133:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4134:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4134-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4134-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4134-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4134-block  3
call   12 never executed
    $$$$$: 4134-block  4
call   13 never executed
    $$$$$: 4134-block  5
call   14 never executed
    $$$$$: 4134-block  6
    $$$$$: 4134-block  7
    $$$$$: 4134-block  8
    $$$$$: 4134-block  9
    #####: 4135:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4135-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4135-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4135-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4135-block  3
call   12 never executed
    $$$$$: 4135-block  4
call   13 never executed
    $$$$$: 4135-block  5
call   14 never executed
    $$$$$: 4135-block  6
    $$$$$: 4135-block  7
    $$$$$: 4135-block  8
    #####: 4136:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4136-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4136-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4136-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4136-block  3
call   12 never executed
    $$$$$: 4136-block  4
call   13 never executed
    $$$$$: 4136-block  5
call   14 never executed
    $$$$$: 4136-block  6
    $$$$$: 4136-block  7
    $$$$$: 4136-block  8
    #####: 4137:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4137-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4137-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4137-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4137-block  3
call   12 never executed
    $$$$$: 4137-block  4
call   13 never executed
    $$$$$: 4137-block  5
call   14 never executed
    $$$$$: 4137-block  6
    $$$$$: 4137-block  7
    $$$$$: 4137-block  8
    #####: 4138:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4138-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4138-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4138-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4138-block  3
call   12 never executed
    $$$$$: 4138-block  4
call   13 never executed
    $$$$$: 4138-block  5
call   14 never executed
    $$$$$: 4138-block  6
    $$$$$: 4138-block  7
    $$$$$: 4138-block  8
    #####: 4139:         String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4139-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4139-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4139-block  2
call    6 never executed
call    7 never executed
    $$$$$: 4139-block  3
call    8 never executed
    $$$$$: 4139-block  4
call    9 never executed
    $$$$$: 4139-block  5
    $$$$$: 4139-block  6
    #####: 4140:         String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4140-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4140-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4140-block  2
call    7 never executed
    $$$$$: 4140-block  3
        -: 4141:}
        -: 4142:
        -: 4143:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4144:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4145:                                                     const char* data) {
    #####: 4146:  const char* segment = data;
    #####: 4147:  *stream << "<![CDATA[";
    %%%%%: 4147-block  0
call    0 never executed
        -: 4148:  for (;;) {
    #####: 4149:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4150:    if (next_segment != nullptr) {
    %%%%%: 4150-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4151:      stream->write(segment,
    #####: 4152:                    static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4152-block  0
call    0 never executed
    #####: 4153:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4154:      segment = next_segment + strlen("]]>");
        -: 4155:    } else {
    #####: 4156:      *stream << segment;
    %%%%%: 4156-block  0
call    0 never executed
    #####: 4157:      break;
        -: 4158:    }
    #####: 4159:  }
    %%%%%: 4159-block  0
    #####: 4160:  *stream << "]]>";
    %%%%%: 4160-block  0
call    0 never executed
    #####: 4161:}
        -: 4162:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4163:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4164:    std::ostream* stream, const std::string& element_name,
        -: 4165:    const std::string& name, const std::string& value) {
        -: 4166:  const std::vector<std::string>& allowed_names =
    #####: 4167:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4167-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4168:
    #####: 4169:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4169-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4169-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4169-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4169-block  3
call   13 never executed
    %%%%%: 4169-block  4
call   14 never executed
    $$$$$: 4169-block  5
    $$$$$: 4169-block  6
    $$$$$: 4169-block  7
call   15 never executed
    $$$$$: 4169-block  8
        -: 4170:               allowed_names.end())
        -: 4171:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4172:      << ">.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4172-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4172-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4172-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4172-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4172-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4173:
    #####: 4174:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4174-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4174-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4174-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4174-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4174-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4174-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4174-block  6
call   18 never executed
    $$$$$: 4174-block  7
call   19 never executed
    $$$$$: 4174-block  8
    #####: 4175:}
call    0 never executed
    $$$$$: 4175-block  0
call    1 never executed
        -: 4176:
        -: 4177:// Streams a test suite XML stanza containing the given test result.
function _ZN7testing8internal24XmlUnitTestResultPrinter31OutputXmlTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4178:void XmlUnitTestResultPrinter::OutputXmlTestSuiteForTestResult(
        -: 4179:    ::std::ostream* stream, const TestResult& result) {
        -: 4180:  // Output the boilerplate for a minimal test suite with one test.
    #####: 4181:  *stream << "  <testsuite";
    %%%%%: 4181-block  0
call    0 never executed
    #####: 4182:  OutputXmlAttribute(stream, "testsuite", "name", "NonTestSuiteFailure");
    %%%%%: 4182-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4182-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4182-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4182-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4182-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4182-block  5
call   15 never executed
    $$$$$: 4182-block  6
    $$$$$: 4182-block  7
    $$$$$: 4182-block  8
call   16 never executed
    $$$$$: 4182-block  9
    $$$$$: 4182-block 10
    $$$$$: 4182-block 11
call   17 never executed
    $$$$$: 4182-block 12
    $$$$$: 4182-block 13
call   18 never executed
    #####: 4183:  OutputXmlAttribute(stream, "testsuite", "tests", "1");
    %%%%%: 4183-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4183-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4183-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4183-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4183-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4183-block  5
call   15 never executed
    $$$$$: 4183-block  6
    $$$$$: 4183-block  7
    $$$$$: 4183-block  8
call   16 never executed
    $$$$$: 4183-block  9
    $$$$$: 4183-block 10
    $$$$$: 4183-block 11
call   17 never executed
    $$$$$: 4183-block 12
    $$$$$: 4183-block 13
call   18 never executed
    #####: 4184:  OutputXmlAttribute(stream, "testsuite", "failures", "1");
    %%%%%: 4184-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4184-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4184-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4184-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4184-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4184-block  5
call   15 never executed
    $$$$$: 4184-block  6
    $$$$$: 4184-block  7
    $$$$$: 4184-block  8
call   16 never executed
    $$$$$: 4184-block  9
    $$$$$: 4184-block 10
    $$$$$: 4184-block 11
call   17 never executed
    $$$$$: 4184-block 12
    $$$$$: 4184-block 13
call   18 never executed
    #####: 4185:  OutputXmlAttribute(stream, "testsuite", "disabled", "0");
    %%%%%: 4185-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4185-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4185-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4185-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4185-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4185-block  5
call   15 never executed
    $$$$$: 4185-block  6
    $$$$$: 4185-block  7
    $$$$$: 4185-block  8
call   16 never executed
    $$$$$: 4185-block  9
    $$$$$: 4185-block 10
    $$$$$: 4185-block 11
call   17 never executed
    $$$$$: 4185-block 12
    $$$$$: 4185-block 13
call   18 never executed
    #####: 4186:  OutputXmlAttribute(stream, "testsuite", "skipped", "0");
    %%%%%: 4186-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4186-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4186-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4186-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4186-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4186-block  5
call   15 never executed
    $$$$$: 4186-block  6
    $$$$$: 4186-block  7
    $$$$$: 4186-block  8
call   16 never executed
    $$$$$: 4186-block  9
    $$$$$: 4186-block 10
    $$$$$: 4186-block 11
call   17 never executed
    $$$$$: 4186-block 12
    $$$$$: 4186-block 13
call   18 never executed
    #####: 4187:  OutputXmlAttribute(stream, "testsuite", "errors", "0");
    %%%%%: 4187-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4187-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4187-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4187-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4187-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4187-block  5
call   15 never executed
    $$$$$: 4187-block  6
    $$$$$: 4187-block  7
    $$$$$: 4187-block  8
call   16 never executed
    $$$$$: 4187-block  9
    $$$$$: 4187-block 10
    $$$$$: 4187-block 11
call   17 never executed
    $$$$$: 4187-block 12
    $$$$$: 4187-block 13
call   18 never executed
    #####: 4188:  OutputXmlAttribute(stream, "testsuite", "time",
    %%%%%: 4188-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4188-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4188-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4188-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4188-block  4
call   11 never executed
    $$$$$: 4188-block  5
    $$$$$: 4188-block  6
    $$$$$: 4188-block  7
call   12 never executed
    $$$$$: 4188-block  8
    $$$$$: 4188-block  9
    #####: 4189:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4189-block  0
call    5 never executed
    $$$$$: 4189-block  1
call    6 never executed
    #####: 4190:  OutputXmlAttribute(
    %%%%%: 4190-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4190-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4190-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4190-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4190-block  4
call   11 never executed
    $$$$$: 4190-block  5
    $$$$$: 4190-block  6
    $$$$$: 4190-block  7
call   12 never executed
    $$$$$: 4190-block  8
    $$$$$: 4190-block  9
        -: 4191:      stream, "testsuite", "timestamp",
    #####: 4192:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4192-block  0
call    5 never executed
    $$$$$: 4192-block  1
call    6 never executed
    #####: 4193:  *stream << ">";
call    0 never executed
        -: 4194:
        -: 4195:  // Output the boilerplate for a minimal test case with a single test.
    #####: 4196:  *stream << "    <testcase";
call    0 never executed
    #####: 4197:  OutputXmlAttribute(stream, "testcase", "name", "");
    %%%%%: 4197-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4197-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4197-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4197-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4197-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4197-block  5
call   15 never executed
    $$$$$: 4197-block  6
    $$$$$: 4197-block  7
    $$$$$: 4197-block  8
call   16 never executed
    $$$$$: 4197-block  9
    $$$$$: 4197-block 10
    $$$$$: 4197-block 11
call   17 never executed
    $$$$$: 4197-block 12
    $$$$$: 4197-block 13
call   18 never executed
    #####: 4198:  OutputXmlAttribute(stream, "testcase", "status", "run");
    %%%%%: 4198-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4198-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4198-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4198-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4198-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4198-block  5
call   15 never executed
    $$$$$: 4198-block  6
    $$$$$: 4198-block  7
    $$$$$: 4198-block  8
call   16 never executed
    $$$$$: 4198-block  9
    $$$$$: 4198-block 10
    $$$$$: 4198-block 11
call   17 never executed
    $$$$$: 4198-block 12
    $$$$$: 4198-block 13
call   18 never executed
    #####: 4199:  OutputXmlAttribute(stream, "testcase", "result", "completed");
    %%%%%: 4199-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4199-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4199-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4199-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4199-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4199-block  5
call   15 never executed
    $$$$$: 4199-block  6
    $$$$$: 4199-block  7
    $$$$$: 4199-block  8
call   16 never executed
    $$$$$: 4199-block  9
    $$$$$: 4199-block 10
    $$$$$: 4199-block 11
call   17 never executed
    $$$$$: 4199-block 12
    $$$$$: 4199-block 13
call   18 never executed
    #####: 4200:  OutputXmlAttribute(stream, "testcase", "classname", "");
    %%%%%: 4200-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4200-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4200-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4200-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4200-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4200-block  5
call   15 never executed
    $$$$$: 4200-block  6
    $$$$$: 4200-block  7
    $$$$$: 4200-block  8
call   16 never executed
    $$$$$: 4200-block  9
    $$$$$: 4200-block 10
    $$$$$: 4200-block 11
call   17 never executed
    $$$$$: 4200-block 12
    $$$$$: 4200-block 13
call   18 never executed
    #####: 4201:  OutputXmlAttribute(stream, "testcase", "time",
    %%%%%: 4201-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4201-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4201-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4201-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4201-block  4
call   11 never executed
    $$$$$: 4201-block  5
    $$$$$: 4201-block  6
    $$$$$: 4201-block  7
call   12 never executed
    $$$$$: 4201-block  8
    $$$$$: 4201-block  9
    #####: 4202:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4202-block  0
call    5 never executed
    $$$$$: 4202-block  1
call    6 never executed
    #####: 4203:  OutputXmlAttribute(
    %%%%%: 4203-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4203-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4203-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4203-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4203-block  4
call   11 never executed
    $$$$$: 4203-block  5
    $$$$$: 4203-block  6
    $$$$$: 4203-block  7
call   12 never executed
    $$$$$: 4203-block  8
    $$$$$: 4203-block  9
        -: 4204:      stream, "testcase", "timestamp",
    #####: 4205:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4205-block  0
call    5 never executed
        -: 4206:
        -: 4207:  // Output the actual test result.
    #####: 4208:  OutputXmlTestResult(stream, result);
call    0 never executed
        -: 4209:
        -: 4210:  // Complete the test suite.
    #####: 4211:  *stream << "  </testsuite>\n";
call    0 never executed
    #####: 4212:}
        -: 4213:
        -: 4214:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4215:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4216:                                                 const char* test_suite_name,
        -: 4217:                                                 const TestInfo& test_info) {
    #####: 4218:  const TestResult& result = *test_info.result();
    %%%%%: 4218-block  0
call    0 never executed
    #####: 4219:  const std::string kTestsuite = "testcase";
    %%%%%: 4219-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4219-block  1
        -: 4220:
    #####: 4221:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4222:    return;
    %%%%%: 4222-block  0
        -: 4223:  }
        -: 4224:
    #####: 4225:  *stream << "    <testcase";
    %%%%%: 4225-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4226:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4226-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4226-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4226-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4226-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4226-block  4
call   12 never executed
    $$$$$: 4226-block  5
    $$$$$: 4226-block  6
    $$$$$: 4226-block  7
call   13 never executed
    $$$$$: 4226-block  8
    $$$$$: 4226-block  9
        -: 4227:
    #####: 4228:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4229:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4229-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4229-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4229-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4229-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4229-block  4
call   12 never executed
    $$$$$: 4229-block  5
    $$$$$: 4229-block  6
    $$$$$: 4229-block  7
call   13 never executed
    $$$$$: 4229-block  8
    $$$$$: 4229-block  9
        -: 4230:                       test_info.value_param());
        -: 4231:  }
    #####: 4232:  if (test_info.type_param() != nullptr) {
    %%%%%: 4232-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4233:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4233-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4233-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4233-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4233-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4233-block  4
call   12 never executed
    $$$$$: 4233-block  5
    $$$$$: 4233-block  6
    $$$$$: 4233-block  7
call   13 never executed
    $$$$$: 4233-block  8
    $$$$$: 4233-block  9
        -: 4234:                       test_info.type_param());
        -: 4235:  }
        -: 4236:
    #####: 4237:  OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4237-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4237-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4237-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4237-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4237-block  4
call   12 never executed
    $$$$$: 4237-block  5
    $$$$$: 4237-block  6
    $$$$$: 4237-block  7
call   13 never executed
    $$$$$: 4237-block  8
    $$$$$: 4237-block  9
    #####: 4238:  OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4238-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4238-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4238-block  2
call    6 never executed
    $$$$$: 4238-block  3
call    7 never executed
    $$$$$: 4238-block  4
    $$$$$: 4238-block  5
    #####: 4239:                     StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4239-block  0
call    5 never executed
    $$$$$: 4239-block  1
    $$$$$: 4239-block  2
    #####: 4240:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4241:    *stream << " />\n";
    %%%%%: 4241-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4242:    return;
    %%%%%: 4242-block  0
        -: 4243:  }
        -: 4244:
    #####: 4245:  OutputXmlAttribute(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4245-block  0
    %%%%%: 4245-block  1
    %%%%%: 4245-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4245-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4245-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4245-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4245-block  6
call   13 never executed
    $$$$$: 4245-block  7
    $$$$$: 4245-block  8
    $$$$$: 4245-block  9
call   14 never executed
    $$$$$: 4245-block 10
    $$$$$: 4245-block 11
    #####: 4246:                     test_info.should_run() ? "run" : "notrun");
    %%%%%: 4246-block  0
call    0 never executed
    #####: 4247:  OutputXmlAttribute(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4247-block  0
    %%%%%: 4247-block  1
    %%%%%: 4247-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4247-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4247-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4247-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4247-block  6
call   13 never executed
    $$$$$: 4247-block  7
    $$$$$: 4247-block  8
    $$$$$: 4247-block  9
call   14 never executed
    $$$$$: 4247-block 10
    $$$$$: 4247-block 11
    #####: 4248:                     test_info.should_run()
    %%%%%: 4248-block  0
call    0 never executed
    #####: 4249:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4249-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4249-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4249-block  2
    %%%%%: 4249-block  3
        -: 4250:                         : "suppressed");
    #####: 4251:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4251-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4251-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4251-block  2
call    6 never executed
    $$$$$: 4251-block  3
call    7 never executed
    $$$$$: 4251-block  4
    $$$$$: 4251-block  5
    #####: 4252:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4252-block  0
call    5 never executed
    $$$$$: 4252-block  1
    #####: 4253:  OutputXmlAttribute(
    %%%%%: 4253-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4253-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4253-block  2
call    6 never executed
    $$$$$: 4253-block  3
call    7 never executed
    $$$$$: 4253-block  4
    $$$$$: 4253-block  5
        -: 4254:      stream, kTestsuite, "timestamp",
    #####: 4255:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4255-block  0
call    5 never executed
    $$$$$: 4255-block  1
    #####: 4256:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
    %%%%%: 4256-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4256-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4256-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4256-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4256-block  4
call   11 never executed
    $$$$$: 4256-block  5
    $$$$$: 4256-block  6
    $$$$$: 4256-block  7
call   12 never executed
    $$$$$: 4256-block  8
    $$$$$: 4256-block  9
        -: 4257:
    #####: 4258:  OutputXmlTestResult(stream, result);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4259:}
    %%%%%: 4259-block  0
    %%%%%: 4259-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    $$$$$: 4259-block  2
call    3 never executed
        -: 4260:
function _ZN7testing8internal24XmlUnitTestResultPrinter19OutputXmlTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4261:void XmlUnitTestResultPrinter::OutputXmlTestResult(::std::ostream* stream,
        -: 4262:                                                   const TestResult& result) {
    #####: 4263:  int failures = 0;
    #####: 4264:  int skips = 0;
    #####: 4265:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4265-block  0
    %%%%%: 4265-block  1
    %%%%%: 4265-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4266:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4266-block  0
call    0 never executed
    #####: 4267:    if (part.failed()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4268:      if (++failures == 1 && skips == 0) {
    %%%%%: 4268-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4268-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4268-block  2
    %%%%%: 4268-block  3
    %%%%%: 4268-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4269:        *stream << ">\n";
    %%%%%: 4269-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4270:      }
        -: 4271:      const std::string location =
        -: 4272:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4273:                                                          part.line_number());
    %%%%%: 4273-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4274:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4274-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4274-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4274-block  2
call    7 never executed
    $$$$$: 4274-block  3
call    8 never executed
    $$$$$: 4274-block  4
    #####: 4275:      *stream << "      <failure message=\"" << EscapeXmlAttribute(summary)
    %%%%%: 4275-block  0
call    0 never executed
    $$$$$: 4275-block  1
call    1 never executed
    $$$$$: 4275-block  2
    #####: 4276:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4276-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4276-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4276-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4277:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4277-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4277-block  1
call    7 never executed
    $$$$$: 4277-block  2
call    8 never executed
    $$$$$: 4277-block  3
    #####: 4278:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4278-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4278-block  1
call    7 never executed
    $$$$$: 4278-block  2
call    8 never executed
    $$$$$: 4278-block  3
    #####: 4279:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4280:    } else if (part.skipped()) {
    %%%%%: 4280-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%: 4280-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4280-block  2
call    6 never executed
    $$$$$: 4280-block  3
call    7 never executed
    $$$$$: 4280-block  4
call    8 never executed
    #####: 4281:      if (++skips == 1 && failures == 0) {
    %%%%%: 4281-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4281-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4281-block  2
    %%%%%: 4281-block  3
    %%%%%: 4281-block  4
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4282:        *stream << ">\n";
    %%%%%: 4282-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4283:      }
        -: 4284:      const std::string location =
        -: 4285:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4286:                                                          part.line_number());
    %%%%%: 4286-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4287:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4287-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4287-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4287-block  2
call    7 never executed
    $$$$$: 4287-block  3
call    8 never executed
    $$$$$: 4287-block  4
        -: 4288:      *stream << "      <skipped message=\""
    #####: 4289:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4289-block  0
    %%%%%: 4289-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4289-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4289-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4289-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4289-block  5
call   16 never executed
call   17 never executed
    $$$$$: 4289-block  6
call   18 never executed
    $$$$$: 4289-block  7
call   19 never executed
    $$$$$: 4289-block  8
    $$$$$: 4289-block  9
    $$$$$: 4289-block 10
    #####: 4290:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4290-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4290-block  1
call    7 never executed
    $$$$$: 4290-block  2
call    8 never executed
    $$$$$: 4290-block  3
    #####: 4291:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4291-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4291-block  1
call    7 never executed
    $$$$$: 4291-block  2
call    8 never executed
    $$$$$: 4291-block  3
    #####: 4292:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4293:    }
    %%%%%: 4293-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 4293-block  1
call    3 never executed
    $$$$$: 4293-block  2
call    4 never executed
    $$$$$: 4293-block  3
call    5 never executed
        -: 4294:  }
        -: 4295:
    #####: 4296:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4296-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4296-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 4296-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 4296-block  3
    %%%%%: 4296-block  4
    %%%%%: 4296-block  5
branch  7 never executed (fallthrough)
branch  8 never executed
    #####: 4297:    *stream << " />\n";
    %%%%%: 4297-block  0
call    0 never executed
        -: 4298:  } else {
    #####: 4299:    if (failures == 0 && skips == 0) {
    %%%%%: 4299-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4299-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 4300:      *stream << ">\n";
    %%%%%: 4300-block  0
call    0 never executed
        -: 4301:    }
    #####: 4302:    OutputXmlTestProperties(stream, result);
    %%%%%: 4302-block  0
call    0 never executed
    #####: 4303:    *stream << "    </testcase>\n";
call    0 never executed
        -: 4304:  }
    #####: 4305:}
    %%%%%: 4305-block  0
        -: 4306:
        -: 4307:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4308:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
    %%%%%: 4308-block  0
        -: 4309:                                                 const TestSuite& test_suite) {
    #####: 4310:  const std::string kTestsuite = "testsuite";
    %%%%%: 4310-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4310-block  1
    #####: 4311:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4311-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4312:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4312-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4312-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4312-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4312-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4312-block  4
call   12 never executed
    $$$$$: 4312-block  5
    $$$$$: 4312-block  6
    $$$$$: 4312-block  7
call   13 never executed
    $$$$$: 4312-block  8
    $$$$$: 4312-block  9
    #####: 4313:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4313-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4313-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4313-block  2
call    6 never executed
    $$$$$: 4313-block  3
call    7 never executed
    $$$$$: 4313-block  4
    $$$$$: 4313-block  5
    #####: 4314:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4314-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4314-block  1
call    7 never executed
    $$$$$: 4314-block  2
    $$$$$: 4314-block  3
    #####: 4315:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4316:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4316-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4316-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4316-block  2
call    6 never executed
    $$$$$: 4316-block  3
call    7 never executed
    $$$$$: 4316-block  4
    $$$$$: 4316-block  5
    #####: 4317:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4317-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4317-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4317-block  2
call    7 never executed
    $$$$$: 4317-block  3
    $$$$$: 4317-block  4
    #####: 4318:    OutputXmlAttribute(
    %%%%%: 4318-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4318-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4318-block  2
call    6 never executed
    $$$$$: 4318-block  3
call    7 never executed
    $$$$$: 4318-block  4
    $$$$$: 4318-block  5
        -: 4319:        stream, kTestsuite, "disabled",
    #####: 4320:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4320-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4320-block  1
call    7 never executed
    $$$$$: 4320-block  2
    $$$$$: 4320-block  3
    #####: 4321:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4321-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4321-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4321-block  2
call    6 never executed
    $$$$$: 4321-block  3
call    7 never executed
    $$$$$: 4321-block  4
    $$$$$: 4321-block  5
    #####: 4322:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4322-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4322-block  1
call    7 never executed
    $$$$$: 4322-block  2
    $$$$$: 4322-block  3
        -: 4323:
    #####: 4324:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
    %%%%%: 4324-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4324-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4324-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4324-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4324-block  4
call   11 never executed
    $$$$$: 4324-block  5
    $$$$$: 4324-block  6
    $$$$$: 4324-block  7
call   12 never executed
    $$$$$: 4324-block  8
    $$$$$: 4324-block  9
        -: 4325:
    #####: 4326:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4326-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4326-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4326-block  2
call    6 never executed
    $$$$$: 4326-block  3
call    7 never executed
    $$$$$: 4326-block  4
    $$$$$: 4326-block  5
    #####: 4327:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4327-block  0
call    5 never executed
    $$$$$: 4327-block  1
    #####: 4328:    OutputXmlAttribute(
    %%%%%: 4328-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4328-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4328-block  2
call    6 never executed
    $$$$$: 4328-block  3
call    7 never executed
    $$$$$: 4328-block  4
    $$$$$: 4328-block  5
        -: 4329:        stream, kTestsuite, "timestamp",
    #####: 4330:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4330-block  0
call    5 never executed
    $$$$$: 4330-block  1
    #####: 4331:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4331-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4331-block  1
call    7 never executed
    $$$$$: 4331-block  2
call    8 never executed
    $$$$$: 4331-block  3
        -: 4332:  }
    #####: 4333:  *stream << ">\n";
    %%%%%: 4333-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4334:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4334-block  0
    %%%%%: 4334-block  1
    %%%%%: 4334-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4335:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4335-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4335-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4336:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4336-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4336-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4337:  }
    #####: 4338:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4338-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4338-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4338-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4339:}
    %%%%%: 4339-block  0
call    0 never executed
    $$$$$: 4339-block  1
call    1 never executed
        -: 4340:
        -: 4341:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4342:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
    %%%%%: 4342-block  0
        -: 4343:                                                const UnitTest& unit_test) {
    #####: 4344:  const std::string kTestsuites = "testsuites";
    %%%%%: 4344-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4344-block  1
        -: 4345:
    #####: 4346:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4347:  *stream << "<" << kTestsuites;
    %%%%%: 4347-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4347-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4348:
    #####: 4349:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4349-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4349-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4349-block  2
call    6 never executed
    $$$$$: 4349-block  3
call    7 never executed
    $$$$$: 4349-block  4
    $$$$$: 4349-block  5
    #####: 4350:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4350-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4350-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4350-block  2
call    7 never executed
    $$$$$: 4350-block  3
    $$$$$: 4350-block  4
    #####: 4351:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4351-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4351-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4351-block  2
call    6 never executed
    $$$$$: 4351-block  3
call    7 never executed
    $$$$$: 4351-block  4
    $$$$$: 4351-block  5
    #####: 4352:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4352-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4352-block  1
call    7 never executed
    $$$$$: 4352-block  2
    $$$$$: 4352-block  3
    #####: 4353:  OutputXmlAttribute(
    %%%%%: 4353-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4353-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4353-block  2
call    6 never executed
    $$$$$: 4353-block  3
call    7 never executed
    $$$$$: 4353-block  4
    $$$$$: 4353-block  5
        -: 4354:      stream, kTestsuites, "disabled",
    #####: 4355:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4355-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4355-block  1
call    7 never executed
    $$$$$: 4355-block  2
    $$$$$: 4355-block  3
    #####: 4356:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
    %%%%%: 4356-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4356-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4356-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4356-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4356-block  4
call   11 never executed
    $$$$$: 4356-block  5
    $$$$$: 4356-block  6
    $$$$$: 4356-block  7
call   12 never executed
    $$$$$: 4356-block  8
    $$$$$: 4356-block  9
    #####: 4357:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4357-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4357-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4357-block  2
call    6 never executed
    $$$$$: 4357-block  3
call    7 never executed
    $$$$$: 4357-block  4
    $$$$$: 4357-block  5
    #####: 4358:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4358-block  0
call    5 never executed
    $$$$$: 4358-block  1
    #####: 4359:  OutputXmlAttribute(
    %%%%%: 4359-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4359-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4359-block  2
call    6 never executed
    $$$$$: 4359-block  3
call    7 never executed
    $$$$$: 4359-block  4
    $$$$$: 4359-block  5
        -: 4360:      stream, kTestsuites, "timestamp",
    #####: 4361:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4361-block  0
call    5 never executed
    $$$$$: 4361-block  1
        -: 4362:
    #####: 4363:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4364:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4364-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4364-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4364-block  2
call    6 never executed
    $$$$$: 4364-block  3
call    7 never executed
    $$$$$: 4364-block  4
    $$$$$: 4364-block  5
    #####: 4365:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4365-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4365-block  1
call    5 never executed
    $$$$$: 4365-block  2
    $$$$$: 4365-block  3
        -: 4366:  }
    #####: 4367:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4367-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4367-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4367-block  2
call    7 never executed
    $$$$$: 4367-block  3
call    8 never executed
    $$$$$: 4367-block  4
        -: 4368:
    #####: 4369:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4369-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4369-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4369-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4369-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4369-block  4
call   11 never executed
    $$$$$: 4369-block  5
    $$$$$: 4369-block  6
    $$$$$: 4369-block  7
call   12 never executed
    $$$$$: 4369-block  8
    $$$$$: 4369-block  9
    #####: 4370:  *stream << ">\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4371:
    #####: 4372:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4372-block  0
    %%%%%: 4372-block  1
    %%%%%: 4372-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4373:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4373-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4373-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4373-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4374:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4374-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4374-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4375:  }
        -: 4376:
        -: 4377:  // If there was a test failure outside of one of the test suites (like in a
        -: 4378:  // test environment) include that in the output.
    #####: 4379:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4379-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4379-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4380:    OutputXmlTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4380-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4381:  }
        -: 4382:
    #####: 4383:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4383-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4383-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4383-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4384:}
    %%%%%: 4384-block  0
call    0 never executed
    $$$$$: 4384-block  1
call    1 never executed
        -: 4385:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4386:void XmlUnitTestResultPrinter::PrintXmlTestsList(
    %%%%%: 4386-block  0
        -: 4387:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4388:  const std::string kTestsuites = "testsuites";
    %%%%%: 4388-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4388-block  1
        -: 4389:
    #####: 4390:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4391:  *stream << "<" << kTestsuites;
    %%%%%: 4391-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4391-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4392:
    #####: 4393:  int total_tests = 0;
    #####: 4394:  for (auto test_suite : test_suites) {
    %%%%%: 4394-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4394-block  1
call    2 never executed
    %%%%%: 4394-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4395:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4396:  }
    #####: 4397:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4397-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4397-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4397-block  2
call    6 never executed
    $$$$$: 4397-block  3
call    7 never executed
    $$$$$: 4397-block  4
    $$$$$: 4397-block  5
    #####: 4398:                     StreamableToString(total_tests));
    %%%%%: 4398-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4398-block  1
call    4 never executed
    $$$$$: 4398-block  2
    #####: 4399:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4399-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4399-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4399-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4399-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4399-block  4
call   11 never executed
    $$$$$: 4399-block  5
    $$$$$: 4399-block  6
    $$$$$: 4399-block  7
call   12 never executed
    $$$$$: 4399-block  8
    $$$$$: 4399-block  9
    #####: 4400:  *stream << ">\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4401:
    #####: 4402:  for (auto test_suite : test_suites) {
    %%%%%: 4402-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4402-block  1
call    2 never executed
    %%%%%: 4402-block  2
call    3 never executed
    %%%%%: 4402-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 4403:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4404:  }
    #####: 4405:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4405-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4405-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4405-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4406:}
    %%%%%: 4406-block  0
call    0 never executed
    $$$$$: 4406-block  1
call    1 never executed
        -: 4407:
        -: 4408:// Produces a string representing the test properties in a result as space
        -: 4409:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4410:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4411:    const TestResult& result) {
    #####: 4412:  Message attributes;
    %%%%%: 4412-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4413:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4413-block  0
    %%%%%: 4413-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4414:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4414-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4415:    attributes << " " << property.key() << "="
    %%%%%: 4415-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4415-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4415-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    $$$$$: 4415-block  3
    #####: 4416:               << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4416-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4416-block  1
    %%%%%: 4416-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4416-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4416-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4416-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4416-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4416-block  7
call   18 never executed
    $$$$$: 4416-block  8
call   19 never executed
    $$$$$: 4416-block  9
    $$$$$: 4416-block 10
    $$$$$: 4416-block 11
        -: 4417:  }
    #####: 4418:  return attributes.GetString();
    %%%%%: 4418-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4418-block  1
    #####: 4419:}
    %%%%%: 4419-block  0
call    0 never executed
    $$$$$: 4419-block  1
call    1 never executed
        -: 4420:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4421:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
    %%%%%: 4421-block  0
        -: 4422:    std::ostream* stream, const TestResult& result) {
    #####: 4423:  const std::string kProperties = "properties";
    %%%%%: 4423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4423-block  1
    #####: 4424:  const std::string kProperty = "property";
    %%%%%: 4424-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4424-block  1
        -: 4425:
    #####: 4426:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4427:    return;
    %%%%%: 4427-block  0
        -: 4428:  }
        -: 4429:
    #####: 4430:  *stream << "      <" << kProperties << ">\n";
    %%%%%: 4430-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4430-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4430-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4431:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4431-block  0
    %%%%%: 4431-block  1
    %%%%%: 4431-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4432:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4432-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4433:    *stream << "        <" << kProperty;
    %%%%%: 4433-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4433-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4434:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4434-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4434-block  1
    %%%%%: 4434-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4434-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4434-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4434-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4434-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4434-block  7
call   18 never executed
    $$$$$: 4434-block  8
call   19 never executed
    $$$$$: 4434-block  9
    $$$$$: 4434-block 10
    $$$$$: 4434-block 11
    #####: 4435:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4435-block  0
    %%%%%: 4435-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4435-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4435-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4435-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4435-block  5
call   16 never executed
call   17 never executed
    $$$$$: 4435-block  6
call   18 never executed
    $$$$$: 4435-block  7
call   19 never executed
    $$$$$: 4435-block  8
    $$$$$: 4435-block  9
    $$$$$: 4435-block 10
    #####: 4436:    *stream << "/>\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4437:  }
    #####: 4438:  *stream << "      </" << kProperties << ">\n";
    %%%%%: 4438-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4438-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4438-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 4439:}
    %%%%%: 4439-block  0
    %%%%%: 4439-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4439-block  2
    %%%%%: 4439-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4439-block  4
call    6 never executed
    $$$$$: 4439-block  5
call    7 never executed
        -: 4440:
        -: 4441:// End XmlUnitTestResultPrinter
        -: 4442:
        -: 4443:// This class generates an JSON output file.
        -: 4444:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4445: public:
        -: 4446:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4447:
        -: 4448:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4449:
        -: 4450:  // Prints an JSON summary of all unit tests.
        -: 4451:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4452:                                const std::vector<TestSuite*>& test_suites);
        -: 4453:
        -: 4454: private:
        -: 4455:  // Returns an JSON-escaped copy of the input string str.
        -: 4456:  static std::string EscapeJson(const std::string& str);
        -: 4457:
        -: 4458:  //// Verifies that the given attribute belongs to the given element and
        -: 4459:  //// streams the attribute as JSON.
        -: 4460:  static void OutputJsonKey(std::ostream* stream,
        -: 4461:                            const std::string& element_name,
        -: 4462:                            const std::string& name, const std::string& value,
        -: 4463:                            const std::string& indent, bool comma = true);
        -: 4464:  static void OutputJsonKey(std::ostream* stream,
        -: 4465:                            const std::string& element_name,
        -: 4466:                            const std::string& name, int value,
        -: 4467:                            const std::string& indent, bool comma = true);
        -: 4468:
        -: 4469:  // Streams a test suite JSON stanza containing the given test result.
        -: 4470:  //
        -: 4471:  // Requires: result.Failed()
        -: 4472:  static void OutputJsonTestSuiteForTestResult(::std::ostream* stream,
        -: 4473:                                               const TestResult& result);
        -: 4474:
        -: 4475:  // Streams a JSON representation of a TestResult object.
        -: 4476:  static void OutputJsonTestResult(::std::ostream* stream,
        -: 4477:                                   const TestResult& result);
        -: 4478:
        -: 4479:  // Streams a JSON representation of a TestInfo object.
        -: 4480:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4481:                                 const char* test_suite_name,
        -: 4482:                                 const TestInfo& test_info);
        -: 4483:
        -: 4484:  // Prints a JSON representation of a TestSuite object
        -: 4485:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4486:                                 const TestSuite& test_suite);
        -: 4487:
        -: 4488:  // Prints a JSON summary of unit_test to output stream out.
        -: 4489:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4490:                                const UnitTest& unit_test);
        -: 4491:
        -: 4492:  // Produces a string representing the test properties in a result as
        -: 4493:  // a JSON dictionary.
        -: 4494:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4495:                                          const std::string& indent);
        -: 4496:
        -: 4497:  // The output file.
        -: 4498:  const std::string output_file_;
        -: 4499:
        -: 4500:  JsonUnitTestResultPrinter(const JsonUnitTestResultPrinter&) = delete;
        -: 4501:  JsonUnitTestResultPrinter& operator=(const JsonUnitTestResultPrinter&) =
        -: 4502:      delete;
        -: 4503:};
        -: 4504:
        -: 4505:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4506:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4507:    : output_file_(output_file) {
    %%%%%: 4507-block  0
call    0 never executed
    %%%%%: 4507-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 4507-block  2
    #####: 4508:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4509:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4509-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4509-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4509-block  2
call    7 never executed
    $$$$$: 4509-block  3
call    8 never executed
    $$$$$: 4509-block  4
        -: 4510:  }
    #####: 4511:}
    %%%%%: 4511-block  0
    $$$$$: 4511-block  1
call    0 never executed
    $$$$$: 4511-block  2
call    1 never executed
        -: 4512:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4513:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4514:                                                   int /*iteration*/) {
    #####: 4515:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4515-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4516:  std::stringstream stream;
    %%%%%: 4516-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4517:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4517-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4518:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4518-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4518-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 4518-block  2
    #####: 4519:  fclose(jsonout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4520:}
    %%%%%: 4520-block  0
call    0 never executed
    $$$$$: 4520-block  1
call    1 never executed
        -: 4521:
        -: 4522:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4523:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4524:  Message m;
    %%%%%: 4524-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4525:
    #####: 4526:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4526-block  0
    %%%%%: 4526-block  1
    %%%%%: 4526-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4527:    const char ch = str[i];
    %%%%%: 4527-block  0
call    0 never executed
    #####: 4528:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4529:      case '\\':
        -: 4530:      case '"':
        -: 4531:      case '/':
    #####: 4532:        m << '\\' << ch;
    %%%%%: 4532-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4532-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 4532-block  2
    #####: 4533:        break;
    %%%%%: 4533-block  0
    #####: 4534:      case '\b':
    #####: 4535:        m << "\\b";
    %%%%%: 4535-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4536:        break;
    %%%%%: 4536-block  0
    #####: 4537:      case '\t':
    #####: 4538:        m << "\\t";
    %%%%%: 4538-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4539:        break;
    %%%%%: 4539-block  0
    #####: 4540:      case '\n':
    #####: 4541:        m << "\\n";
    %%%%%: 4541-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4542:        break;
    %%%%%: 4542-block  0
    #####: 4543:      case '\f':
    #####: 4544:        m << "\\f";
    %%%%%: 4544-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4545:        break;
    %%%%%: 4545-block  0
    #####: 4546:      case '\r':
    #####: 4547:        m << "\\r";
    %%%%%: 4547-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4548:        break;
    %%%%%: 4548-block  0
    #####: 4549:      default:
    #####: 4550:        if (ch < ' ') {
    %%%%%: 4550-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4551:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4551-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4551-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4551-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4551-block  3
call    9 never executed
    $$$$$: 4551-block  4
call   10 never executed
    $$$$$: 4551-block  5
        -: 4552:        } else {
    #####: 4553:          m << ch;
    %%%%%: 4553-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4554:        }
    #####: 4555:        break;
    %%%%%: 4555-block  0
        -: 4556:    }
        -: 4557:  }
        -: 4558:
    #####: 4559:  return m.GetString();
    %%%%%: 4559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4559-block  1
    #####: 4560:}
    %%%%%: 4560-block  0
call    0 never executed
    $$$$$: 4560-block  1
call    1 never executed
        -: 4561:
        -: 4562:// The following routines generate an JSON representation of a UnitTest
        -: 4563:// object.
        -: 4564:
        -: 4565:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEx called 0 returned 0% blocks executed 0%
    #####: 4566:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4567:  ::std::stringstream ss;
    %%%%%: 4567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4568:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4568-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4568-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 4569:  return ss.str();
    %%%%%: 4569-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4569-block  1
    #####: 4570:}
    %%%%%: 4570-block  0
call    0 never executed
    $$$$$: 4570-block  1
call    1 never executed
        -: 4571:
        -: 4572:// Converts the given epoch time in milliseconds to a date string in the
        -: 4573:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339Ex called 0 returned 0% blocks executed 0%
    #####: 4574:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4575:  struct tm time_struct;
    #####: 4576:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4576-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4576-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 4577:    return "";
    %%%%%: 4577-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4577-block  1
        -: 4578:  // YYYY-MM-DDThh:mm:ss
    #####: 4579:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4579-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4579-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4579-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4579-block  3
call   12 never executed
    $$$$$: 4579-block  4
call   13 never executed
    $$$$$: 4579-block  5
call   14 never executed
    $$$$$: 4579-block  6
    $$$$$: 4579-block  7
    $$$$$: 4579-block  8
    $$$$$: 4579-block  9
    #####: 4580:         String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4580-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4580-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4580-block  3
call   12 never executed
    $$$$$: 4580-block  4
call   13 never executed
    $$$$$: 4580-block  5
call   14 never executed
    $$$$$: 4580-block  6
    $$$$$: 4580-block  7
    $$$$$: 4580-block  8
    #####: 4581:         String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4581-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4581-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4581-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4581-block  3
call   12 never executed
    $$$$$: 4581-block  4
call   13 never executed
    $$$$$: 4581-block  5
call   14 never executed
    $$$$$: 4581-block  6
    $$$$$: 4581-block  7
    $$$$$: 4581-block  8
    #####: 4582:         String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4582-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4582-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4582-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4582-block  3
call   12 never executed
    $$$$$: 4582-block  4
call   13 never executed
    $$$$$: 4582-block  5
call   14 never executed
    $$$$$: 4582-block  6
    $$$$$: 4582-block  7
    $$$$$: 4582-block  8
    #####: 4583:         String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4583-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4583-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4583-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4583-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4583-block  4
call   12 never executed
    $$$$$: 4583-block  5
call   13 never executed
    $$$$$: 4583-block  6
call   14 never executed
    $$$$$: 4583-block  7
    $$$$$: 4583-block  8
    $$$$$: 4583-block  9
    #####: 4584:         String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4584-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4584-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
call    6 never executed
    $$$$$: 4584-block  2
call    7 never executed
    $$$$$: 4584-block  3
        -: 4585:}
        -: 4586:
function _ZN7testing8internalL6IndentEy called 0 returned 0% blocks executed 0%
    #####: 4587:static inline std::string Indent(size_t width) {
    %%%%%: 4587-block  0
    #####: 4588:  return std::string(width, ' ');
    %%%%%: 4588-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4588-block  1
        -: 4589:}
        -: 4590:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4591:void JsonUnitTestResultPrinter::OutputJsonKey(std::ostream* stream,
        -: 4592:                                              const std::string& element_name,
        -: 4593:                                              const std::string& name,
        -: 4594:                                              const std::string& value,
        -: 4595:                                              const std::string& indent,
        -: 4596:                                              bool comma) {
        -: 4597:  const std::vector<std::string>& allowed_names =
    #####: 4598:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4599:
    #####: 4600:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4600-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4600-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4600-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4600-block  3
call   13 never executed
    %%%%%: 4600-block  4
call   14 never executed
    $$$$$: 4600-block  5
    $$$$$: 4600-block  6
    $$$$$: 4600-block  7
call   15 never executed
    $$$$$: 4600-block  8
        -: 4601:               allowed_names.end())
        -: 4602:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4603:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4603-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4603-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4603-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4603-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4603-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4604:
    #####: 4605:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4605-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4605-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4605-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4605-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4605-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4605-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4605-block  6
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4605-block  7
call   21 never executed
    $$$$$: 4605-block  8
call   22 never executed
    $$$$$: 4605-block  9
    #####: 4606:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4606-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4607:}
    %%%%%: 4607-block  0
call    0 never executed
    $$$$$: 4607-block  1
call    1 never executed
        -: 4608:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4609:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4610:    std::ostream* stream, const std::string& element_name,
        -: 4611:    const std::string& name, int value, const std::string& indent, bool comma) {
        -: 4612:  const std::vector<std::string>& allowed_names =
    #####: 4613:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4613-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4614:
    #####: 4615:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4615-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4615-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 4615-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4615-block  3
call   13 never executed
    %%%%%: 4615-block  4
call   14 never executed
    $$$$$: 4615-block  5
    $$$$$: 4615-block  6
    $$$$$: 4615-block  7
call   15 never executed
    $$$$$: 4615-block  8
        -: 4616:               allowed_names.end())
        -: 4617:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4618:      << "\".";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4618-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4618-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4618-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4618-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4618-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
        -: 4619:
    #####: 4620:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4620-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4620-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4620-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4620-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4620-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4620-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4620-block  6
call   18 never executed
    $$$$$: 4620-block  7
call   19 never executed
    $$$$$: 4620-block  8
    #####: 4621:  if (comma) *stream << ",\n";
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4621-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4622:}
    %%%%%: 4622-block  0
call    0 never executed
    $$$$$: 4622-block  1
call    1 never executed
        -: 4623:
        -: 4624:// Streams a test suite JSON stanza containing the given test result.
function _ZN7testing8internal25JsonUnitTestResultPrinter32OutputJsonTestSuiteForTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4625:void JsonUnitTestResultPrinter::OutputJsonTestSuiteForTestResult(
        -: 4626:    ::std::ostream* stream, const TestResult& result) {
        -: 4627:  // Output the boilerplate for a new test suite.
    #####: 4628:  *stream << Indent(4) << "{\n";
    %%%%%: 4628-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4628-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4628-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4628-block  3
call    9 never executed
    $$$$$: 4628-block  4
call   10 never executed
    $$$$$: 4628-block  5
call   11 never executed
    #####: 4629:  OutputJsonKey(stream, "testsuite", "name", "NonTestSuiteFailure", Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4629-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4629-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4629-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4629-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4629-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4629-block  5
call   19 never executed
    $$$$$: 4629-block  6
    $$$$$: 4629-block  7
    $$$$$: 4629-block  8
call   20 never executed
    $$$$$: 4629-block  9
    $$$$$: 4629-block 10
    $$$$$: 4629-block 11
call   21 never executed
    $$$$$: 4629-block 12
    $$$$$: 4629-block 13
    $$$$$: 4629-block 14
call   22 never executed
    $$$$$: 4629-block 15
call   23 never executed
    #####: 4630:  OutputJsonKey(stream, "testsuite", "tests", 1, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4630-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4630-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4630-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4630-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4630-block  4
call   15 never executed
    $$$$$: 4630-block  5
    $$$$$: 4630-block  6
    $$$$$: 4630-block  7
call   16 never executed
    $$$$$: 4630-block  8
    $$$$$: 4630-block  9
    $$$$$: 4630-block 10
call   17 never executed
    $$$$$: 4630-block 11
call   18 never executed
    #####: 4631:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4632:    OutputJsonKey(stream, "testsuite", "failures", 1, Indent(6));
    %%%%%: 4632-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4632-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4632-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4632-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4632-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4632-block  5
call   15 never executed
    $$$$$: 4632-block  6
    $$$$$: 4632-block  7
    $$$$$: 4632-block  8
call   16 never executed
    $$$$$: 4632-block  9
    $$$$$: 4632-block 10
    $$$$$: 4632-block 11
call   17 never executed
    $$$$$: 4632-block 12
call   18 never executed
    #####: 4633:    OutputJsonKey(stream, "testsuite", "disabled", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4633-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4633-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4633-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4633-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4633-block  4
call   15 never executed
    $$$$$: 4633-block  5
    $$$$$: 4633-block  6
    $$$$$: 4633-block  7
call   16 never executed
    $$$$$: 4633-block  8
    $$$$$: 4633-block  9
    $$$$$: 4633-block 10
call   17 never executed
    $$$$$: 4633-block 11
call   18 never executed
    #####: 4634:    OutputJsonKey(stream, "testsuite", "skipped", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4634-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4634-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4634-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4634-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4634-block  4
call   15 never executed
    $$$$$: 4634-block  5
    $$$$$: 4634-block  6
    $$$$$: 4634-block  7
call   16 never executed
    $$$$$: 4634-block  8
    $$$$$: 4634-block  9
    $$$$$: 4634-block 10
call   17 never executed
    $$$$$: 4634-block 11
call   18 never executed
    #####: 4635:    OutputJsonKey(stream, "testsuite", "errors", 0, Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4635-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4635-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4635-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4635-block  3
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4635-block  4
call   15 never executed
    $$$$$: 4635-block  5
    $$$$$: 4635-block  6
    $$$$$: 4635-block  7
call   16 never executed
    $$$$$: 4635-block  8
    $$$$$: 4635-block  9
    $$$$$: 4635-block 10
call   17 never executed
    $$$$$: 4635-block 11
call   18 never executed
    #####: 4636:    OutputJsonKey(stream, "testsuite", "time",
    %%%%%: 4636-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4636-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4636-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4636-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4636-block  4
call   11 never executed
    $$$$$: 4636-block  5
    $$$$$: 4636-block  6
    $$$$$: 4636-block  7
call   12 never executed
    $$$$$: 4636-block  8
    $$$$$: 4636-block  9
    #####: 4637:                  FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4637-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4637-block  1
call    5 never executed
    $$$$$: 4637-block  2
    #####: 4638:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4638-block  0
call    4 never executed
    $$$$$: 4638-block  1
call    5 never executed
    #####: 4639:    OutputJsonKey(stream, "testsuite", "timestamp",
    %%%%%: 4639-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4639-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4639-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4639-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4639-block  4
call   11 never executed
    $$$$$: 4639-block  5
    $$$$$: 4639-block  6
    $$$$$: 4639-block  7
call   12 never executed
    $$$$$: 4639-block  8
    $$$$$: 4639-block  9
    #####: 4640:                  FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4640-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4640-block  1
call    5 never executed
    $$$$$: 4640-block  2
    #####: 4641:                  Indent(6));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4641-block  0
call    4 never executed
    $$$$$: 4641-block  1
call    5 never executed
        -: 4642:  }
    #####: 4643:  *stream << Indent(6) << "\"testsuite\": [\n";
    %%%%%: 4643-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4643-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4643-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4643-block  3
call    9 never executed
    $$$$$: 4643-block  4
call   10 never executed
    $$$$$: 4643-block  5
call   11 never executed
        -: 4644:
        -: 4645:  // Output the boilerplate for a new test case.
    #####: 4646:  *stream << Indent(8) << "{\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4646-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4646-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4646-block  2
call    9 never executed
    $$$$$: 4646-block  3
call   10 never executed
    $$$$$: 4646-block  4
call   11 never executed
    #####: 4647:  OutputJsonKey(stream, "testcase", "name", "", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4647-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4647-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4647-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4647-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4647-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4647-block  5
call   19 never executed
    $$$$$: 4647-block  6
    $$$$$: 4647-block  7
    $$$$$: 4647-block  8
call   20 never executed
    $$$$$: 4647-block  9
    $$$$$: 4647-block 10
    $$$$$: 4647-block 11
call   21 never executed
    $$$$$: 4647-block 12
    $$$$$: 4647-block 13
    $$$$$: 4647-block 14
call   22 never executed
    $$$$$: 4647-block 15
call   23 never executed
    #####: 4648:  OutputJsonKey(stream, "testcase", "status", "RUN", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4648-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4648-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4648-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4648-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4648-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4648-block  5
call   19 never executed
    $$$$$: 4648-block  6
    $$$$$: 4648-block  7
    $$$$$: 4648-block  8
call   20 never executed
    $$$$$: 4648-block  9
    $$$$$: 4648-block 10
    $$$$$: 4648-block 11
call   21 never executed
    $$$$$: 4648-block 12
    $$$$$: 4648-block 13
    $$$$$: 4648-block 14
call   22 never executed
    $$$$$: 4648-block 15
call   23 never executed
    #####: 4649:  OutputJsonKey(stream, "testcase", "result", "COMPLETED", Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4649-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4649-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4649-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4649-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4649-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4649-block  5
call   19 never executed
    $$$$$: 4649-block  6
    $$$$$: 4649-block  7
    $$$$$: 4649-block  8
call   20 never executed
    $$$$$: 4649-block  9
    $$$$$: 4649-block 10
    $$$$$: 4649-block 11
call   21 never executed
    $$$$$: 4649-block 12
    $$$$$: 4649-block 13
    $$$$$: 4649-block 14
call   22 never executed
    $$$$$: 4649-block 15
call   23 never executed
    #####: 4650:  OutputJsonKey(stream, "testcase", "timestamp",
    %%%%%: 4650-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4650-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4650-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4650-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4650-block  4
call   11 never executed
    $$$$$: 4650-block  5
    $$$$$: 4650-block  6
    $$$$$: 4650-block  7
call   12 never executed
    $$$$$: 4650-block  8
    $$$$$: 4650-block  9
    #####: 4651:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    %%%%%: 4651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4651-block  1
call    5 never executed
    $$$$$: 4651-block  2
    #####: 4652:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4652-block  0
call    4 never executed
    $$$$$: 4652-block  1
call    5 never executed
    #####: 4653:  OutputJsonKey(stream, "testcase", "time",
    %%%%%: 4653-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4653-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4653-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4653-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4653-block  4
call   11 never executed
    $$$$$: 4653-block  5
    $$$$$: 4653-block  6
    $$$$$: 4653-block  7
call   12 never executed
    $$$$$: 4653-block  8
    $$$$$: 4653-block  9
    #####: 4654:                FormatTimeInMillisAsDuration(result.elapsed_time()),
    %%%%%: 4654-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4654-block  1
call    5 never executed
    $$$$$: 4654-block  2
    #####: 4655:                Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 4655-block  0
call    4 never executed
    $$$$$: 4655-block  1
call    5 never executed
    #####: 4656:  OutputJsonKey(stream, "testcase", "classname", "", Indent(10), false);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4656-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4656-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4656-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4656-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4656-block  4
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
    $$$$$: 4656-block  5
call   19 never executed
    $$$$$: 4656-block  6
    $$$$$: 4656-block  7
    $$$$$: 4656-block  8
call   20 never executed
    $$$$$: 4656-block  9
    $$$$$: 4656-block 10
    $$$$$: 4656-block 11
call   21 never executed
    $$$$$: 4656-block 12
    $$$$$: 4656-block 13
    $$$$$: 4656-block 14
call   22 never executed
    $$$$$: 4656-block 15
call   23 never executed
    #####: 4657:  *stream << TestPropertiesAsJson(result, Indent(10));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4657-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4657-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4657-block  2
call    9 never executed
call   10 never executed
    $$$$$: 4657-block  3
call   11 never executed
    $$$$$: 4657-block  4
call   12 never executed
    $$$$$: 4657-block  5
    $$$$$: 4657-block  6
call   13 never executed
        -: 4658:
        -: 4659:  // Output the actual test result.
    #####: 4660:  OutputJsonTestResult(stream, result);
call    0 never executed
        -: 4661:
        -: 4662:  // Finish the test suite.
    #####: 4663:  *stream << "\n" << Indent(6) << "]\n" << Indent(4) << "}";
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4663-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4663-block  1
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4663-block  2
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4663-block  3
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4663-block  4
call   16 never executed
branch 17 never executed (fallthrough)
branch 18 never executed (throw)
    %%%%%: 4663-block  5
call   19 never executed
call   20 never executed
    $$$$$: 4663-block  6
call   21 never executed
    $$$$$: 4663-block  7
    $$$$$: 4663-block  8
call   22 never executed
    #####: 4664:}
        -: 4665:
        -: 4666:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4667:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4668:                                                   const char* test_suite_name,
        -: 4669:                                                   const TestInfo& test_info) {
    #####: 4670:  const TestResult& result = *test_info.result();
    %%%%%: 4670-block  0
call    0 never executed
    #####: 4671:  const std::string kTestsuite = "testcase";
    %%%%%: 4671-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4671-block  1
    #####: 4672:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4673:
    #####: 4674:  *stream << Indent(8) << "{\n";
    %%%%%: 4674-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4674-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4674-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4674-block  3
call    9 never executed
    $$$$$: 4674-block  4
call   10 never executed
    $$$$$: 4674-block  5
    #####: 4675:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
    %%%%%: 4675-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4675-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4675-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4675-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4675-block  4
call   12 never executed
    $$$$$: 4675-block  5
    $$$$$: 4675-block  6
    $$$$$: 4675-block  7
call   13 never executed
    $$$$$: 4675-block  8
    $$$$$: 4675-block  9
        -: 4676:
    #####: 4677:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4678:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4678-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4678-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4678-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4678-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4678-block  4
call   12 never executed
    $$$$$: 4678-block  5
    $$$$$: 4678-block  6
    $$$$$: 4678-block  7
call   13 never executed
    $$$$$: 4678-block  8
    $$$$$: 4678-block  9
        -: 4679:                  kIndent);
        -: 4680:  }
    #####: 4681:  if (test_info.type_param() != nullptr) {
    %%%%%: 4681-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4682:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4682-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4682-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4682-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4682-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4682-block  4
call   12 never executed
    $$$$$: 4682-block  5
    $$$$$: 4682-block  6
    $$$$$: 4682-block  7
call   13 never executed
    $$$$$: 4682-block  8
    $$$$$: 4682-block  9
        -: 4683:                  kIndent);
        -: 4684:  }
        -: 4685:
    #####: 4686:  OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4686-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4686-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4686-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4686-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4686-block  4
call   12 never executed
    $$$$$: 4686-block  5
    $$$$$: 4686-block  6
    $$$$$: 4686-block  7
call   13 never executed
    $$$$$: 4686-block  8
    $$$$$: 4686-block  9
    #####: 4687:  OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
    %%%%%: 4687-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4687-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4687-block  2
call    7 never executed
    $$$$$: 4687-block  3
call    8 never executed
    $$$$$: 4687-block  4
    $$$$$: 4687-block  5
    #####: 4688:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4689:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4689-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4689-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4689-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4689-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4689-block  4
call   12 never executed
    $$$$$: 4689-block  5
call   13 never executed
    $$$$$: 4689-block  6
    #####: 4690:    return;
        -: 4691:  } else {
    #####: 4692:    *stream << ",\n";
    %%%%%: 4692-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4693:  }
        -: 4694:
    #####: 4695:  OutputJsonKey(stream, kTestsuite, "status",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4695-block  0
    %%%%%: 4695-block  1
    %%%%%: 4695-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4695-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4695-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4695-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4695-block  6
call   13 never executed
    $$$$$: 4695-block  7
    $$$$$: 4695-block  8
    $$$$$: 4695-block  9
call   14 never executed
    $$$$$: 4695-block 10
    $$$$$: 4695-block 11
    #####: 4696:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
    %%%%%: 4696-block  0
call    0 never executed
    #####: 4697:  OutputJsonKey(stream, kTestsuite, "result",
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4697-block  0
    %%%%%: 4697-block  1
    %%%%%: 4697-block  2
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4697-block  3
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4697-block  4
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 4697-block  5
call   11 never executed
call   12 never executed
    $$$$$: 4697-block  6
call   13 never executed
    $$$$$: 4697-block  7
    $$$$$: 4697-block  8
    $$$$$: 4697-block  9
call   14 never executed
    $$$$$: 4697-block 10
    $$$$$: 4697-block 11
    #####: 4698:                test_info.should_run()
    %%%%%: 4698-block  0
call    0 never executed
    #####: 4699:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4699-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4699-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 4699-block  2
    %%%%%: 4699-block  3
        -: 4700:                    : "SUPPRESSED",
        -: 4701:                kIndent);
    #####: 4702:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4702-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4702-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4702-block  2
call    6 never executed
    $$$$$: 4702-block  3
call    7 never executed
    $$$$$: 4702-block  4
    $$$$$: 4702-block  5
    #####: 4703:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4703-block  0
call    5 never executed
    $$$$$: 4703-block  1
        -: 4704:                kIndent);
    #####: 4705:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4705-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4705-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4705-block  2
call    6 never executed
    $$$$$: 4705-block  3
call    7 never executed
    $$$$$: 4705-block  4
    $$$$$: 4705-block  5
    #####: 4706:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4706-block  0
call    5 never executed
    $$$$$: 4706-block  1
    #####: 4707:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
    %%%%%: 4707-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4707-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4707-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4707-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4707-block  4
call   11 never executed
    $$$$$: 4707-block  5
    $$$$$: 4707-block  6
    $$$$$: 4707-block  7
call   12 never executed
    $$$$$: 4707-block  8
    $$$$$: 4707-block  9
        -: 4708:                false);
    #####: 4709:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4709-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4709-block  1
call    6 never executed
    $$$$$: 4709-block  2
call    7 never executed
    $$$$$: 4709-block  3
        -: 4710:
    #####: 4711:  OutputJsonTestResult(stream, result);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4712:}
    %%%%%: 4712-block  0
    %%%%%: 4712-block  1
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 4712-block  2
    %%%%%: 4712-block  3
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    $$$$$: 4712-block  4
call    6 never executed
    $$$$$: 4712-block  5
call    7 never executed
        -: 4713:
function _ZN7testing8internal25JsonUnitTestResultPrinter20OutputJsonTestResultEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4714:void JsonUnitTestResultPrinter::OutputJsonTestResult(::std::ostream* stream,
        -: 4715:                                                     const TestResult& result) {
    #####: 4716:  const std::string kIndent = Indent(10);
    %%%%%: 4716-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4717:
    #####: 4718:  int failures = 0;
    #####: 4719:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4719-block  0
    %%%%%: 4719-block  1
    %%%%%: 4719-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4720:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4720-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4721:    if (part.failed()) {
    %%%%%: 4721-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 4722:      *stream << ",\n";
    %%%%%: 4722-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4723:      if (++failures == 1) {
    %%%%%: 4723-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 4724:        *stream << kIndent << "\""
        -: 4725:                << "failures"
    #####: 4726:                << "\": [\n";
    %%%%%: 4726-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4726-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4726-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4726-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4727:      }
        -: 4728:      const std::string location =
        -: 4729:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4730:                                                          part.line_number());
    %%%%%: 4730-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    #####: 4731:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4731-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4731-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4731-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4731-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4731-block  4
call   12 never executed
    $$$$$: 4731-block  5
call   13 never executed
    $$$$$: 4731-block  6
    $$$$$: 4731-block  7
        -: 4732:      *stream << kIndent << "  {\n"
        -: 4733:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4734:              << kIndent << "    \"type\": \"\"\n"
    #####: 4735:              << kIndent << "  }";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4735-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4735-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4735-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4735-block  3
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4735-block  4
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4735-block  5
call   18 never executed
branch 19 never executed (fallthrough)
branch 20 never executed (throw)
    %%%%%: 4735-block  6
call   21 never executed
branch 22 never executed (fallthrough)
branch 23 never executed (throw)
    %%%%%: 4735-block  7
call   24 never executed
branch 25 never executed (fallthrough)
branch 26 never executed (throw)
    %%%%%: 4735-block  8
call   27 never executed
branch 28 never executed (fallthrough)
branch 29 never executed (throw)
    #####: 4736:    }
    %%%%%: 4736-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4736-block  1
call    2 never executed
    $$$$$: 4736-block  2
call    3 never executed
        -: 4737:  }
        -: 4738:
    #####: 4739:  if (failures > 0) *stream << "\n" << kIndent << "]";
    %%%%%: 4739-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 4739-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 4739-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 4739-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    #####: 4740:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4740-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4740-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4740-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4740-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4740-block  4
call   12 never executed
    $$$$$: 4740-block  5
call   13 never executed
    $$$$$: 4740-block  6
    #####: 4741:}
call    0 never executed
    $$$$$: 4741-block  0
call    1 never executed
        -: 4742:
        -: 4743:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4744:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
    %%%%%: 4744-block  0
        -: 4745:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4746:  const std::string kTestsuite = "testsuite";
    %%%%%: 4746-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4746-block  1
    #####: 4747:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4748:
    #####: 4749:  *stream << Indent(4) << "{\n";
    %%%%%: 4749-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4749-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4749-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4749-block  3
call    9 never executed
    $$$$$: 4749-block  4
call   10 never executed
    $$$$$: 4749-block  5
    #####: 4750:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
    %%%%%: 4750-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4750-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4750-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4750-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4750-block  4
call   12 never executed
    $$$$$: 4750-block  5
    $$$$$: 4750-block  6
    $$$$$: 4750-block  7
call   13 never executed
    $$$$$: 4750-block  8
    $$$$$: 4750-block  9
    #####: 4751:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4751-block  0
    %%%%%: 4751-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4751-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4751-block  3
call    9 never executed
    $$$$$: 4751-block  4
call   10 never executed
    $$$$$: 4751-block  5
    $$$$$: 4751-block  6
        -: 4752:                kIndent);
    #####: 4753:  if (!GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4754:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4754-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4754-block  1
    %%%%%: 4754-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4754-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4754-block  4
call    9 never executed
    $$$$$: 4754-block  5
call   10 never executed
    $$$$$: 4754-block  6
    $$$$$: 4754-block  7
        -: 4755:                  test_suite.failed_test_count(), kIndent);
    #####: 4756:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4756-block  0
    %%%%%: 4756-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4756-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4756-block  3
call    9 never executed
    $$$$$: 4756-block  4
call   10 never executed
    $$$$$: 4756-block  5
    $$$$$: 4756-block  6
        -: 4757:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4758:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
    %%%%%: 4758-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4758-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4758-block  2
call    6 never executed
    $$$$$: 4758-block  3
call    7 never executed
    $$$$$: 4758-block  4
    $$$$$: 4758-block  5
    #####: 4759:    OutputJsonKey(
    %%%%%: 4759-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4759-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4759-block  2
call    6 never executed
    $$$$$: 4759-block  3
call    7 never executed
    $$$$$: 4759-block  4
    $$$$$: 4759-block  5
        -: 4760:        stream, kTestsuite, "timestamp",
    #####: 4761:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4761-block  0
call    5 never executed
    $$$$$: 4761-block  1
        -: 4762:        kIndent);
    #####: 4763:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4763-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4763-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4763-block  2
call    6 never executed
    $$$$$: 4763-block  3
call    7 never executed
    $$$$$: 4763-block  4
    $$$$$: 4763-block  5
    #####: 4764:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4764-block  0
call    5 never executed
    $$$$$: 4764-block  1
        -: 4765:                  kIndent, false);
    #####: 4766:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4766-block  0
call    3 never executed
    $$$$$: 4766-block  1
call    4 never executed
    $$$$$: 4766-block  2
    #####: 4767:            << ",\n";
call    0 never executed
    %%%%%: 4767-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4767-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4768:  }
        -: 4769:
    #####: 4770:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4770-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4770-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4770-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4770-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4771:
    #####: 4772:  bool comma = false;
    #####: 4773:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4773-block  0
    %%%%%: 4773-block  1
    %%%%%: 4773-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4774:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4774-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4774-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4775:      if (comma) {
    %%%%%: 4775-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4776:        *stream << ",\n";
    %%%%%: 4776-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4777:      } else {
    #####: 4778:        comma = true;
    %%%%%: 4778-block  0
        -: 4779:      }
    #####: 4780:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4780-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4780-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4781:    }
        -: 4782:  }
    #####: 4783:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4783-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4783-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4783-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4783-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 4783-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 4783-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    %%%%%: 4783-block  6
call   18 never executed
    $$$$$: 4783-block  7
call   19 never executed
    $$$$$: 4783-block  8
    #####: 4784:}
call    0 never executed
call    1 never executed
    $$$$$: 4784-block  0
call    2 never executed
    $$$$$: 4784-block  1
call    3 never executed
        -: 4785:
        -: 4786:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4787:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
    %%%%%: 4787-block  0
        -: 4788:                                                  const UnitTest& unit_test) {
    #####: 4789:  const std::string kTestsuites = "testsuites";
    %%%%%: 4789-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4789-block  1
    #####: 4790:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4791:  *stream << "{\n";
    %%%%%: 4791-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4792:
    #####: 4793:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4793-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4793-block  1
    %%%%%: 4793-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4793-block  3
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4793-block  4
call    9 never executed
    $$$$$: 4793-block  5
call   10 never executed
    $$$$$: 4793-block  6
    $$$$$: 4793-block  7
        -: 4794:                kIndent);
    #####: 4795:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4795-block  0
    %%%%%: 4795-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4795-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4795-block  3
call    9 never executed
    $$$$$: 4795-block  4
call   10 never executed
    $$$$$: 4795-block  5
    $$$$$: 4795-block  6
        -: 4796:                kIndent);
    #####: 4797:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4797-block  0
    %%%%%: 4797-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4797-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4797-block  3
call    9 never executed
    $$$$$: 4797-block  4
call   10 never executed
    $$$$$: 4797-block  5
    $$$$$: 4797-block  6
        -: 4798:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4799:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
    %%%%%: 4799-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4799-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4799-block  2
call    6 never executed
    $$$$$: 4799-block  3
call    7 never executed
    $$$$$: 4799-block  4
    $$$$$: 4799-block  5
    #####: 4800:  if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4801:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4801-block  0
call    0 never executed
    %%%%%: 4801-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4801-block  2
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4801-block  3
call    7 never executed
    $$$$$: 4801-block  4
call    8 never executed
    $$$$$: 4801-block  5
    $$$$$: 4801-block  6
        -: 4802:                  kIndent);
        -: 4803:  }
    #####: 4804:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4804-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4804-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4804-block  2
call    6 never executed
    $$$$$: 4804-block  3
call    7 never executed
    $$$$$: 4804-block  4
    $$$$$: 4804-block  5
    #####: 4805:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4805-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4805-block  1
call    5 never executed
    $$$$$: 4805-block  2
        -: 4806:                kIndent);
    #####: 4807:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4807-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4807-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4807-block  2
call    6 never executed
    $$$$$: 4807-block  3
call    7 never executed
    $$$$$: 4807-block  4
    $$$$$: 4807-block  5
    #####: 4808:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
call    4 never executed
    $$$$$: 4808-block  0
call    5 never executed
    $$$$$: 4808-block  1
        -: 4809:                false);
        -: 4810:
    #####: 4811:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4811-block  0
call    3 never executed
    $$$$$: 4811-block  1
call    4 never executed
    $$$$$: 4811-block  2
    #####: 4812:          << ",\n";
call    0 never executed
    %%%%%: 4812-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4812-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
        -: 4813:
    #####: 4814:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4814-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4814-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4814-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4814-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4814-block  4
call   11 never executed
    $$$$$: 4814-block  5
    $$$$$: 4814-block  6
    $$$$$: 4814-block  7
call   12 never executed
    $$$$$: 4814-block  8
    $$$$$: 4814-block  9
    #####: 4815:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4815-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4815-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4815-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4816:
    #####: 4817:  bool comma = false;
    #####: 4818:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4818-block  0
    %%%%%: 4818-block  1
    %%%%%: 4818-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4819:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4819-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4819-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4819-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 4820:      if (comma) {
    %%%%%: 4820-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4821:        *stream << ",\n";
    %%%%%: 4821-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4822:      } else {
    #####: 4823:        comma = true;
    %%%%%: 4823-block  0
        -: 4824:      }
    #####: 4825:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4825-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4825-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 4826:    }
        -: 4827:  }
        -: 4828:
        -: 4829:  // If there was a test failure outside of one of the test suites (like in a
        -: 4830:  // test environment) include that in the output.
    #####: 4831:  if (unit_test.ad_hoc_test_result().Failed()) {
    %%%%%: 4831-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 4831-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 4832:    if (comma) {
    %%%%%: 4832-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4833:      *stream << ",\n";
    %%%%%: 4833-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4834:    }
    #####: 4835:    OutputJsonTestSuiteForTestResult(stream, unit_test.ad_hoc_test_result());
    %%%%%: 4835-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4836:  }
        -: 4837:
        -: 4838:  *stream << "\n"
        -: 4839:          << kIndent << "]\n"
    #####: 4840:          << "}\n";
    %%%%%: 4840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4840-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4840-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4840-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4841:}
    %%%%%: 4841-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4841-block  1
call    2 never executed
    $$$$$: 4841-block  2
call    3 never executed
        -: 4842:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4843:void JsonUnitTestResultPrinter::PrintJsonTestList(
    %%%%%: 4843-block  0
        -: 4844:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4845:  const std::string kTestsuites = "testsuites";
    %%%%%: 4845-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 4845-block  1
    #####: 4846:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4847:  *stream << "{\n";
    %%%%%: 4847-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4848:  int total_tests = 0;
    #####: 4849:  for (auto test_suite : test_suites) {
    %%%%%: 4849-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4849-block  1
call    2 never executed
    %%%%%: 4849-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 4850:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4851:  }
    #####: 4852:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4852-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4852-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4852-block  2
call    6 never executed
    $$$$$: 4852-block  3
call    7 never executed
    $$$$$: 4852-block  4
    $$$$$: 4852-block  5
        -: 4853:
    #####: 4854:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4854-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4854-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4854-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4854-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4854-block  4
call   11 never executed
    $$$$$: 4854-block  5
    $$$$$: 4854-block  6
    $$$$$: 4854-block  7
call   12 never executed
    $$$$$: 4854-block  8
    $$$$$: 4854-block  9
    #####: 4855:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4855-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4855-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4855-block  2
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
        -: 4856:
    #####: 4857:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4857-block  0
    %%%%%: 4857-block  1
    %%%%%: 4857-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4858:    if (i != 0) {
    %%%%%: 4858-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 4859:      *stream << ",\n";
    %%%%%: 4859-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 4860:    }
    #####: 4861:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4861-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 4862:  }
        -: 4863:
        -: 4864:  *stream << "\n"
        -: 4865:          << kIndent << "]\n"
    #####: 4866:          << "}\n";
    %%%%%: 4866-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4866-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4866-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 4866-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 4867:}
    %%%%%: 4867-block  0
call    0 never executed
call    1 never executed
    $$$$$: 4867-block  1
call    2 never executed
    $$$$$: 4867-block  2
call    3 never executed
        -: 4868:// Produces a string representing the test properties in a result as
        -: 4869:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4870:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4871:    const TestResult& result, const std::string& indent) {
    #####: 4872:  Message attributes;
    %%%%%: 4872-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4873:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4873-block  0
    %%%%%: 4873-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 4874:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4874-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4875:    attributes << ",\n"
    %%%%%: 4875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 4876:               << indent << "\"" << property.key() << "\": "
    %%%%%: 4876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4876-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 4876-block  2
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4876-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    $$$$$: 4876-block  4
    #####: 4877:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4877-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4877-block  1
    %%%%%: 4877-block  2
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 4877-block  3
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 4877-block  4
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%: 4877-block  5
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%: 4877-block  6
call   16 never executed
call   17 never executed
    $$$$$: 4877-block  7
call   18 never executed
    $$$$$: 4877-block  8
call   19 never executed
    $$$$$: 4877-block  9
    $$$$$: 4877-block 10
    $$$$$: 4877-block 11
        -: 4878:  }
    #####: 4879:  return attributes.GetString();
    %%%%%: 4879-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 4879-block  1
    #####: 4880:}
    %%%%%: 4880-block  0
call    0 never executed
    $$$$$: 4880-block  1
call    1 never executed
        -: 4881:
        -: 4882:// End JsonUnitTestResultPrinter
        -: 4883:
        -: 4884:#if GTEST_CAN_STREAM_RESULTS_
        -: 4885:
        -: 4886:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4887:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4888:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4889:// in both time and space -- important as the input str may contain an
        -: 4890:// arbitrarily long test failure message and stack trace.
        -: 4891:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4892:  std::string result;
        -: 4893:  result.reserve(strlen(str) + 1);
        -: 4894:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4895:    switch (ch) {
        -: 4896:      case '%':
        -: 4897:      case '=':
        -: 4898:      case '&':
        -: 4899:      case '\n':
        -: 4900:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4901:        break;
        -: 4902:      default:
        -: 4903:        result.push_back(ch);
        -: 4904:        break;
        -: 4905:    }
        -: 4906:  }
        -: 4907:  return result;
        -: 4908:}
        -: 4909:
        -: 4910:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4911:  GTEST_CHECK_(sockfd_ == -1)
        -: 4912:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4913:
        -: 4914:  addrinfo hints;
        -: 4915:  memset(&hints, 0, sizeof(hints));
        -: 4916:  hints.ai_family = AF_UNSPEC;  // To allow both IPv4 and IPv6 addresses.
        -: 4917:  hints.ai_socktype = SOCK_STREAM;
        -: 4918:  addrinfo* servinfo = nullptr;
        -: 4919:
        -: 4920:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4921:  // the given host name.
        -: 4922:  const int error_num =
        -: 4923:      getaddrinfo(host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4924:  if (error_num != 0) {
        -: 4925:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4926:                        << gai_strerror(error_num);
        -: 4927:  }
        -: 4928:
        -: 4929:  // Loop through all the results and connect to the first we can.
        -: 4930:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
        -: 4931:       cur_addr = cur_addr->ai_next) {
        -: 4932:    sockfd_ = socket(cur_addr->ai_family, cur_addr->ai_socktype,
        -: 4933:                     cur_addr->ai_protocol);
        -: 4934:    if (sockfd_ != -1) {
        -: 4935:      // Connect the client socket to the server socket.
        -: 4936:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4937:        close(sockfd_);
        -: 4938:        sockfd_ = -1;
        -: 4939:      }
        -: 4940:    }
        -: 4941:  }
        -: 4942:
        -: 4943:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4944:
        -: 4945:  if (sockfd_ == -1) {
        -: 4946:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 4947:                        << host_name_ << ":" << port_num_;
        -: 4948:  }
        -: 4949:}
        -: 4950:
        -: 4951:// End of class Streaming Listener
        -: 4952:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4953:
        -: 4954:// class OsStackTraceGetter
        -: 4955:
        -: 4956:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4957:    "... " GTEST_NAME_ " internal frames ...";
        -: 4958:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4959:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
    %%%%%: 4959-block  0
        -: 4960:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4961:#if GTEST_HAS_ABSL
        -: 4962:  std::string result;
        -: 4963:
        -: 4964:  if (max_depth <= 0) {
        -: 4965:    return result;
        -: 4966:  }
        -: 4967:
        -: 4968:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4969:
        -: 4970:  std::vector<void*> raw_stack(max_depth);
        -: 4971:  // Skips the frames requested by the caller, plus this function.
        -: 4972:  const int raw_stack_size =
        -: 4973:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4974:
        -: 4975:  void* caller_frame = nullptr;
        -: 4976:  {
        -: 4977:    MutexLock lock(&mutex_);
        -: 4978:    caller_frame = caller_frame_;
        -: 4979:  }
        -: 4980:
        -: 4981:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4982:    if (raw_stack[i] == caller_frame &&
        -: 4983:        !GTEST_FLAG_GET(show_internal_stack_frames)) {
        -: 4984:      // Add a marker to the trace and stop adding frames.
        -: 4985:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4986:      break;
        -: 4987:    }
        -: 4988:
        -: 4989:    char tmp[1024];
        -: 4990:    const char* symbol = "(unknown)";
        -: 4991:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4992:      symbol = tmp;
        -: 4993:    }
        -: 4994:
        -: 4995:    char line[1024];
        -: 4996:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4997:    result += line;
        -: 4998:  }
        -: 4999:
        -: 5000:  return result;
        -: 5001:
        -: 5002:#else   // !GTEST_HAS_ABSL
        -: 5003:  static_cast<void>(max_depth);
        -: 5004:  static_cast<void>(skip_count);
    #####: 5005:  return "";
    %%%%%: 5005-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5005-block  1
        -: 5006:#endif  // GTEST_HAS_ABSL
        -: 5007:}
        -: 5008:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 0 returned 0% blocks executed 0%
    #####: 5009:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 5010:#if GTEST_HAS_ABSL
        -: 5011:  void* caller_frame = nullptr;
        -: 5012:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 5013:    caller_frame = nullptr;
        -: 5014:  }
        -: 5015:
        -: 5016:  MutexLock lock(&mutex_);
        -: 5017:  caller_frame_ = caller_frame;
        -: 5018:#endif  // GTEST_HAS_ABSL
    #####: 5019:}
        -: 5020:
        -: 5021:// A helper class that creates the premature-exit file in its
        -: 5022:// constructor and deletes the file in its destructor.
        -: 5023:class ScopedPrematureExitFile {
        -: 5024: public:
function _ZN7testing8internal23ScopedPrematureExitFileC1EPKc called 0 returned 0% blocks executed 0%
    #####: 5025:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
    #####: 5026:      : premature_exit_filepath_(
    %%%%%: 5026-block  0
    %%%%%: 5026-block  1
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5026-block  2
    %%%%%: 5026-block  3
    %%%%%: 5026-block  4
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 5026-block  5
call    5 never executed
        -: 5027:            premature_exit_filepath ? premature_exit_filepath : "") {
        -: 5028:    // If a path to the premature-exit file is specified...
    #####: 5029:    if (!premature_exit_filepath_.empty()) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
        -: 5030:      // create the file with a single "0" character in it.  I/O
        -: 5031:      // errors are ignored as there's nothing better we can do and we
        -: 5032:      // don't want to fail the test because of this.
    #####: 5033:      FILE* pfile = posix::FOpen(premature_exit_filepath_.c_str(), "w");
    %%%%%: 5033-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 5034:      fwrite("0", 1, 1, pfile);
    %%%%%: 5034-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5035:      fclose(pfile);
    %%%%%: 5035-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5036:    }
    #####: 5037:  }
    %%%%%: 5037-block  0
    $$$$$: 5037-block  1
call    0 never executed
        -: 5038:
function _ZN7testing8internal23ScopedPrematureExitFileD1Ev called 0 returned 0% blocks executed 0%
    #####: 5039:  ~ScopedPrematureExitFile() {
        -: 5040:#if !defined GTEST_OS_ESP8266
    #####: 5041:    if (!premature_exit_filepath_.empty()) {
    %%%%%: 5041-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 5042:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 5042-block  0
call    0 never executed
call    1 never executed
    #####: 5043:      if (retval) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5044:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 5044-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5045:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 5046:                          << retval;
call    0 never executed
        -: 5047:      }
        -: 5048:    }
        -: 5049:#endif
    #####: 5050:  }
    %%%%%: 5050-block  0
call    0 never executed
        -: 5051:
        -: 5052: private:
        -: 5053:  const std::string premature_exit_filepath_;
        -: 5054:
        -: 5055:  ScopedPrematureExitFile(const ScopedPrematureExitFile&) = delete;
        -: 5056:  ScopedPrematureExitFile& operator=(const ScopedPrematureExitFile&) = delete;
        -: 5057:};
        -: 5058:
        -: 5059:}  // namespace internal
        -: 5060:
        -: 5061:// class TestEventListeners
        -: 5062:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 5063:TestEventListeners::TestEventListeners()
        1: 5064:    : repeater_(new internal::TestEventRepeater()),
        1: 5064-block  0
call    0 returned 1
call    1 returned 1
        1: 5065:      default_result_printer_(nullptr),
        1: 5066:      default_xml_generator_(nullptr) {}
        -: 5067:
function _ZN7testing18TestEventListenersD2Ev called 0 returned 0% blocks executed 0%
    #####: 5068:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 5068-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5068-block  1
call    2 never executed
        -: 5069:
        -: 5070:// Returns the standard listener responsible for the default console
        -: 5071:// output.  Can be removed from the listeners list to shut down default
        -: 5072:// console output.  Note that removing this object from the listener list
        -: 5073:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 5074:void TestEventListeners::Append(TestEventListener* listener) {
        1: 5075:  repeater_->Append(listener);
        1: 5075-block  0
call    0 returned 1
        1: 5076:}
        -: 5077:
        -: 5078:// Removes the given event listener from the list and returns it.  It then
        -: 5079:// becomes the caller's responsibility to delete the listener. Returns
        -: 5080:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 5081:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 5082:  if (listener == default_result_printer_)
        1: 5082-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5083:    default_result_printer_ = nullptr;
        1: 5083-block  0
    #####: 5084:  else if (listener == default_xml_generator_)
    %%%%%: 5084-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5085:    default_xml_generator_ = nullptr;
    %%%%%: 5085-block  0
        1: 5086:  return repeater_->Release(listener);
        1: 5086-block  0
call    0 returned 1
        -: 5087:}
        -: 5088:
        -: 5089:// Returns repeater that broadcasts the TestEventListener events to all
        -: 5090:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 0 returned 0% blocks executed 0%
    #####: 5091:TestEventListener* TestEventListeners::repeater() { return repeater_; }
    %%%%%: 5091-block  0
        -: 5092:
        -: 5093:// Sets the default_result_printer attribute to the provided listener.
        -: 5094:// The listener is also added to the listener list and previous
        -: 5095:// default_result_printer is removed from it and deleted. The listener can
        -: 5096:// also be NULL in which case it will not be added to the list. Does
        -: 5097:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 5098:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 5099:  if (default_result_printer_ != listener) {
        1: 5099-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5100:    // It is an error to pass this method a listener that is already in the
        -: 5101:    // list.
       1*: 5102:    delete Release(default_result_printer_);
        1: 5102-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 5102-block  1
call    3 never executed
        1: 5103:    default_result_printer_ = listener;
        1: 5104:    if (listener != nullptr) Append(listener);
        1: 5104-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5104-block  1
call    2 returned 1
        -: 5105:  }
        1: 5106:}
        -: 5107:
        -: 5108:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 5109:// listener is also added to the listener list and previous
        -: 5110:// default_xml_generator is removed from it and deleted. The listener can
        -: 5111:// also be NULL in which case it will not be added to the list. Does
        -: 5112:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 5113:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 5114:  if (default_xml_generator_ != listener) {
    %%%%%: 5114-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5115:    // It is an error to pass this method a listener that is already in the
        -: 5116:    // list.
    #####: 5117:    delete Release(default_xml_generator_);
    %%%%%: 5117-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 5117-block  1
call    3 never executed
    #####: 5118:    default_xml_generator_ = listener;
    #####: 5119:    if (listener != nullptr) Append(listener);
    %%%%%: 5119-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5119-block  1
call    2 never executed
        -: 5120:  }
    #####: 5121:}
        -: 5122:
        -: 5123:// Controls whether events will be forwarded by the repeater to the
        -: 5124:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 5125:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 5126:  return repeater_->forwarding_enabled();
    %%%%%: 5126-block  0
call    0 never executed
        -: 5127:}
        -: 5128:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 5129:void TestEventListeners::SuppressEventForwarding() {
    #####: 5130:  repeater_->set_forwarding_enabled(false);
    %%%%%: 5130-block  0
call    0 never executed
    #####: 5131:}
        -: 5132:
        -: 5133:// class UnitTest
        -: 5134:
        -: 5135:// Gets the singleton UnitTest object.  The first time this method is
        -: 5136:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 5137:// calls will return the same object.
        -: 5138://
        -: 5139:// We don't protect this under mutex_ as a user is not supposed to
        -: 5140:// call this before main() starts, from which point on the return
        -: 5141:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 4 returned 100% blocks executed 82%
        4: 5142:UnitTest* UnitTest::GetInstance() {
        -: 5143:  // CodeGear C++Builder insists on a public destructor for the
        -: 5144:  // default implementation.  Use this implementation to keep good OO
        -: 5145:  // design with private destructor.
        -: 5146:
        -: 5147:#if defined(__BORLANDC__)
        -: 5148:  static UnitTest* const instance = new UnitTest;
        -: 5149:  return instance;
        -: 5150:#else
        4: 5151:  static UnitTest instance;
        4: 5151-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1: 5151-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 5151-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5151-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 5151-block  4
branch 10 never executed (fallthrough)
branch 11 never executed
    $$$$$: 5151-block  5
call   12 never executed
        4: 5152:  return &instance;
        4: 5152-block  0
        4: 5152-block  1
        -: 5153:#endif  // defined(__BORLANDC__)
        -: 5154:}
        -: 5155:
        -: 5156:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5157:int UnitTest::successful_test_suite_count() const {
    #####: 5158:  return impl()->successful_test_suite_count();
    %%%%%: 5158-block  0
call    0 never executed
call    1 never executed
        -: 5159:}
        -: 5160:
        -: 5161:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5162:int UnitTest::failed_test_suite_count() const {
    #####: 5163:  return impl()->failed_test_suite_count();
    %%%%%: 5163-block  0
call    0 never executed
call    1 never executed
        -: 5164:}
        -: 5165:
        -: 5166:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5167:int UnitTest::total_test_suite_count() const {
    #####: 5168:  return impl()->total_test_suite_count();
    %%%%%: 5168-block  0
call    0 never executed
call    1 never executed
        -: 5169:}
        -: 5170:
        -: 5171:// Gets the number of all test suites that contain at least one test
        -: 5172:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5173:int UnitTest::test_suite_to_run_count() const {
    #####: 5174:  return impl()->test_suite_to_run_count();
    %%%%%: 5174-block  0
call    0 never executed
call    1 never executed
        -: 5175:}
        -: 5176:
        -: 5177://  Legacy API is deprecated but still available
        -: 5178:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5179:int UnitTest::successful_test_case_count() const {
    #####: 5180:  return impl()->successful_test_suite_count();
    %%%%%: 5180-block  0
call    0 never executed
call    1 never executed
        -: 5181:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5182:int UnitTest::failed_test_case_count() const {
    #####: 5183:  return impl()->failed_test_suite_count();
    %%%%%: 5183-block  0
call    0 never executed
call    1 never executed
        -: 5184:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5185:int UnitTest::total_test_case_count() const {
    #####: 5186:  return impl()->total_test_suite_count();
    %%%%%: 5186-block  0
call    0 never executed
call    1 never executed
        -: 5187:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5188:int UnitTest::test_case_to_run_count() const {
    #####: 5189:  return impl()->test_suite_to_run_count();
    %%%%%: 5189-block  0
call    0 never executed
call    1 never executed
        -: 5190:}
        -: 5191:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5192:
        -: 5193:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5194:int UnitTest::successful_test_count() const {
    #####: 5195:  return impl()->successful_test_count();
    %%%%%: 5195-block  0
call    0 never executed
call    1 never executed
        -: 5196:}
        -: 5197:
        -: 5198:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5199:int UnitTest::skipped_test_count() const {
    #####: 5200:  return impl()->skipped_test_count();
    %%%%%: 5200-block  0
call    0 never executed
call    1 never executed
        -: 5201:}
        -: 5202:
        -: 5203:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5204:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5204-block  0
call    0 never executed
call    1 never executed
        -: 5205:
        -: 5206:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5207:int UnitTest::reportable_disabled_test_count() const {
    #####: 5208:  return impl()->reportable_disabled_test_count();
    %%%%%: 5208-block  0
call    0 never executed
call    1 never executed
        -: 5209:}
        -: 5210:
        -: 5211:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5212:int UnitTest::disabled_test_count() const {
    #####: 5213:  return impl()->disabled_test_count();
    %%%%%: 5213-block  0
call    0 never executed
call    1 never executed
        -: 5214:}
        -: 5215:
        -: 5216:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5217:int UnitTest::reportable_test_count() const {
    #####: 5218:  return impl()->reportable_test_count();
    %%%%%: 5218-block  0
call    0 never executed
call    1 never executed
        -: 5219:}
        -: 5220:
        -: 5221:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5222:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5222-block  0
call    0 never executed
call    1 never executed
        -: 5223:
        -: 5224:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5225:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
    %%%%%: 5225-block  0
call    0 never executed
call    1 never executed
        -: 5226:
        -: 5227:// Gets the time of the test program start, in ms from the start of the
        -: 5228:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5229:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5230:  return impl()->start_timestamp();
    %%%%%: 5230-block  0
call    0 never executed
call    1 never executed
        -: 5231:}
        -: 5232:
        -: 5233:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 0 returned 0% blocks executed 0%
    #####: 5234:internal::TimeInMillis UnitTest::elapsed_time() const {
    #####: 5235:  return impl()->elapsed_time();
    %%%%%: 5235-block  0
call    0 never executed
call    1 never executed
        -: 5236:}
        -: 5237:
        -: 5238:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5239:// passed).
function _ZNK7testing8UnitTest6PassedEv called 0 returned 0% blocks executed 0%
    #####: 5240:bool UnitTest::Passed() const { return impl()->Passed(); }
    %%%%%: 5240-block  0
call    0 never executed
call    1 never executed
        -: 5241:
        -: 5242:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5243:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5244:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5244-block  0
call    0 never executed
call    1 never executed
        -: 5245:
        -: 5246:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5247:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5248:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5249:  return impl()->GetTestSuite(i);
    %%%%%: 5249-block  0
call    0 never executed
call    1 never executed
        -: 5250:}
        -: 5251:
        -: 5252://  Legacy API is deprecated but still available
        -: 5253:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5254:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5255:  return impl()->GetTestCase(i);
    %%%%%: 5255-block  0
call    0 never executed
call    1 never executed
        -: 5256:}
        -: 5257:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5258:
        -: 5259:// Returns the TestResult containing information on test failures and
        -: 5260:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5261:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5262:  return *impl()->ad_hoc_test_result();
    %%%%%: 5262-block  0
call    0 never executed
call    1 never executed
        -: 5263:}
        -: 5264:
        -: 5265:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5266:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5267:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5268:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5268-block  0
call    0 never executed
call    1 never executed
        -: 5269:}
        -: 5270:
        -: 5271:// Returns the list of event listeners that can be used to track events
        -: 5272:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 0 returned 0% blocks executed 0%
    #####: 5273:TestEventListeners& UnitTest::listeners() { return *impl()->listeners(); }
    %%%%%: 5273-block  0
call    0 never executed
call    1 never executed
        -: 5274:
        -: 5275:// Registers and returns a global test environment.  When a test
        -: 5276:// program is run, all global test environments will be set-up in the
        -: 5277:// order they were registered.  After all tests in the program have
        -: 5278:// finished, all global test environments will be torn-down in the
        -: 5279:// *reverse* order they were registered.
        -: 5280://
        -: 5281:// The UnitTest object takes ownership of the given environment.
        -: 5282://
        -: 5283:// We don't protect this under mutex_, as we only support calling it
        -: 5284:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5285:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5286:  if (env == nullptr) {
    %%%%%: 5286-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5287:    return nullptr;
    %%%%%: 5287-block  0
        -: 5288:  }
        -: 5289:
    #####: 5290:  impl_->environments().push_back(env);
    %%%%%: 5290-block  0
call    0 never executed
call    1 never executed
    #####: 5291:  return env;
        -: 5292:}
        -: 5293:
        -: 5294:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5295:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5296:// this to report their results.  The user code should use the
        -: 5297:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5298:void UnitTest::AddTestPartResult(TestPartResult::Type result_type,
        -: 5299:                                 const char* file_name, int line_number,
        -: 5300:                                 const std::string& message,
        -: 5301:                                 const std::string& os_stack_trace)
        -: 5302:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5303:  Message msg;
    %%%%%: 5303-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5304:  msg << message;
    %%%%%: 5304-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5305:
    #####: 5306:  internal::MutexLock lock(&mutex_);
    %%%%%: 5306-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5307:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5307-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5307-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5308:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5308-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5308-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5308-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5309:
    #####: 5310:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5310-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5310-block  1
call    3 never executed
    %%%%%: 5310-block  2
branch  4 never executed
branch  5 never executed (fallthrough)
    #####: 5311:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5311-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5311-block  1
call    3 never executed
    #####: 5312:      msg << "\n"
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5313:          << internal::FormatFileLocation(trace.file, trace.line) << " "
    %%%%%: 5313-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5313-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5313-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 5313-block  3
call    9 never executed
    $$$$$: 5313-block  4
call   10 never executed
    $$$$$: 5313-block  5
    #####: 5314:          << trace.message;
    %%%%%: 5314-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5315:    }
        -: 5316:  }
        -: 5317:
    #####: 5318:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5318-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 5318-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 5318-block  2
    %%%%%: 5318-block  3
    %%%%%: 5318-block  4
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 5319:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5319-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5319-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5320:  }
        -: 5321:
        -: 5322:  const TestPartResult result = TestPartResult(
    #####: 5323:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5323-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5323-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 5323-block  2
call    7 never executed
    $$$$$: 5323-block  3
call    8 never executed
    $$$$$: 5323-block  4
    #####: 5324:  impl_->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5324-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5325:      result);
        -: 5326:
    #####: 5327:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5327-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5327-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
        -: 5328:      result_type != TestPartResult::kSkip) {
        -: 5329:    // gtest_break_on_failure takes precedence over
        -: 5330:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5331:    // in the code (perhaps in order to use Google Test assertions
        -: 5332:    // with another testing framework) and specify the former on the
        -: 5333:    // command line for debugging.
    #####: 5334:    if (GTEST_FLAG_GET(break_on_failure)) {
    %%%%%: 5334-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5335:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5336:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5337:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5338:      // the --gtest_catch_exceptions flags are specified.
    #####: 5339:      DebugBreak();
    %%%%%: 5339-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5340:#elif (!defined(__native_client__)) &&            \
        -: 5341:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5342:     (defined(__x86_64__) || defined(__i386__)))
        -: 5343:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
        -: 5344:      asm("int3");
        -: 5345:#elif GTEST_HAS_BUILTIN(__builtin_trap)
        -: 5346:      __builtin_trap();
        -: 5347:#elif defined(SIGTRAP)
        -: 5348:      raise(SIGTRAP);
        -: 5349:#else
        -: 5350:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5351:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5352:      // portability: some debuggers don't correctly trap abort().
        -: 5353:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5354:#endif  // GTEST_OS_WINDOWS
    #####: 5355:    } else if (GTEST_FLAG_GET(throw_on_failure)) {
    %%%%%: 5355-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5356:#if GTEST_HAS_EXCEPTIONS
    #####: 5357:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5357-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 5357-block  1
call    4 never executed
    $$$$$: 5357-block  2
call    5 never executed
        -: 5358:#else
        -: 5359:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5360:      // that cannot be suppressed in VC 7.1 or below.
        -: 5361:      exit(1);
        -: 5362:#endif
        -: 5363:    }
        -: 5364:  }
    #####: 5365:}
    %%%%%: 5365-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 5365-block  1
call    3 never executed
    $$$$$: 5365-block  2
call    4 never executed
    $$$$$: 5365-block  3
call    5 never executed
        -: 5366:
        -: 5367:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5368:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5369:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5370:// when invoked elsewhere.  If the result already contains a property with
        -: 5371:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5372:void UnitTest::RecordProperty(const std::string& key,
        -: 5373:                              const std::string& value) {
    #####: 5374:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5374-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5374-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5374-block  2
call    6 never executed
    $$$$$: 5374-block  3
call    7 never executed
    #####: 5375:}
        -: 5376:
        -: 5377:// Runs all tests in this UnitTest object and prints the result.
        -: 5378:// Returns 0 if successful, or 1 otherwise.
        -: 5379://
        -: 5380:// We don't protect this under mutex_, as we only support calling it
        -: 5381:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 0 returned 0% blocks executed 0%
    #####: 5382:int UnitTest::Run() {
        -: 5383:  const bool in_death_test_child_process =
    #####: 5384:      GTEST_FLAG_GET(internal_run_death_test).length() > 0;
    %%%%%: 5384-block  0
call    0 never executed
        -: 5385:
        -: 5386:  // Google Test implements this protocol for catching that a test
        -: 5387:  // program exits before returning control to Google Test:
        -: 5388:  //
        -: 5389:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5390:  //      is specified by the environment variable
        -: 5391:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5392:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5393:  //
        -: 5394:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5395:  // running a Google-Test-based test program and check the existence
        -: 5396:  // of the file at the end of the test execution to see if it has
        -: 5397:  // exited prematurely.
        -: 5398:
        -: 5399:  // If we are in the child process of a death test, don't
        -: 5400:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5401:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5402:  // the file upon entering/leaving this function.  If the program
        -: 5403:  // somehow exits before this function has a chance to return, the
        -: 5404:  // premature-exit file will be left undeleted, causing a test runner
        -: 5405:  // that understands the premature-exit-file protocol to report the
        -: 5406:  // test as having failed.
        -: 5407:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5408:      in_death_test_child_process
        -: 5409:          ? nullptr
    #####: 5410:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5410-block  0
    %%%%%: 5410-block  1
call    2 never executed
    %%%%%: 5410-block  2
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5411:
        -: 5412:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5413:  // used for the duration of the program.
    #####: 5414:  impl()->set_catch_exceptions(GTEST_FLAG_GET(catch_exceptions));
    %%%%%: 5414-block  0
call    0 never executed
call    1 never executed
        -: 5415:
        -: 5416:#if GTEST_OS_WINDOWS
        -: 5417:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5418:  // tests or this is executing in the context of death test child
        -: 5419:  // process. In either case the user does not want to see pop-up dialogs
        -: 5420:  // about crashes - they are expected.
    #####: 5421:  if (impl()->catch_exceptions() || in_death_test_child_process) {
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 5421-block  0
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 5421-block  1
    %%%%%: 5421-block  2
    %%%%%: 5421-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
        -: 5422:#if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5423:    // SetErrorMode doesn't exist on CE.
    #####: 5424:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
    %%%%%: 5424-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5425:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5426:#endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5427:
        -: 5428:#if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5429:    // Death test children can be terminated with _abort().  On Windows,
        -: 5430:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5431:    // abort message to go to stderr instead.
    #####: 5432:    _set_error_mode(_OUT_TO_STDERR);
    %%%%%: 5432-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5433:#endif
        -: 5434:
        -: 5435:#if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5436:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5437:    // offering a choice to debug the aborted program. We need to suppress
        -: 5438:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5439:    // executed. Google Test will notify the user of any unexpected
        -: 5440:    // failure via stderr.
        -: 5441:    if (!GTEST_FLAG_GET(break_on_failure))
        -: 5442:      _set_abort_behavior(
        -: 5443:          0x0,                                    // Clear the following flags:
        -: 5444:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5445:
        -: 5446:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5447:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5448:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5449:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5450:    if (!IsDebuggerPresent()) {
        -: 5451:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5452:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5453:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5454:    }
        -: 5455:#endif
        -: 5456:  }
        -: 5457:#endif  // GTEST_OS_WINDOWS
        -: 5458:
    #####: 5459:  return internal::HandleExceptionsInMethodIfSupported(
    %%%%%: 5459-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 5460:             impl(), &internal::UnitTestImpl::RunAllTests,
        -: 5461:             "auxiliary test code (environments or event listeners)")
    #####: 5462:             ? 0
    %%%%%: 5462-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5462-block  1
    %%%%%: 5462-block  2
    #####: 5463:             : 1;
    %%%%%: 5463-block  0
    #####: 5464:}
    %%%%%: 5464-block  0
call    0 never executed
    $$$$$: 5464-block  1
call    1 never executed
        -: 5465:
        -: 5466:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5467:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5468:const char* UnitTest::original_working_dir() const {
    #####: 5469:  return impl_->original_working_dir_.c_str();
    %%%%%: 5469-block  0
call    0 never executed
        -: 5470:}
        -: 5471:
        -: 5472:// Returns the TestSuite object for the test that's currently running,
        -: 5473:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5474:const TestSuite* UnitTest::current_test_suite() const
        -: 5475:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5476:  internal::MutexLock lock(&mutex_);
    %%%%%: 5476-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5477:  return impl_->current_test_suite();
    %%%%%: 5477-block  0
call    0 never executed
    %%%%%: 5477-block  1
    #####: 5478:}
call    0 never executed
        -: 5479:
        -: 5480:// Legacy API is still available but deprecated
        -: 5481:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5482:const TestCase* UnitTest::current_test_case() const
        -: 5483:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5484:  internal::MutexLock lock(&mutex_);
    %%%%%: 5484-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5485:  return impl_->current_test_suite();
    %%%%%: 5485-block  0
call    0 never executed
    %%%%%: 5485-block  1
    #####: 5486:}
call    0 never executed
        -: 5487:#endif
        -: 5488:
        -: 5489:// Returns the TestInfo object for the test that's currently running,
        -: 5490:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5491:const TestInfo* UnitTest::current_test_info() const
        -: 5492:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5493:  internal::MutexLock lock(&mutex_);
    %%%%%: 5493-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5494:  return impl_->current_test_info();
    %%%%%: 5494-block  0
call    0 never executed
    %%%%%: 5494-block  1
    #####: 5495:}
call    0 never executed
        -: 5496:
        -: 5497:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5498:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5498-block  0
call    0 never executed
        -: 5499:
        -: 5500:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5501:// value-parameterized tests and instantiate and register them.
        -: 5502:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5503:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5504:  return impl_->parameterized_test_registry();
    %%%%%: 5504-block  0
call    0 never executed
        -: 5505:}
        -: 5506:
        -: 5507:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 56%
        1: 5508:UnitTest::UnitTest() { impl_ = new internal::UnitTestImpl(this); }
        1: 5508-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5508-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1: 5508-block  2
    $$$$$: 5508-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
    $$$$$: 5508-block  4
call    9 never executed
    $$$$$: 5508-block  5
call   10 never executed
        -: 5509:
        -: 5510:// Destructor of UnitTest.
    #####: 5511:UnitTest::~UnitTest() { delete impl_; }
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5511:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5511-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 0 returned 0% blocks executed 0%
    #####: 5511:UnitTest::~UnitTest() { delete impl_; }
    %%%%%: 5511-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5511-block  1
call    2 never executed
    %%%%%: 5511-block  2
call    3 never executed
------------------
        -: 5512:
        -: 5513:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5514:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5515:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5516:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5517:  internal::MutexLock lock(&mutex_);
    %%%%%: 5517-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5518:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5518-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5518-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 5519:}
    %%%%%: 5519-block  0
call    0 never executed
    $$$$$: 5519-block  1
call    1 never executed
        -: 5520:
        -: 5521:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5522:void UnitTest::PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5523:  internal::MutexLock lock(&mutex_);
    %%%%%: 5523-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5524:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5524-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5524-block  1
call    3 never executed
    #####: 5525:}
call    0 never executed
    $$$$$: 5525-block  0
call    1 never executed
        -: 5526:
        -: 5527:namespace internal {
        -: 5528:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 42%
        1: 5529:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        1: 5530:    : parent_(parent),
        -: 5531:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        1: 5532:          default_global_test_part_result_reporter_(this),
call    0 returned 1
        1: 5533:      default_per_thread_test_part_result_reporter_(this),
call    0 returned 1
        1: 5534:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_reporter_(
        -: 5535:          &default_global_test_part_result_reporter_),
        1: 5536:      per_thread_test_part_result_reporter_(
        1: 5536-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$: 5536-block  1
        -: 5537:          &default_per_thread_test_part_result_reporter_),
        1: 5538:      parameterized_test_registry_(),
call    0 returned 1
        1: 5539:      parameterized_tests_registered_(false),
        1: 5540:      last_death_test_suite_(-1),
        1: 5541:      current_test_suite_(nullptr),
        1: 5542:      current_test_info_(nullptr),
        1: 5543:      ad_hoc_test_result_(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5544:      os_stack_trace_getter_(nullptr),
        1: 5545:      post_flag_parse_init_performed_(false),
        1: 5546:      random_seed_(0),  // Will be overridden by the flag before first use.
        1: 5547:      random_(0),       // Will be reseeded before first use.
        1: 5547-block  0
call    0 returned 1
        1: 5548:      start_timestamp_(0),
        1: 5549:      elapsed_time_(0),
        -: 5550:#if GTEST_HAS_DEATH_TEST
        1: 5551:      death_test_factory_(new DefaultDeathTestFactory),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5551-block  0
call    3 returned 1
call    4 returned 1
        -: 5552:#endif
        -: 5553:      // Will be overridden by the flag before first use.
        7: 5554:      catch_exceptions_(false) {
        1: 5554-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5554-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
        1: 5554-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
call   13 returned 1
branch 14 taken 1 (fallthrough)
branch 15 taken 0 (throw)
        1: 5555:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5555-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5555-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
    $$$$$: 5555-block  2
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$: 5555-block  3
call   10 never executed
        1: 5556:}
        1: 5556-block  0
    $$$$$: 5556-block  1
call    0 never executed
    $$$$$: 5556-block  2
call    1 never executed
    $$$$$: 5556-block  3
call    2 never executed
    $$$$$: 5556-block  4
call    3 never executed
    $$$$$: 5556-block  5
call    4 never executed
    $$$$$: 5556-block  6
call    5 never executed
    $$$$$: 5556-block  7
call    6 never executed
    $$$$$: 5556-block  8
call    7 never executed
    $$$$$: 5556-block  9
call    8 never executed
    $$$$$: 5556-block 10
call    9 never executed
    $$$$$: 5556-block 11
call   10 never executed
    $$$$$: 5556-block 12
call   11 never executed
    $$$$$: 5556-block 13
call   12 never executed
    $$$$$: 5556-block 14
call   13 never executed
    $$$$$: 5556-block 15
call   14 never executed
    $$$$$: 5556-block 16
call   15 never executed
        -: 5557:
    #####: 5558:UnitTestImpl::~UnitTestImpl() {
        -: 5559:  // Deletes every TestSuite.
    #####: 5560:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5561:
        -: 5562:  // Deletes every Environment.
    #####: 5563:  ForEach(environments_, internal::Delete<Environment>);
        -: 5564:
    #####: 5565:  delete os_stack_trace_getter_;
    #####: 5566:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 0 returned 0% blocks executed 0%
    #####: 5558:UnitTestImpl::~UnitTestImpl() {
        -: 5559:  // Deletes every TestSuite.
        -: 5560:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5561:
        -: 5562:  // Deletes every Environment.
        -: 5563:  ForEach(environments_, internal::Delete<Environment>);
        -: 5564:
        -: 5565:  delete os_stack_trace_getter_;
    #####: 5566:}
    %%%%%: 5566-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 0 returned 0% blocks executed 0%
    #####: 5558:UnitTestImpl::~UnitTestImpl() {
        -: 5559:  // Deletes every TestSuite.
    #####: 5560:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5560-block  0
call    0 never executed
        -: 5561:
        -: 5562:  // Deletes every Environment.
    #####: 5563:  ForEach(environments_, internal::Delete<Environment>);
call    0 never executed
        -: 5564:
    #####: 5565:  delete os_stack_trace_getter_;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5565-block  0
call    2 never executed
    #####: 5566:}
    %%%%%: 5566-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
------------------
        -: 5567:
        -: 5568:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5569:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5570:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5571:// otherwise.  If the result already contains a property with the same key,
        -: 5572:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5573:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5574:  std::string xml_element;
    %%%%%: 5574-block  0
call    0 never executed
        -: 5575:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5576:
    #####: 5577:  if (current_test_info_ != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5578:    xml_element = "testcase";
    %%%%%: 5578-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5579:    test_result = &(current_test_info_->result_);
    %%%%%: 5579-block  0
    #####: 5580:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5580-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5581:    xml_element = "testsuite";
    %%%%%: 5581-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5582:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5582-block  0
        -: 5583:  } else {
    #####: 5584:    xml_element = "testsuites";
    %%%%%: 5584-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5585:    test_result = &ad_hoc_test_result_;
    %%%%%: 5585-block  0
        -: 5586:  }
    #####: 5587:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5587-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5588:}
    %%%%%: 5588-block  0
call    0 never executed
    $$$$$: 5588-block  1
call    1 never executed
        -: 5589:
        -: 5590:#if GTEST_HAS_DEATH_TEST
        -: 5591:// Disables event forwarding if the control is currently in a death test
        -: 5592:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 0 returned 0% blocks executed 0%
    #####: 5593:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
    #####: 5594:  if (internal_run_death_test_flag_.get() != nullptr)
    %%%%%: 5594-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 5595:    listeners()->SuppressEventForwarding();
    %%%%%: 5595-block  0
call    0 never executed
call    1 never executed
    #####: 5596:}
        -: 5597:#endif  // GTEST_HAS_DEATH_TEST
        -: 5598:
        -: 5599:// Initializes event listeners performing XML output as specified by
        -: 5600:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 0 returned 0% blocks executed 0%
    #####: 5601:void UnitTestImpl::ConfigureXmlOutput() {
    #####: 5602:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 5602-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5603:  if (output_format == "xml") {
    %%%%%: 5603-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5603-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 5604:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5604-block  0
call    0 never executed
    %%%%%: 5604-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5604-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5605:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5605-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5605-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5605-block  2
call   10 never executed
    $$$$$: 5605-block  3
call   11 never executed
    $$$$$: 5605-block  4
    $$$$$: 5605-block  5
call   12 never executed
    #####: 5606:  } else if (output_format == "json") {
    %%%%%: 5606-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5606-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 5607:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5607-block  0
call    0 never executed
    %%%%%: 5607-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 5607-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 5608:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5608-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5608-block  1
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%: 5608-block  2
call   10 never executed
    $$$$$: 5608-block  3
call   11 never executed
    $$$$$: 5608-block  4
    $$$$$: 5608-block  5
call   12 never executed
    #####: 5609:  } else if (output_format != "") {
    %%%%%: 5609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5609-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 5610:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5610-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5610-block  1
call    3 never executed
    %%%%%: 5610-block  2
call    4 never executed
    $$$$$: 5610-block  3
call    5 never executed
    $$$$$: 5610-block  4
    #####: 5611:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5611-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5611-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 5612:  }
    #####: 5613:}
    %%%%%: 5613-block  0
call    0 never executed
    $$$$$: 5613-block  1
call    1 never executed
        -: 5614:
        -: 5615:#if GTEST_CAN_STREAM_RESULTS_
        -: 5616:// Initializes event listeners for streaming test results in string form.
        -: 5617:// Must not be called before InitGoogleTest.
        -: 5618:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 5619:  const std::string& target = GTEST_FLAG_GET(stream_result_to);
        -: 5620:  if (!target.empty()) {
        -: 5621:    const size_t pos = target.find(':');
        -: 5622:    if (pos != std::string::npos) {
        -: 5623:      listeners()->Append(
        -: 5624:          new StreamingListener(target.substr(0, pos), target.substr(pos + 1)));
        -: 5625:    } else {
        -: 5626:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 5627:                          << "\" ignored.";
        -: 5628:    }
        -: 5629:  }
        -: 5630:}
        -: 5631:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5632:
        -: 5633:// Performs initialization dependent upon flag values obtained in
        -: 5634:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5635:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5636:// this function is also called from RunAllTests.  Since this function can be
        -: 5637:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 0 returned 0% blocks executed 0%
    #####: 5638:void UnitTestImpl::PostFlagParsingInit() {
        -: 5639:  // Ensures that this function does not execute more than once.
    #####: 5640:  if (!post_flag_parse_init_performed_) {
    %%%%%: 5640-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5641:    post_flag_parse_init_performed_ = true;
        -: 5642:
        -: 5643:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5644:    // Register to send notifications about key process state changes.
        -: 5645:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5646:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5647:
        -: 5648:#if GTEST_HAS_DEATH_TEST
    #####: 5649:    InitDeathTestSubprocessControlInfo();
    %%%%%: 5649-block  0
call    0 never executed
    #####: 5650:    SuppressTestEventsIfInSubprocess();
call    0 never executed
        -: 5651:#endif  // GTEST_HAS_DEATH_TEST
        -: 5652:
        -: 5653:    // Registers parameterized tests. This makes parameterized tests
        -: 5654:    // available to the UnitTest reflection API without running
        -: 5655:    // RUN_ALL_TESTS.
    #####: 5656:    RegisterParameterizedTests();
call    0 never executed
        -: 5657:
        -: 5658:    // Configures listeners for XML output. This makes it possible for users
        -: 5659:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
    #####: 5660:    ConfigureXmlOutput();
call    0 never executed
        -: 5661:
    #####: 5662:    if (GTEST_FLAG_GET(brief)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5663:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5663-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    $$$$$: 5663-block  1
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5663-block  2
call    8 never executed
        -: 5664:    }
        -: 5665:
        -: 5666:#if GTEST_CAN_STREAM_RESULTS_
        -: 5667:    // Configures listeners for streaming test results to the specified server.
        -: 5668:    ConfigureStreamingOutput();
        -: 5669:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5670:
        -: 5671:#if GTEST_HAS_ABSL
        -: 5672:    if (GTEST_FLAG_GET(install_failure_signal_handler)) {
        -: 5673:      absl::FailureSignalHandlerOptions options;
        -: 5674:      absl::InstallFailureSignalHandler(options);
        -: 5675:    }
        -: 5676:#endif  // GTEST_HAS_ABSL
        -: 5677:  }
    #####: 5678:}
    %%%%%: 5678-block  0
        -: 5679:
        -: 5680:// A predicate that checks the name of a TestSuite against a known
        -: 5681:// value.
        -: 5682://
        -: 5683:// This is used for implementation of the UnitTest class only.  We put
        -: 5684:// it in the anonymous namespace to prevent polluting the outer
        -: 5685:// namespace.
        -: 5686://
        -: 5687:// TestSuiteNameIs is copyable.
        -: 5688:class TestSuiteNameIs {
        -: 5689: public:
        -: 5690:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 100%
        4: 5691:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
        4: 5691-block  0
call    0 returned 4
        -: 5692:
        -: 5693:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 6 returned 100% blocks executed 88%
        6: 5694:  bool operator()(const TestSuite* test_suite) const {
      12*: 5695:    return test_suite != nullptr &&
        6: 5695-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 0
    %%%%%: 5695-block  1
        6: 5695-block  2
       12: 5696:           strcmp(test_suite->name(), name_.c_str()) == 0;
        6: 5696-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        6: 5696-block  1
        -: 5697:  }
        -: 5698:
        -: 5699: private:
        -: 5700:  std::string name_;
        -: 5701:};
        -: 5702:
        -: 5703:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5704:// exist, creates one and returns it.  It's the CALLER'S
        -: 5705:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5706:// TESTS ARE NOT SHUFFLED.
        -: 5707://
        -: 5708:// Arguments:
        -: 5709://
        -: 5710://   test_suite_name: name of the test suite
        -: 5711://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5712://                    this is not a typed or a type-parameterized test suite.
        -: 5713://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5714://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 4 returned 100% blocks executed 47%
        4: 5715:TestSuite* UnitTestImpl::GetTestSuite(
        4: 5715-block  0
        -: 5716:    const char* test_suite_name, const char* type_param,
        -: 5717:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5718:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5719:  // Can we find a TestSuite with the given name?
        -: 5720:  const auto test_suite =
        4: 5721:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
        4: 5721-block  0
call    0 returned 4
call    1 returned 4
    $$$$$: 5721-block  1
    $$$$$: 5721-block  2
        8: 5722:                   TestSuiteNameIs(test_suite_name));
        4: 5722-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5722-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4: 5722-block  2
call    9 returned 4
call   10 returned 4
    $$$$$: 5722-block  3
call   11 never executed
    $$$$$: 5722-block  4
call   12 never executed
    $$$$$: 5722-block  5
    $$$$$: 5722-block  6
    $$$$$: 5722-block  7
        -: 5723:
       4*: 5724:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 5724-block  0
branch  4 taken 0 (fallthrough)
branch  5 taken 4
    %%%%%: 5724-block  1
call    6 never executed
    $$$$$: 5724-block  2
        -: 5725:
        -: 5726:  // No.  Let's create one.
        -: 5727:  auto* const new_test_suite =
        4: 5728:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        4: 5728-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5728-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 5728-block  2
    $$$$$: 5728-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$: 5728-block  4
call    8 never executed
        -: 5729:
        8: 5730:  const UnitTestFilter death_test_suite_filter(kDeathTestSuiteFilter);
        4: 5730-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5730-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 5730-block  2
call    6 returned 4
    $$$$$: 5730-block  3
call    7 never executed
    $$$$$: 5730-block  4
    $$$$$: 5730-block  5
        -: 5731:  // Is this a death test suite?
        8: 5732:  if (death_test_suite_filter.MatchesName(test_suite_name)) {
        4: 5732-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4: 5732-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4: 5732-block  2
call    6 returned 4
branch  7 taken 0 (fallthrough)
branch  8 taken 4
    $$$$$: 5732-block  3
call    9 never executed
    $$$$$: 5732-block  4
    $$$$$: 5732-block  5
        -: 5733:    // Yes.  Inserts the test suite after the last death test suite
        -: 5734:    // defined so far.  This only works when the test suites haven't
        -: 5735:    // been shuffled.  Otherwise we may end up running a death test
        -: 5736:    // after a non-death test.
    #####: 5737:    ++last_death_test_suite_;
    #####: 5738:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    %%%%%: 5738-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5738-block  1
    $$$$$: 5738-block  2
    $$$$$: 5738-block  3
    $$$$$: 5738-block  4
        -: 5739:                        new_test_suite);
        -: 5740:  } else {
        -: 5741:    // No.  Appends to the end of the list.
        4: 5742:    test_suites_.push_back(new_test_suite);
        4: 5742-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -: 5743:  }
        -: 5744:
        4: 5745:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        4: 5745-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5745-block  1
        4: 5746:  return new_test_suite;
        4: 5747:}
        4: 5747-block  0
call    0 returned 4
    $$$$$: 5747-block  1
call    1 never executed
        -: 5748:
        -: 5749:// Helpers for setting up / tearing down the given environment.  They
        -: 5750:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5751:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5751-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5752:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5752-block  0
call    0 never executed
        -: 5753:
        -: 5754:// Runs all tests in this UnitTest object, prints the result, and
        -: 5755:// returns true if all tests are successful.  If any exception is
        -: 5756:// thrown during a test, the test is considered to be failed, but the
        -: 5757:// rest of the tests will still be run.
        -: 5758://
        -: 5759:// When parameterized tests are enabled, it expands and registers
        -: 5760:// parameterized tests first in RegisterParameterizedTests().
        -: 5761:// All other functions called from RunAllTests() may safely assume that
        -: 5762:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 0 returned 0% blocks executed 0%
    #####: 5763:bool UnitTestImpl::RunAllTests() {
        -: 5764:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5765:  // called.
    #####: 5766:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
    %%%%%: 5766-block  0
call    0 never executed
        -: 5767:
        -: 5768:  // Do not run any test if the --help flag was specified.
    #####: 5769:  if (g_help_flag) return true;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5769-block  0
        -: 5770:
        -: 5771:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5772:  // user didn't call InitGoogleTest.
    #####: 5773:  PostFlagParsingInit();
    %%%%%: 5773-block  0
call    0 never executed
        -: 5774:
        -: 5775:  // Even if sharding is not on, test runners may want to use the
        -: 5776:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5777:  // protocol.
    #####: 5778:  internal::WriteToShardStatusFileIfNeeded();
call    0 never executed
        -: 5779:
        -: 5780:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5781:  // death test.
    #####: 5782:  bool in_subprocess_for_death_test = false;
        -: 5783:
        -: 5784:#if GTEST_HAS_DEATH_TEST
    #####: 5785:  in_subprocess_for_death_test =
    #####: 5786:      (internal_run_death_test_flag_.get() != nullptr);
call    0 never executed
        -: 5787:#if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5788:  if (in_subprocess_for_death_test) {
        -: 5789:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5790:  }
        -: 5791:#endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5792:#endif  // GTEST_HAS_DEATH_TEST
        -: 5793:
    #####: 5794:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 never executed
        -: 5795:                                        in_subprocess_for_death_test);
        -: 5796:
        -: 5797:  // Compares the full test names with the filter to decide which
        -: 5798:  // tests to run.
        -: 5799:  const bool has_tests_to_run =
    #####: 5800:      FilterTests(should_shard ? HONOR_SHARDING_PROTOCOL
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5800-block  0
    %%%%%: 5800-block  1
    %%%%%: 5800-block  2
call    2 never executed
    #####: 5801:                               : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5802:
        -: 5803:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
    #####: 5804:  if (GTEST_FLAG_GET(list_tests)) {
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5805:    // This must be called *after* FilterTests() has been called.
    #####: 5806:    ListTestsMatchingFilter();
    %%%%%: 5806-block  0
call    0 never executed
    #####: 5807:    return true;
        -: 5808:  }
        -: 5809:
    #####: 5810:  random_seed_ = GetRandomSeedFromFlag(GTEST_FLAG_GET(random_seed));
    %%%%%: 5810-block  0
call    0 never executed
        -: 5811:
        -: 5812:  // True if and only if at least one test has failed.
    #####: 5813:  bool failed = false;
        -: 5814:
    #####: 5815:  TestEventListener* repeater = listeners()->repeater();
call    0 never executed
call    1 never executed
        -: 5816:
    #####: 5817:  start_timestamp_ = GetTimeInMillis();
call    0 never executed
    #####: 5818:  repeater->OnTestProgramStart(*parent_);
call    0 never executed
        -: 5819:
        -: 5820:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5821:  // when we are inside the subprocess of a death test.
    #####: 5822:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG_GET(repeat);
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5822-block  0
    %%%%%: 5822-block  1
        -: 5823:
        -: 5824:  // Repeats forever if the repeat count is negative.
    #####: 5825:  const bool gtest_repeat_forever = repeat < 0;
        -: 5826:
        -: 5827:  // Should test environments be set up and torn down for each repeat, or only
        -: 5828:  // set up on the first and torn down on the last iteration? If there is no
        -: 5829:  // "last" iteration because the tests will repeat forever, always recreate the
        -: 5830:  // environments to avoid leaks in case one of the environments is using
        -: 5831:  // resources that are external to this process. Without this check there would
        -: 5832:  // be no way to clean up those external resources automatically.
    #####: 5833:  const bool recreate_environments_when_repeating =
    #####: 5834:      GTEST_FLAG_GET(recreate_environments_when_repeating) ||
    %%%%%: 5834-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5834-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 5834-block  2
    %%%%%: 5834-block  3
        -: 5835:      gtest_repeat_forever;
        -: 5836:
    #####: 5837:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
    %%%%%: 5837-block  0
    %%%%%: 5837-block  1
    %%%%%: 5837-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    %%%%%: 5837-block  3
branch  2 never executed
branch  3 never executed (fallthrough)
        -: 5838:    // We want to preserve failures generated by ad-hoc test
        -: 5839:    // assertions executed before RUN_ALL_TESTS().
    #####: 5840:    ClearNonAdHocTestResult();
    %%%%%: 5840-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5841:
    #####: 5842:    Timer timer;
    %%%%%: 5842-block  0
call    0 never executed
        -: 5843:
        -: 5844:    // Shuffles test suites and tests if requested.
    #####: 5845:    if (has_tests_to_run && GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5845-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 5846:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5846-block  0
call    0 never executed
call    1 never executed
        -: 5847:      // This should be done before calling OnTestIterationStart(),
        -: 5848:      // such that a test event listener can see the actual test order
        -: 5849:      // in the event.
    #####: 5850:      ShuffleTests();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5851:    }
        -: 5852:
        -: 5853:    // Tells the unit test event listeners that the tests are about to start.
    #####: 5854:    repeater->OnTestIterationStart(*parent_, i);
    %%%%%: 5854-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5855:
        -: 5856:    // Runs each test suite if there is at least one test to run.
    #####: 5857:    if (has_tests_to_run) {
    %%%%%: 5857-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5858:      // Sets up all environments beforehand. If test environments aren't
        -: 5859:      // recreated for each iteration, only do so on the first iteration.
    #####: 5860:      if (i == 0 || recreate_environments_when_repeating) {
    %%%%%: 5860-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5860-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 5861:        repeater->OnEnvironmentsSetUpStart(*parent_);
    %%%%%: 5861-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5862:        ForEach(environments_, SetUpEnvironment);
    %%%%%: 5862-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5863:        repeater->OnEnvironmentsSetUpEnd(*parent_);
    %%%%%: 5863-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5864:      }
        -: 5865:
        -: 5866:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5867:      // during global set-up.
    #####: 5868:      if (Test::IsSkipped()) {
    %%%%%: 5868-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5868-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 5869:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5870:        // emitted by default.
        -: 5871:        TestResult& test_result =
    #####: 5872:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5872-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5872-block  1
call    3 never executed
    #####: 5873:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5873-block  0
    %%%%%: 5873-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 5874:          const TestPartResult& test_part_result =
    #####: 5875:              test_result.GetTestPartResult(j);
    %%%%%: 5875-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5876:          if (test_part_result.type() == TestPartResult::kSkip) {
    %%%%%: 5876-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 5877:            const std::string& result = test_part_result.message();
    %%%%%: 5877-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 5877-block  1
call    4 never executed
    $$$$$: 5877-block  2
    #####: 5878:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 5879:          }
    %%%%%: 5879-block  0
call    0 never executed
    $$$$$: 5879-block  1
call    1 never executed
        -: 5880:        }
    #####: 5881:        fflush(stdout);
    %%%%%: 5881-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5881-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 5882:      } else if (!Test::HasFatalFailure()) {
    %%%%%: 5882-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5882-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 5883:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5883-block  0
    %%%%%: 5883-block  1
    %%%%%: 5883-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 5884:             test_index++) {
    #####: 5885:          GetMutableSuiteCase(test_index)->Run();
    %%%%%: 5885-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5885-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 5886:          if (GTEST_FLAG_GET(fail_fast) &&
    %%%%%: 5886-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5886-block  1
    %%%%%: 5886-block  2
    %%%%%: 5886-block  3
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 5887:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5887-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5887-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5887-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    #####: 5888:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5888-block  0
    %%%%%: 5888-block  1
    %%%%%: 5888-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 5889:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5889-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5889-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5890:            }
    #####: 5891:            break;
    %%%%%: 5891-block  0
        -: 5892:          }
        -: 5893:        }
    #####: 5894:      } else if (Test::HasFatalFailure()) {
    %%%%%: 5894-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5894-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
        -: 5895:        // If there was a fatal failure during the global setup then we know we
        -: 5896:        // aren't going to run any tests. Explicitly mark all of the tests as
        -: 5897:        // skipped to make this obvious in the output.
    #####: 5898:        for (int test_index = 0; test_index < total_test_suite_count();
    %%%%%: 5898-block  0
    %%%%%: 5898-block  1
    %%%%%: 5898-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 5899:             test_index++) {
    #####: 5900:          GetMutableSuiteCase(test_index)->Skip();
    %%%%%: 5900-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5900-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -: 5901:        }
        -: 5902:      }
        -: 5903:
        -: 5904:      // Tears down all environments in reverse order afterwards. If test
        -: 5905:      // environments aren't recreated for each iteration, only do so on the
        -: 5906:      // last iteration.
    #####: 5907:      if (i == repeat - 1 || recreate_environments_when_repeating) {
    %%%%%: 5907-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5907-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 5908:        repeater->OnEnvironmentsTearDownStart(*parent_);
    %%%%%: 5908-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5909:        std::for_each(environments_.rbegin(), environments_.rend(),
    %%%%%: 5909-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    $$$$$: 5909-block  1
    $$$$$: 5909-block  2
        -: 5910:                      TearDownEnvironment);
    #####: 5911:        repeater->OnEnvironmentsTearDownEnd(*parent_);
    %%%%%: 5911-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5912:      }
        -: 5913:    }
        -: 5914:
    #####: 5915:    elapsed_time_ = timer.Elapsed();
    %%%%%: 5915-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5916:
        -: 5917:    // Tells the unit test event listener that the tests have just finished.
    #####: 5918:    repeater->OnTestIterationEnd(*parent_, i);
    %%%%%: 5918-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5919:
        -: 5920:    // Gets the result and clears it.
    #####: 5921:    if (!Passed()) {
    %%%%%: 5921-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5921-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 5922:      failed = true;
    %%%%%: 5922-block  0
        -: 5923:    }
        -: 5924:
        -: 5925:    // Restores the original test order after the iteration.  This
        -: 5926:    // allows the user to quickly repro a failure that happens in the
        -: 5927:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5928:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5929:    // case the user somehow changes the value of the flag somewhere
        -: 5930:    // (it's always safe to unshuffle the tests).
    #####: 5931:    UnshuffleTests();
    %%%%%: 5931-block  0
call    0 never executed
        -: 5932:
    #####: 5933:    if (GTEST_FLAG_GET(shuffle)) {
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 5934:      // Picks a new random seed for each iteration.
    #####: 5935:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5935-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5935-block  1
        -: 5936:    }
        -: 5937:  }
        -: 5938:
    #####: 5939:  repeater->OnTestProgramEnd(*parent_);
    %%%%%: 5939-block  0
call    0 never executed
        -: 5940:
    #####: 5941:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5942:    ColoredPrintf(
    %%%%%: 5942-block  0
call    0 never executed
        -: 5943:        GTestColor::kRed,
        -: 5944:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5945:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5946:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5947:        " will start to enforce the valid usage. "
        -: 5948:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5949:#if GTEST_FOR_GOOGLE_
        -: 5950:    ColoredPrintf(GTestColor::kRed,
        -: 5951:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5952:#endif  // GTEST_FOR_GOOGLE_
        -: 5953:  }
        -: 5954:
    #####: 5955:  return !failed;
    %%%%%: 5955-block  0
        -: 5956:}
        -: 5957:
        -: 5958:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5959:// if the variable is present. If a file already exists at this location, this
        -: 5960:// function will write over it. If the variable is present, but the file cannot
        -: 5961:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 0 returned 0% blocks executed 0%
    #####: 5962:void WriteToShardStatusFileIfNeeded() {
    #####: 5963:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
    %%%%%: 5963-block  0
call    0 never executed
    #####: 5964:  if (test_shard_file != nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5965:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5965-block  0
call    0 never executed
    #####: 5966:    if (file == nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5967:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5967-block  0
call    0 never executed
        -: 5968:                    "Could not write to the test shard status file \"%s\" "
        -: 5969:                    "specified by the %s environment variable.\n",
        -: 5970:                    test_shard_file, kTestShardStatusFile);
    #####: 5971:      fflush(stdout);
call    0 never executed
call    1 never executed
    #####: 5972:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5973:    }
    #####: 5974:    fclose(file);
    %%%%%: 5974-block  0
call    0 never executed
        -: 5975:  }
    #####: 5976:}
        -: 5977:
        -: 5978:// Checks whether sharding is enabled by examining the relevant
        -: 5979:// environment variable values. If the variables are present,
        -: 5980:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5981:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5982:// disabled because it must only be applied to the original test
        -: 5983:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 0 returned 0% blocks executed 0%
    #####: 5984:bool ShouldShard(const char* total_shards_env, const char* shard_index_env,
        -: 5985:                 bool in_subprocess_for_death_test) {
    #####: 5986:  if (in_subprocess_for_death_test) {
    %%%%%: 5986-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 5987:    return false;
    %%%%%: 5987-block  0
        -: 5988:  }
        -: 5989:
    #####: 5990:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
    %%%%%: 5990-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 5991:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
    %%%%%: 5991-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 5992:
    #####: 5993:  if (total_shards == -1 && shard_index == -1) {
    %%%%%: 5993-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5993-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 5994:    return false;
    %%%%%: 5994-block  0
    #####: 5995:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 5995-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 5995-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 5996:    const Message msg = Message() << "Invalid environment variables: you have "
    %%%%%: 5996-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5996-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5996-block  2
call    6 never executed
    $$$$$: 5996-block  3
call    7 never executed
    $$$$$: 5996-block  4
    #####: 5997:                                  << kTestShardIndex << " = " << shard_index
    %%%%%: 5997-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5997-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 5997-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 5998:                                  << ", but have left " << kTestTotalShards
    %%%%%: 5998-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5998-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 5999:                                  << " unset.\n";
    %%%%%: 5999-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 5999-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6000:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6000-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6000-block  1
call    7 never executed
    $$$$$: 6000-block  2
call    8 never executed
    $$$$$: 6000-block  3
    #####: 6001:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6001-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6002:    exit(EXIT_FAILURE);
    %%%%%: 6002-block  0
call    0 never executed
    #####: 6003:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 6003-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6003-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6003-block  2
call    4 never executed
    #####: 6004:    const Message msg = Message()
    %%%%%: 6004-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6004-block  1
call    3 never executed
    $$$$$: 6004-block  2
call    4 never executed
    $$$$$: 6004-block  3
    #####: 6005:                        << "Invalid environment variables: you have "
    %%%%%: 6005-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6006:                        << kTestTotalShards << " = " << total_shards
    %%%%%: 6006-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6006-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6006-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6007:                        << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 6007-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6007-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6007-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6007-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6008:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6008-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6008-block  1
call    7 never executed
    $$$$$: 6008-block  2
call    8 never executed
    $$$$$: 6008-block  3
    #####: 6009:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6009-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6010:    exit(EXIT_FAILURE);
    %%%%%: 6010-block  0
call    0 never executed
    #####: 6011:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 6011-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6011-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    $$$$$: 6011-block  2
call    4 never executed
        -: 6012:    const Message msg =
    #####: 6013:        Message() << "Invalid environment variables: we require 0 <= "
    %%%%%: 6013-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6013-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6013-block  2
call    6 never executed
    $$$$$: 6013-block  3
call    7 never executed
    $$$$$: 6013-block  4
    #####: 6014:                  << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 6014-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6014-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6014-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    #####: 6015:                  << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 6015-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6015-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6015-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6015-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    #####: 6016:                  << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 6016-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6016-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6016-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6016-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6016-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed (throw)
    %%%%%: 6016-block  5
call   15 never executed
branch 16 never executed (fallthrough)
branch 17 never executed (throw)
    #####: 6017:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6017-block  0
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6017-block  1
call    7 never executed
    $$$$$: 6017-block  2
call    8 never executed
    $$$$$: 6017-block  3
    #####: 6018:    fflush(stdout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6018-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6019:    exit(EXIT_FAILURE);
    %%%%%: 6019-block  0
call    0 never executed
    =====: 6020:  }
    $$$$$: 6020-block  0
call    0 never executed
        -: 6021:
    #####: 6022:  return total_shards > 1;
    %%%%%: 6022-block  0
        -: 6023:}
        -: 6024:
        -: 6025:// Parses the environment variable var as an Int32. If it is unset,
        -: 6026:// returns default_val. If it is not an Int32, prints an error
        -: 6027:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 0 returned 0% blocks executed 0%
    #####: 6028:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
    #####: 6029:  const char* str_val = posix::GetEnv(var);
    %%%%%: 6029-block  0
call    0 never executed
    #####: 6030:  if (str_val == nullptr) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6031:    return default_val;
    %%%%%: 6031-block  0
        -: 6032:  }
        -: 6033:
        -: 6034:  int32_t result;
    #####: 6035:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 6035-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6035-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6035-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6035-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6035-block  4
call   12 never executed
branch 13 never executed (fallthrough)
branch 14 never executed
    $$$$$: 6035-block  5
call   15 never executed
    $$$$$: 6035-block  6
        -: 6036:                  str_val, &result)) {
    #####: 6037:    exit(EXIT_FAILURE);
    %%%%%: 6037-block  0
call    0 never executed
        -: 6038:  }
    #####: 6039:  return result;
    %%%%%: 6039-block  0
        -: 6040:}
        -: 6041:
        -: 6042:// Given the total number of shards, the shard index, and the test id,
        -: 6043:// returns true if and only if the test should be run on this shard. The test id
        -: 6044:// is some arbitrary but unique non-negative integer assigned to each test
        -: 6045:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 6046:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 6047:  return (test_id % total_shards) == shard_index;
    %%%%%: 6047-block  0
        -: 6048:}
        -: 6049:
        -: 6050:// Compares the name of each test with the user-specified filter to
        -: 6051:// decide whether the test should be run, then records the result in
        -: 6052:// each TestSuite and TestInfo object.
        -: 6053:// If shard_tests == true, further filters tests based on sharding
        -: 6054:// variables in the environment - see
        -: 6055:// https://github.com/google/googletest/blob/main/docs/advanced.md
        -: 6056:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 0 returned 0% blocks executed 0%
    #####: 6057:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        -: 6058:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL
    #####: 6059:                                   ? Int32FromEnvOrDie(kTestTotalShards, -1)
    %%%%%: 6059-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6059-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6059-block  2
    %%%%%: 6059-block  3
    #####: 6060:                                   : -1;
        -: 6061:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL
    #####: 6062:                                  ? Int32FromEnvOrDie(kTestShardIndex, -1)
    %%%%%: 6062-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6062-block  1
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6062-block  2
    %%%%%: 6062-block  3
    #####: 6063:                                  : -1;
        -: 6064:
        -: 6065:  const PositiveAndNegativeUnitTestFilter gtest_flag_filter(
    #####: 6066:      GTEST_FLAG_GET(filter));
    %%%%%: 6066-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6067:  const UnitTestFilter disable_test_filter(kDisableTestFilter);
    %%%%%: 6067-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6067-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6067-block  2
call    6 never executed
    $$$$$: 6067-block  3
call    7 never executed
    $$$$$: 6067-block  4
    $$$$$: 6067-block  5
        -: 6068:  // num_runnable_tests are the number of tests that will
        -: 6069:  // run across all shards (i.e., match filter and are not disabled).
        -: 6070:  // num_selected_tests are the number of tests to be run on
        -: 6071:  // this shard.
    #####: 6072:  int num_runnable_tests = 0;
    #####: 6073:  int num_selected_tests = 0;
    #####: 6074:  for (auto* test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6074-block  0
call    2 never executed
call    3 never executed
    %%%%%: 6074-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6075:    const std::string& test_suite_name = test_suite->name();
    %%%%%: 6075-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6075-block  1
call    4 never executed
    $$$$$: 6075-block  2
    #####: 6076:    test_suite->set_should_run(false);
call    0 never executed
        -: 6077:
    #####: 6078:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6078-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6079:      TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6079-block  0
call    0 never executed
call    1 never executed
    #####: 6080:      const std::string test_name(test_info->name());
    %%%%%: 6080-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    $$$$$: 6080-block  1
        -: 6081:      // A test is disabled if test suite name or test name matches
        -: 6082:      // kDisableTestFilter.
        -: 6083:      const bool is_disabled =
    #####: 6084:          disable_test_filter.MatchesName(test_suite_name) ||
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6084-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6084-block  1
    %%%%%: 6084-block  2
    #####: 6085:          disable_test_filter.MatchesName(test_name);
    %%%%%: 6085-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6085-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6086:      test_info->is_disabled_ = is_disabled;
        -: 6087:
        -: 6088:      const bool matches_filter =
    #####: 6089:          gtest_flag_filter.MatchesTest(test_suite_name, test_name);
    %%%%%: 6089-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6090:      test_info->matches_filter_ = matches_filter;
        -: 6091:
    #####: 6092:      const bool is_runnable =
    #####: 6093:          (GTEST_FLAG_GET(also_run_disabled_tests) || !is_disabled) &&
    %%%%%: 6093-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6093-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6093-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6093-block  3
    %%%%%: 6093-block  4
        -: 6094:          matches_filter;
        -: 6095:
        -: 6096:      const bool is_in_another_shard =
    #####: 6097:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
    %%%%%: 6097-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6097-block  1
    %%%%%: 6097-block  2
    #####: 6098:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 6098-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6099:      test_info->is_in_another_shard_ = is_in_another_shard;
    #####: 6100:      const bool is_selected = is_runnable && !is_in_another_shard;
    %%%%%: 6100-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6100-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6100-block  2
    %%%%%: 6100-block  3
        -: 6101:
    #####: 6102:      num_runnable_tests += is_runnable;
    #####: 6103:      num_selected_tests += is_selected;
        -: 6104:
    #####: 6105:      test_info->should_run_ = is_selected;
    #####: 6106:      test_suite->set_should_run(test_suite->should_run() || is_selected);
    %%%%%: 6106-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6106-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6106-block  2
    %%%%%: 6106-block  3
    %%%%%: 6106-block  4
call    5 never executed
    #####: 6107:    }
call    0 never executed
    $$$$$: 6107-block  0
call    1 never executed
    #####: 6108:  }
    %%%%%: 6108-block  0
call    0 never executed
    $$$$$: 6108-block  1
call    1 never executed
    #####: 6109:  return num_selected_tests;
    %%%%%: 6109-block  0
    #####: 6110:}
    %%%%%: 6110-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6110-block  1
call    2 never executed
    $$$$$: 6110-block  2
call    3 never executed
        -: 6111:
        -: 6112:// Prints the given C-string on a single line by replacing all '\n'
        -: 6113:// characters with string "\\n".  If the output takes more than
        -: 6114:// max_length characters, only prints the first max_length characters
        -: 6115:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 6116:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 6117:  if (str != nullptr) {
    %%%%%: 6117-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6118:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 6118-block  0
    %%%%%: 6118-block  1
    %%%%%: 6118-block  2
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6119:      if (i >= max_length) {
    %%%%%: 6119-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6120:        printf("...");
    %%%%%: 6120-block  0
call    0 never executed
    #####: 6121:        break;
        -: 6122:      }
    #####: 6123:      if (*str == '\n') {
    %%%%%: 6123-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6124:        printf("\\n");
    %%%%%: 6124-block  0
call    0 never executed
    #####: 6125:        i += 2;
        -: 6126:      } else {
    #####: 6127:        printf("%c", *str);
    %%%%%: 6127-block  0
call    0 never executed
    #####: 6128:        ++i;
        -: 6129:      }
        -: 6130:    }
        -: 6131:  }
    #####: 6132:}
        -: 6133:
        -: 6134:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 6135:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 6136:  // Print at most this many characters for each type/value parameter.
    #####: 6137:  const int kMaxParamLength = 250;
        -: 6138:
    #####: 6139:  for (auto* test_suite : test_suites_) {
    %%%%%: 6139-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6139-block  1
call    2 never executed
    %%%%%: 6139-block  2
call    3 never executed
    %%%%%: 6139-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6140:    bool printed_test_suite_name = false;
        -: 6141:
    #####: 6142:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 6142-block  0
    %%%%%: 6142-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6143:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 6143-block  0
call    0 never executed
call    1 never executed
    #####: 6144:      if (test_info->matches_filter_) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6145:        if (!printed_test_suite_name) {
    %%%%%: 6145-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6146:          printed_test_suite_name = true;
    #####: 6147:          printf("%s.", test_suite->name());
    %%%%%: 6147-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6148:          if (test_suite->type_param() != nullptr) {
    %%%%%: 6148-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6149:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 6149-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6150:            // We print the type parameter on a single line to make
        -: 6151:            // the output easy to parse by a program.
    #####: 6152:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 6152-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6153:          }
    #####: 6154:          printf("\n");
    %%%%%: 6154-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6155:        }
    #####: 6156:        printf("  %s", test_info->name());
    %%%%%: 6156-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6157:        if (test_info->value_param() != nullptr) {
    %%%%%: 6157-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6158:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 6158-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6159:          // We print the value parameter on a single line to make the
        -: 6160:          // output easy to parse by a program.
    #####: 6161:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 6161-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6162:        }
    #####: 6163:        printf("\n");
    %%%%%: 6163-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6164:      }
        -: 6165:    }
        -: 6166:  }
    #####: 6167:  fflush(stdout);
    %%%%%: 6167-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6167-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6168:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 6168-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6169:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 6169-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6169-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6169-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%: 6169-block  3
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%: 6169-block  4
    %%%%%: 6169-block  5
    %%%%%: 6169-block  6
branch 10 never executed (fallthrough)
branch 11 never executed
    #####: 6170:    FILE* fileout = OpenFileForWriting(
    %%%%%: 6170-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6170-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6170-block  2
call    7 never executed
    $$$$$: 6170-block  3
call    8 never executed
    $$$$$: 6170-block  4
    $$$$$: 6170-block  5
    #####: 6171:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
    %%%%%: 6171-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
call    4 never executed
    $$$$$: 6171-block  1
call    5 never executed
    $$$$$: 6171-block  2
    #####: 6172:    std::stringstream stream;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6173:    if (output_format == "xml") {
    %%%%%: 6173-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6173-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6174:      XmlUnitTestResultPrinter(
    %%%%%: 6174-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6174-block  1
call    4 never executed
    $$$$$: 6174-block  2
call    5 never executed
    $$$$$: 6174-block  3
    #####: 6175:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6175-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6175-block  1
call    4 never executed
    $$$$$: 6175-block  2
    #####: 6176:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 6176-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6177:    } else if (output_format == "json") {
    %%%%%: 6177-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6177-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6178:      JsonUnitTestResultPrinter(
    %%%%%: 6178-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%: 6178-block  1
call    4 never executed
    $$$$$: 6178-block  2
call    5 never executed
    $$$$$: 6178-block  3
    #####: 6179:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6179-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
call    3 never executed
    $$$$$: 6179-block  1
call    4 never executed
    $$$$$: 6179-block  2
    #####: 6180:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6180-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6181:    }
    #####: 6182:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6182-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6182-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$: 6182-block  2
    #####: 6183:    fclose(fileout);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6184:  }
    %%%%%: 6184-block  0
call    0 never executed
    $$$$$: 6184-block  1
call    1 never executed
    #####: 6185:}
    %%%%%: 6185-block  0
call    0 never executed
    $$$$$: 6185-block  1
call    1 never executed
        -: 6186:
        -: 6187:// Sets the OS stack trace getter.
        -: 6188://
        -: 6189:// Does nothing if the input and the current OS stack trace getter are
        -: 6190:// the same; otherwise, deletes the old getter and makes the input the
        -: 6191:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6192:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6193:    OsStackTraceGetterInterface* getter) {
    #####: 6194:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6194-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6195:    delete os_stack_trace_getter_;
    %%%%%: 6195-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6195-block  1
call    2 never executed
    #####: 6196:    os_stack_trace_getter_ = getter;
    %%%%%: 6196-block  0
        -: 6197:  }
    #####: 6198:}
        -: 6199:
        -: 6200:// Returns the current OS stack trace getter if it is not NULL;
        -: 6201:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6202:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 0 returned 0% blocks executed 0%
    #####: 6203:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
    #####: 6204:  if (os_stack_trace_getter_ == nullptr) {
    %%%%%: 6204-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6205:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6206:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6207:#else
    #####: 6208:    os_stack_trace_getter_ = new OsStackTraceGetter;
    %%%%%: 6208-block  0
call    0 never executed
call    1 never executed
        -: 6209:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6210:  }
        -: 6211:
    #####: 6212:  return os_stack_trace_getter_;
    %%%%%: 6212-block  0
        -: 6213:}
        -: 6214:
        -: 6215:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 6216:TestResult* UnitTestImpl::current_test_result() {
    #####: 6217:  if (current_test_info_ != nullptr) {
    %%%%%: 6217-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6218:    return &current_test_info_->result_;
    %%%%%: 6218-block  0
        -: 6219:  }
    #####: 6220:  if (current_test_suite_ != nullptr) {
    %%%%%: 6220-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6221:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6221-block  0
        -: 6222:  }
    #####: 6223:  return &ad_hoc_test_result_;
    %%%%%: 6223-block  0
        -: 6224:}
        -: 6225:
        -: 6226:// Shuffles all test suites, and the tests within each test suite,
        -: 6227:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6228:void UnitTestImpl::ShuffleTests() {
        -: 6229:  // Shuffles the death test suites.
    #####: 6230:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6230-block  0
call    0 never executed
call    1 never executed
        -: 6231:
        -: 6232:  // Shuffles the non-death test suites.
    #####: 6233:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6234:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6235:
        -: 6236:  // Shuffles the tests inside each test suite.
    #####: 6237:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6237-block  0
call    2 never executed
    %%%%%: 6237-block  1
call    3 never executed
    %%%%%: 6237-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed (fallthrough)
    #####: 6238:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
        -: 6239:  }
    #####: 6240:}
    %%%%%: 6240-block  0
        -: 6241:
        -: 6242:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6243:void UnitTestImpl::UnshuffleTests() {
    #####: 6244:  for (size_t i = 0; i < test_suites_.size(); i++) {
    %%%%%: 6244-block  0
    %%%%%: 6244-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
        -: 6245:    // Unshuffles the tests in each test suite.
    #####: 6246:    test_suites_[i]->UnshuffleTests();
    %%%%%: 6246-block  0
call    0 never executed
call    1 never executed
        -: 6247:    // Resets the index of each test suite.
    #####: 6248:    test_suite_indices_[i] = static_cast<int>(i);
call    0 never executed
        -: 6249:  }
    #####: 6250:}
        -: 6251:
        -: 6252:// Returns the current OS stack trace as an std::string.
        -: 6253://
        -: 6254:// The maximum number of stack frames to be included is specified by
        -: 6255:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6256:// specifies the number of top frames to be skipped, which doesn't
        -: 6257:// count against the number of frames to be included.
        -: 6258://
        -: 6259:// For example, if Foo() calls Bar(), which in turn calls
        -: 6260:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6261:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
        -: 6262:GTEST_NO_INLINE_ GTEST_NO_TAIL_CALL_ std::string
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 6263:GetCurrentOsStackTraceExceptTop(int skip_count) {
        -: 6264:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6265:  // to what the user really wants to skip.
    #####: 6266:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6266-block  0
call    0 never executed
call    1 never executed
        -: 6267:}
        -: 6268:
        -: 6269:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6270:// suppress unreachable code warnings.
        -: 6271:namespace {
        -: 6272:class ClassUniqueToAlwaysTrue {};
        -: 6273:}  // namespace
        -: 6274:
function _ZN7testing8internal6IsTrueEb called 17 returned 100% blocks executed 100%
       17: 6275:bool IsTrue(bool condition) { return condition; }
       17: 6275-block  0
        -: 6276:
function _ZN7testing8internal10AlwaysTrueEv called 8 returned 100% blocks executed 67%
        8: 6277:bool AlwaysTrue() {
        -: 6278:#if GTEST_HAS_EXCEPTIONS
        -: 6279:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6280:  // but it makes the compiler think that it may throw.
       8*: 6281:  if (IsTrue(false)) throw ClassUniqueToAlwaysTrue();
        8: 6281-block  0
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    %%%%%: 6281-block  1
call    3 never executed
call    4 never executed
        -: 6282:#endif  // GTEST_HAS_EXCEPTIONS
        8: 6283:  return true;
        8: 6283-block  0
        -: 6284:}
        -: 6285:
        -: 6286:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6287:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6288:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6289:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6290:  const size_t prefix_len = strlen(prefix);
    #####: 6291:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6291-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6292:    *pstr += prefix_len;
    #####: 6293:    return true;
    %%%%%: 6293-block  0
        -: 6294:  }
    #####: 6295:  return false;
    %%%%%: 6295-block  0
        -: 6296:}
        -: 6297:
        -: 6298:// Parses a string as a command line flag.  The string should have
        -: 6299:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6300:// part can be omitted.
        -: 6301://
        -: 6302:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 0 returned 0% blocks executed 0%
    #####: 6303:static const char* ParseFlagValue(const char* str, const char* flag_name,
        -: 6304:                                  bool def_optional) {
        -: 6305:  // str and flag must not be NULL.
    #####: 6306:  if (str == nullptr || flag_name == nullptr) return nullptr;
    %%%%%: 6306-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6306-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6306-block  2
        -: 6307:
        -: 6308:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
        -: 6309:  const std::string flag_str =
    #####: 6310:      std::string("--") + GTEST_FLAG_PREFIX_ + flag_name;
    %%%%%: 6310-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6310-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6310-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6310-block  3
call    9 never executed
call   10 never executed
    $$$$$: 6310-block  4
call   11 never executed
    $$$$$: 6310-block  5
call   12 never executed
    $$$$$: 6310-block  6
    $$$$$: 6310-block  7
    $$$$$: 6310-block  8
    #####: 6311:  const size_t flag_len = flag_str.length();
call    0 never executed
    #####: 6312:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6312-block  0
        -: 6313:
        -: 6314:  // Skips the flag name.
    #####: 6315:  const char* flag_end = str + flag_len;
        -: 6316:
        -: 6317:  // When def_optional is true, it's OK to not have a "=value" part.
    #####: 6318:  if (def_optional && (flag_end[0] == '\0')) {
    %%%%%: 6318-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6318-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6319:    return flag_end;
    %%%%%: 6319-block  0
        -: 6320:  }
        -: 6321:
        -: 6322:  // If def_optional is true and there are more characters after the
        -: 6323:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6324:  // the flag name.
    #####: 6325:  if (flag_end[0] != '=') return nullptr;
    %%%%%: 6325-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6325-block  1
        -: 6326:
        -: 6327:  // Returns the string after "=".
    #####: 6328:  return flag_end + 1;
    %%%%%: 6328-block  0
    #####: 6329:}
    %%%%%: 6329-block  0
call    0 never executed
        -: 6330:
        -: 6331:// Parses a string for a bool flag, in the form of either
        -: 6332:// "--flag=value" or "--flag".
        -: 6333://
        -: 6334:// In the former case, the value is taken as true as long as it does
        -: 6335:// not start with '0', 'f', or 'F'.
        -: 6336://
        -: 6337:// In the latter case, the value is taken as true.
        -: 6338://
        -: 6339:// On success, stores the value of the flag in *value, and returns
        -: 6340:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL9ParseFlagEPKcS2_Pb called 0 returned 0% blocks executed 0%
    #####: 6341:static bool ParseFlag(const char* str, const char* flag_name, bool* value) {
        -: 6342:  // Gets the value of the flag as a string.
    #####: 6343:  const char* const value_str = ParseFlagValue(str, flag_name, true);
    %%%%%: 6343-block  0
call    0 never executed
        -: 6344:
        -: 6345:  // Aborts if the parsing failed.
    #####: 6346:  if (value_str == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6346-block  0
        -: 6347:
        -: 6348:  // Converts the string value to a bool.
    #####: 6349:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6349-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6349-block  1
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6349-block  2
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%: 6349-block  3
    %%%%%: 6349-block  4
    #####: 6350:  return true;
    %%%%%: 6350-block  0
        -: 6351:}
        -: 6352:
        -: 6353:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6354://
        -: 6355:// On success, stores the value of the flag in *value, and returns
        -: 6356:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal9ParseFlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6357:bool ParseFlag(const char* str, const char* flag_name, int32_t* value) {
        -: 6358:  // Gets the value of the flag as a string.
    #####: 6359:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6359-block  0
call    0 never executed
        -: 6360:
        -: 6361:  // Aborts if the parsing failed.
    #####: 6362:  if (value_str == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6362-block  0
        -: 6363:
        -: 6364:  // Sets *value to the value of the flag.
    #####: 6365:  return ParseInt32(Message() << "The value of flag --" << flag_name, value_str,
    %%%%%: 6365-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6365-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6365-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6365-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%: 6365-block  4
call   12 never executed
    $$$$$: 6365-block  5
call   13 never executed
    #####: 6366:                    value);
    %%%%%: 6366-block  0
        -: 6367:}
        -: 6368:
        -: 6369:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6370://
        -: 6371:// On success, stores the value of the flag in *value, and returns
        -: 6372:// true.  On failure, returns false without changing *value.
        -: 6373:template <typename String>
function _ZN7testing8internalL9ParseFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 0 returned 0% blocks executed 0%
    #####: 6374:static bool ParseFlag(const char* str, const char* flag_name, String* value) {
        -: 6375:  // Gets the value of the flag as a string.
    #####: 6376:  const char* const value_str = ParseFlagValue(str, flag_name, false);
    %%%%%: 6376-block  0
call    0 never executed
        -: 6377:
        -: 6378:  // Aborts if the parsing failed.
    #####: 6379:  if (value_str == nullptr) return false;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6379-block  0
        -: 6380:
        -: 6381:  // Sets *value to the value of the flag.
    #####: 6382:  *value = value_str;
    %%%%%: 6382-block  0
call    0 never executed
    #####: 6383:  return true;
        -: 6384:}
        -: 6385:
        -: 6386:// Determines whether a string has a prefix that Google Test uses for its
        -: 6387:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6388:// If Google Test detects that a command line flag has its prefix but is not
        -: 6389:// recognized, it will print its help message. Flags starting with
        -: 6390:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6391:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6392:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6393:  return (SkipPrefix("--", &str) || SkipPrefix("-", &str) ||
    %%%%%: 6393-block  0
call    0 never executed
    %%%%%: 6393-block  1
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####: 6394:          SkipPrefix("/", &str)) &&
    %%%%%: 6394-block  0
call    0 never executed
    #####: 6395:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6395-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6395-block  1
    %%%%%: 6395-block  2
    #####: 6396:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6396-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####: 6397:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6397-block  0
call    0 never executed
    %%%%%: 6397-block  1
        -: 6398:}
        -: 6399:
        -: 6400:// Prints a string containing code-encoded text.  The following escape
        -: 6401:// sequences can be used in the string to control the text color:
        -: 6402://
        -: 6403://   @@    prints a single '@' character.
        -: 6404://   @R    changes the color to red.
        -: 6405://   @G    changes the color to green.
        -: 6406://   @Y    changes the color to yellow.
        -: 6407://   @D    changes to the default terminal text color.
        -: 6408://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6409:static void PrintColorEncoded(const char* str) {
    #####: 6410:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6410-block  0
        -: 6411:
        -: 6412:  // Conceptually, we split the string into segments divided by escape
        -: 6413:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6414:  // each iteration, the str pointer advances to the beginning of the
        -: 6415:  // next segment.
        -: 6416:  for (;;) {
    #####: 6417:    const char* p = strchr(str, '@');
    #####: 6418:    if (p == nullptr) {
    %%%%%: 6418-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6419:      ColoredPrintf(color, "%s", str);
    %%%%%: 6419-block  0
call    0 never executed
    #####: 6420:      return;
    %%%%%: 6420-block  0
        -: 6421:    }
        -: 6422:
    #####: 6423:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6423-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6423-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%: 6423-block  2
call    7 never executed
    $$$$$: 6423-block  3
call    8 never executed
    $$$$$: 6423-block  4
        -: 6424:
    #####: 6425:    const char ch = p[1];
    #####: 6426:    str = p + 2;
    #####: 6427:    if (ch == '@') {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6428:      ColoredPrintf(color, "@");
    %%%%%: 6428-block  0
call    0 never executed
    #####: 6429:    } else if (ch == 'D') {
    %%%%%: 6429-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6430:      color = GTestColor::kDefault;
    %%%%%: 6430-block  0
    #####: 6431:    } else if (ch == 'R') {
    %%%%%: 6431-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6432:      color = GTestColor::kRed;
    %%%%%: 6432-block  0
    #####: 6433:    } else if (ch == 'G') {
    %%%%%: 6433-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6434:      color = GTestColor::kGreen;
    %%%%%: 6434-block  0
    #####: 6435:    } else if (ch == 'Y') {
    %%%%%: 6435-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6436:      color = GTestColor::kYellow;
    %%%%%: 6436-block  0
        -: 6437:    } else {
    #####: 6438:      --str;
    %%%%%: 6438-block  0
        -: 6439:    }
    #####: 6440:  }
    %%%%%: 6440-block  0
        -: 6441:}
        -: 6442:
        -: 6443:static const char kColorEncodedHelpMessage[] =
        -: 6444:    "This program contains tests written using " GTEST_NAME_
        -: 6445:    ". You can use the\n"
        -: 6446:    "following command line flags to control its behavior:\n"
        -: 6447:    "\n"
        -: 6448:    "Test Selection:\n"
        -: 6449:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6450:    "list_tests@D\n"
        -: 6451:    "      List the names of all tests instead of running them. The name of\n"
        -: 6452:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6453:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6454:    "filter=@YPOSITIVE_PATTERNS"
        -: 6455:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6456:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6457:    "but\n"
        -: 6458:    "      none of the negative patterns. '?' matches any single character; "
        -: 6459:    "'*'\n"
        -: 6460:    "      matches any substring; ':' separates two patterns.\n"
        -: 6461:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6462:    "also_run_disabled_tests@D\n"
        -: 6463:    "      Run all disabled tests too.\n"
        -: 6464:    "\n"
        -: 6465:    "Test Execution:\n"
        -: 6466:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6467:    "repeat=@Y[COUNT]@D\n"
        -: 6468:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6469:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6470:    "shuffle@D\n"
        -: 6471:    "      Randomize tests' orders on every iteration.\n"
        -: 6472:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6473:    "random_seed=@Y[NUMBER]@D\n"
        -: 6474:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6475:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6476:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6477:    "recreate_environments_when_repeating@D\n"
        -: 6478:    "      Sets up and tears down the global test environment on each repeat\n"
        -: 6479:    "      of the test.\n"
        -: 6480:    "\n"
        -: 6481:    "Test Output:\n"
        -: 6482:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6483:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6484:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6485:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6486:    "brief=1@D\n"
        -: 6487:    "      Only print test failures.\n"
        -: 6488:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6489:    "print_time=0@D\n"
        -: 6490:    "      Don't print the elapsed time of each test.\n"
        -: 6491:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6492:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6493:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6494:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6495:    "given\n"
        -: 6496:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6497:#if GTEST_CAN_STREAM_RESULTS_
        -: 6498:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6499:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6500:    "      Stream test results to the given server.\n"
        -: 6501:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6502:    "\n"
        -: 6503:    "Assertion Behavior:\n"
        -: 6504:#if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6505:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6506:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6507:    "      Set the default death test style.\n"
        -: 6508:#endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6509:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6510:    "break_on_failure@D\n"
        -: 6511:    "      Turn assertion failures into debugger break-points.\n"
        -: 6512:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6513:    "throw_on_failure@D\n"
        -: 6514:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6515:    "      test framework.\n"
        -: 6516:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6517:    "catch_exceptions=0@D\n"
        -: 6518:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6519:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6520:    "\n"
        -: 6521:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6522:    "list_tests@D, you can alternatively set "
        -: 6523:    "the corresponding\n"
        -: 6524:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6525:    "to\n"
        -: 6526:    "disable colored text output, you can either specify "
        -: 6527:    "@G--" GTEST_FLAG_PREFIX_
        -: 6528:    "color=no@D or set\n"
        -: 6529:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6530:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6531:    "\n"
        -: 6532:    "For more information, please read the " GTEST_NAME_
        -: 6533:    " documentation at\n"
        -: 6534:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6535:    "\n"
        -: 6536:    "(not one in your own code or tests), please report it to\n"
        -: 6537:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6538:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 0 returned 0% blocks executed 0%
    #####: 6539:static bool ParseGoogleTestFlag(const char* const arg) {
        -: 6540:#define GTEST_INTERNAL_PARSE_FLAG(flag_name)  \
        -: 6541:  do {                                        \
        -: 6542:    auto value = GTEST_FLAG_GET(flag_name);   \
        -: 6543:    if (ParseFlag(arg, #flag_name, &value)) { \
        -: 6544:      GTEST_FLAG_SET(flag_name, value);       \
        -: 6545:      return true;                            \
        -: 6546:    }                                         \
        -: 6547:  } while (false)
        -: 6548:
    #####: 6549:  GTEST_INTERNAL_PARSE_FLAG(also_run_disabled_tests);
    %%%%%: 6549-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6549-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6549-block  2
    %%%%%: 6549-block  3
    #####: 6550:  GTEST_INTERNAL_PARSE_FLAG(break_on_failure);
    %%%%%: 6550-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6550-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6550-block  2
    %%%%%: 6550-block  3
    #####: 6551:  GTEST_INTERNAL_PARSE_FLAG(catch_exceptions);
    %%%%%: 6551-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6551-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6551-block  2
    %%%%%: 6551-block  3
    #####: 6552:  GTEST_INTERNAL_PARSE_FLAG(color);
    %%%%%: 6552-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6552-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6552-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6552-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6552-block  4
    %%%%%: 6552-block  5
    %%%%%: 6552-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6552-block  7
    $$$$$: 6552-block  8
call   14 never executed
    #####: 6553:  GTEST_INTERNAL_PARSE_FLAG(death_test_style);
    %%%%%: 6553-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6553-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6553-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6553-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6553-block  4
    %%%%%: 6553-block  5
    %%%%%: 6553-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6553-block  7
    $$$$$: 6553-block  8
call   14 never executed
    #####: 6554:  GTEST_INTERNAL_PARSE_FLAG(death_test_use_fork);
    %%%%%: 6554-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6554-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6554-block  2
    %%%%%: 6554-block  3
    #####: 6555:  GTEST_INTERNAL_PARSE_FLAG(fail_fast);
    %%%%%: 6555-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6555-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6555-block  2
    %%%%%: 6555-block  3
    #####: 6556:  GTEST_INTERNAL_PARSE_FLAG(filter);
    %%%%%: 6556-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6556-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6556-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6556-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6556-block  4
    %%%%%: 6556-block  5
    %%%%%: 6556-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6556-block  7
    $$$$$: 6556-block  8
call   14 never executed
    #####: 6557:  GTEST_INTERNAL_PARSE_FLAG(internal_run_death_test);
    %%%%%: 6557-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6557-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6557-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6557-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6557-block  4
    %%%%%: 6557-block  5
    %%%%%: 6557-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6557-block  7
    $$$$$: 6557-block  8
call   14 never executed
    #####: 6558:  GTEST_INTERNAL_PARSE_FLAG(list_tests);
    %%%%%: 6558-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6558-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6558-block  2
    %%%%%: 6558-block  3
    #####: 6559:  GTEST_INTERNAL_PARSE_FLAG(output);
    %%%%%: 6559-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6559-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6559-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6559-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6559-block  4
    %%%%%: 6559-block  5
    %%%%%: 6559-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6559-block  7
    $$$$$: 6559-block  8
call   14 never executed
    #####: 6560:  GTEST_INTERNAL_PARSE_FLAG(brief);
    %%%%%: 6560-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6560-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6560-block  2
    %%%%%: 6560-block  3
    #####: 6561:  GTEST_INTERNAL_PARSE_FLAG(print_time);
    %%%%%: 6561-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6561-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6561-block  2
    %%%%%: 6561-block  3
    #####: 6562:  GTEST_INTERNAL_PARSE_FLAG(print_utf8);
    %%%%%: 6562-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6562-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6562-block  2
    %%%%%: 6562-block  3
    #####: 6563:  GTEST_INTERNAL_PARSE_FLAG(random_seed);
    %%%%%: 6563-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6563-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6563-block  2
    %%%%%: 6563-block  3
    #####: 6564:  GTEST_INTERNAL_PARSE_FLAG(repeat);
    %%%%%: 6564-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6564-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6564-block  2
    %%%%%: 6564-block  3
    #####: 6565:  GTEST_INTERNAL_PARSE_FLAG(recreate_environments_when_repeating);
    %%%%%: 6565-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6565-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6565-block  2
    %%%%%: 6565-block  3
    #####: 6566:  GTEST_INTERNAL_PARSE_FLAG(shuffle);
    %%%%%: 6566-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6566-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6566-block  2
    %%%%%: 6566-block  3
    #####: 6567:  GTEST_INTERNAL_PARSE_FLAG(stack_trace_depth);
    %%%%%: 6567-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6567-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6567-block  2
    %%%%%: 6567-block  3
    #####: 6568:  GTEST_INTERNAL_PARSE_FLAG(stream_result_to);
    %%%%%: 6568-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6568-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6568-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6568-block  3
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%: 6568-block  4
    %%%%%: 6568-block  5
    %%%%%: 6568-block  6
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%: 6568-block  7
    $$$$$: 6568-block  8
call   14 never executed
    #####: 6569:  GTEST_INTERNAL_PARSE_FLAG(throw_on_failure);
    %%%%%: 6569-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6569-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6569-block  2
    %%%%%: 6569-block  3
    #####: 6570:  return false;
    %%%%%: 6570-block  0
        -: 6571:}
        -: 6572:
        -: 6573:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6574:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6575:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6575-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    #####: 6576:  if (!flagfile) {
    %%%%%: 6576-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6577:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG_GET(flagfile)
    %%%%%: 6577-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6577-block  1
call    3 never executed
    %%%%%: 6577-block  2
call    4 never executed
    $$$$$: 6577-block  3
call    5 never executed
    $$$$$: 6577-block  4
    #####: 6578:                      << "\"";
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6578-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6578-block  1
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
        -: 6579:  }
    #####: 6580:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6580-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6581:  posix::FClose(flagfile);
    %%%%%: 6581-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6582:  std::vector<std::string> lines;
    %%%%%: 6582-block  0
call    0 never executed
    #####: 6583:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6584:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6584-block  0
    %%%%%: 6584-block  1
    %%%%%: 6584-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####: 6585:    if (lines[i].empty()) continue;
    %%%%%: 6585-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    %%%%%: 6585-block  1
    #####: 6586:    if (!ParseGoogleTestFlag(lines[i].c_str())) g_help_flag = true;
    %%%%%: 6586-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%: 6586-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%: 6586-block  2
        -: 6587:  }
    #####: 6588:}
    %%%%%: 6588-block  0
call    0 never executed
call    1 never executed
    $$$$$: 6588-block  1
call    2 never executed
    $$$$$: 6588-block  2
call    3 never executed
        -: 6589:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6590:
        -: 6591:// Parses the command line for Google Test flags, without initializing
        -: 6592:// other parts of Google Test.  The type parameter CharType can be
        -: 6593:// instantiated to either char or wchar_t.
        -: 6594:template <typename CharType>
    #####: 6595:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6596:  std::string flagfile_value;
    #####: 6597:  for (int i = 1; i < *argc; i++) {
    #####: 6598:    const std::string arg_string = StreamableToString(argv[i]);
    #####: 6599:    const char* const arg = arg_string.c_str();
        -: 6600:
        -: 6601:    using internal::ParseFlag;
        -: 6602:
    #####: 6603:    bool remove_flag = false;
    #####: 6604:    if (ParseGoogleTestFlag(arg)) {
    #####: 6605:      remove_flag = true;
        -: 6606:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6607:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    #####: 6608:      GTEST_FLAG_SET(flagfile, flagfile_value);
    #####: 6609:      LoadFlagsFromFile(flagfile_value);
    #####: 6610:      remove_flag = true;
        -: 6611:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6612:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
        -: 6613:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6614:      // internal ones) trigger help display.
    #####: 6615:      g_help_flag = true;
        -: 6616:    }
        -: 6617:
    #####: 6618:    if (remove_flag) {
        -: 6619:      // Shift the remainder of the argv list left by one.  Note
        -: 6620:      // that argv has (*argc + 1) elements, the last one always being
        -: 6621:      // NULL.  The following loop moves the trailing NULL element as
        -: 6622:      // well.
    #####: 6623:      for (int j = i; j != *argc; j++) {
    #####: 6624:        argv[j] = argv[j + 1];
        -: 6625:      }
        -: 6626:
        -: 6627:      // Decrements the argument count.
    #####: 6628:      (*argc)--;
        -: 6629:
        -: 6630:      // We also need to decrement the iterator as we just removed
        -: 6631:      // an element.
    #####: 6632:      i--;
        -: 6633:    }
        -: 6634:  }
        -: 6635:
    #####: 6636:  if (g_help_flag) {
        -: 6637:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6638:    // latter may not be called at all if the user is using Google
        -: 6639:    // Test with another testing framework.
    #####: 6640:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6641:  }
    #####: 6642:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6595:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6596:  std::string flagfile_value;
    %%%%%: 6596-block  0
call    0 never executed
    #####: 6597:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6597-block  0
call    0 never executed
    %%%%%: 6597-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    $$$$$: 6597-block  2
call    3 never executed
    #####: 6598:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6599:    const char* const arg = arg_string.c_str();
    %%%%%: 6599-block  0
call    0 never executed
        -: 6600:
        -: 6601:    using internal::ParseFlag;
        -: 6602:
    #####: 6603:    bool remove_flag = false;
    #####: 6604:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6604-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6605:      remove_flag = true;
    %%%%%: 6605-block  0
        -: 6606:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6607:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6607-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6607-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6608:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6608-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6609:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6610:      remove_flag = true;
    %%%%%: 6610-block  0
        -: 6611:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6612:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6612-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6612-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6612-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6612-block  3
    %%%%%: 6612-block  4
    %%%%%: 6612-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
        -: 6613:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6614:      // internal ones) trigger help display.
    #####: 6615:      g_help_flag = true;
    %%%%%: 6615-block  0
        -: 6616:    }
        -: 6617:
    #####: 6618:    if (remove_flag) {
    %%%%%: 6618-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6619:      // Shift the remainder of the argv list left by one.  Note
        -: 6620:      // that argv has (*argc + 1) elements, the last one always being
        -: 6621:      // NULL.  The following loop moves the trailing NULL element as
        -: 6622:      // well.
    #####: 6623:      for (int j = i; j != *argc; j++) {
    %%%%%: 6623-block  0
    %%%%%: 6623-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6624:        argv[j] = argv[j + 1];
    %%%%%: 6624-block  0
        -: 6625:      }
        -: 6626:
        -: 6627:      // Decrements the argument count.
    #####: 6628:      (*argc)--;
        -: 6629:
        -: 6630:      // We also need to decrement the iterator as we just removed
        -: 6631:      // an element.
    #####: 6632:      i--;
    %%%%%: 6632-block  0
        -: 6633:    }
        -: 6634:  }
        -: 6635:
    #####: 6636:  if (g_help_flag) {
    %%%%%: 6636-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6637:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6638:    // latter may not be called at all if the user is using Google
        -: 6639:    // Test with another testing framework.
    #####: 6640:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6641:  }
    #####: 6642:}
    %%%%%: 6642-block  0
call    0 never executed
    $$$$$: 6642-block  1
call    1 never executed
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6595:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6596:  std::string flagfile_value;
    %%%%%: 6596-block  0
call    0 never executed
    #####: 6597:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6597-block  0
call    0 never executed
    %%%%%: 6597-block  1
branch  1 never executed
branch  2 never executed (fallthrough)
    $$$$$: 6597-block  2
call    3 never executed
    #####: 6598:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6598-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6599:    const char* const arg = arg_string.c_str();
    %%%%%: 6599-block  0
call    0 never executed
        -: 6600:
        -: 6601:    using internal::ParseFlag;
        -: 6602:
    #####: 6603:    bool remove_flag = false;
    #####: 6604:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6604-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6605:      remove_flag = true;
    %%%%%: 6605-block  0
        -: 6606:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6607:    } else if (ParseFlag(arg, "flagfile", &flagfile_value)) {
    %%%%%: 6607-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6607-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####: 6608:      GTEST_FLAG_SET(flagfile, flagfile_value);
    %%%%%: 6608-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6609:      LoadFlagsFromFile(flagfile_value);
    %%%%%: 6609-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####: 6610:      remove_flag = true;
    %%%%%: 6610-block  0
        -: 6611:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6612:    } else if (arg_string == "--help" || HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6612-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6612-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%: 6612-block  2
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%: 6612-block  3
    %%%%%: 6612-block  4
    %%%%%: 6612-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
        -: 6613:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6614:      // internal ones) trigger help display.
    #####: 6615:      g_help_flag = true;
    %%%%%: 6615-block  0
        -: 6616:    }
        -: 6617:
    #####: 6618:    if (remove_flag) {
    %%%%%: 6618-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6619:      // Shift the remainder of the argv list left by one.  Note
        -: 6620:      // that argv has (*argc + 1) elements, the last one always being
        -: 6621:      // NULL.  The following loop moves the trailing NULL element as
        -: 6622:      // well.
    #####: 6623:      for (int j = i; j != *argc; j++) {
    %%%%%: 6623-block  0
    %%%%%: 6623-block  1
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6624:        argv[j] = argv[j + 1];
    %%%%%: 6624-block  0
        -: 6625:      }
        -: 6626:
        -: 6627:      // Decrements the argument count.
    #####: 6628:      (*argc)--;
        -: 6629:
        -: 6630:      // We also need to decrement the iterator as we just removed
        -: 6631:      // an element.
    #####: 6632:      i--;
    %%%%%: 6632-block  0
        -: 6633:    }
        -: 6634:  }
        -: 6635:
    #####: 6636:  if (g_help_flag) {
    %%%%%: 6636-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -: 6637:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6638:    // latter may not be called at all if the user is using Google
        -: 6639:    // Test with another testing framework.
    #####: 6640:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6640-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6641:  }
    #####: 6642:}
    %%%%%: 6642-block  0
call    0 never executed
    $$$$$: 6642-block  1
call    1 never executed
------------------
        -: 6643:
        -: 6644:// Parses the command line for Google Test flags, without initializing
        -: 6645:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 0 returned 0% blocks executed 0%
    #####: 6646:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        -: 6647:#if GTEST_HAS_ABSL
        -: 6648:  if (*argc > 0) {
        -: 6649:    // absl::ParseCommandLine() requires *argc > 0.
        -: 6650:    auto positional_args = absl::flags_internal::ParseCommandLineImpl(
        -: 6651:        *argc, argv, absl::flags_internal::ArgvListAction::kRemoveParsedArgs,
        -: 6652:        absl::flags_internal::UsageFlagsAction::kHandleUsage,
        -: 6653:        absl::flags_internal::OnUndefinedFlag::kReportUndefined);
        -: 6654:    // Any command-line positional arguments not part of any command-line flag
        -: 6655:    // (or arguments to a flag) are copied back out to argv, with the program
        -: 6656:    // invocation name at position 0, and argc is resized. This includes
        -: 6657:    // positional arguments after the flag-terminating delimiter '--'.
        -: 6658:    // See https://abseil.io/docs/cpp/guides/flags.
        -: 6659:    std::copy(positional_args.begin(), positional_args.end(), argv);
        -: 6660:    if (static_cast<int>(positional_args.size()) < *argc) {
        -: 6661:      argv[positional_args.size()] = nullptr;
        -: 6662:      *argc = static_cast<int>(positional_args.size());
        -: 6663:    }
        -: 6664:  }
        -: 6665:#else
    #####: 6666:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6666-block  0
call    0 never executed
        -: 6667:#endif
        -: 6668:
        -: 6669:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6670:  // *_NSGetArgv() == argv
        -: 6671:  // Only applicable to char** version of argv
        -: 6672:#if GTEST_OS_MAC
        -: 6673:#ifndef GTEST_OS_IOS
        -: 6674:  if (*_NSGetArgv() == argv) {
        -: 6675:    *_NSGetArgc() = *argc;
        -: 6676:  }
        -: 6677:#endif
        -: 6678:#endif
    #####: 6679:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6680:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6681:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6681-block  0
call    0 never executed
    #####: 6682:}
        -: 6683:
        -: 6684:// The internal implementation of InitGoogleTest().
        -: 6685://
        -: 6686:// The type parameter CharType can be instantiated to either char or
        -: 6687:// wchar_t.
        -: 6688:template <typename CharType>
    #####: 6689:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6690:  // We don't want to run the initialization code twice.
    #####: 6691:  if (GTestIsInitialized()) return;
        -: 6692:
    #####: 6693:  if (*argc <= 0) return;
        -: 6694:
    #####: 6695:  g_argvs.clear();
    #####: 6696:  for (int i = 0; i != *argc; i++) {
    #####: 6697:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6698:  }
        -: 6699:
        -: 6700:#if GTEST_HAS_ABSL
        -: 6701:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6702:
        -: 6703:  // When using the Abseil Flags library, set the program usage message to the
        -: 6704:  // help message, but remove the color-encoding from the message first.
        -: 6705:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6706:      kColorEncodedHelpMessage,
        -: 6707:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6708:#endif  // GTEST_HAS_ABSL
        -: 6709:
    #####: 6710:  ParseGoogleTestFlagsOnly(argc, argv);
    #####: 6711:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6712:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6689:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6690:  // We don't want to run the initialization code twice.
    #####: 6691:  if (GTestIsInitialized()) return;
    %%%%%: 6691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6691-block  1
        -: 6692:
    #####: 6693:  if (*argc <= 0) return;
    %%%%%: 6693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6693-block  1
        -: 6694:
    #####: 6695:  g_argvs.clear();
    %%%%%: 6695-block  0
call    0 never executed
    #####: 6696:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6696-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6697:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6697-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6697-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6697-block  2
call    6 never executed
    $$$$$: 6697-block  3
call    7 never executed
        -: 6698:  }
        -: 6699:
        -: 6700:#if GTEST_HAS_ABSL
        -: 6701:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6702:
        -: 6703:  // When using the Abseil Flags library, set the program usage message to the
        -: 6704:  // help message, but remove the color-encoding from the message first.
        -: 6705:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6706:      kColorEncodedHelpMessage,
        -: 6707:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6708:#endif  // GTEST_HAS_ABSL
        -: 6709:
    #####: 6710:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6710-block  0
call    0 never executed
    #####: 6711:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6712:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6689:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6690:  // We don't want to run the initialization code twice.
    #####: 6691:  if (GTestIsInitialized()) return;
    %%%%%: 6691-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%: 6691-block  1
        -: 6692:
    #####: 6693:  if (*argc <= 0) return;
    %%%%%: 6693-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6693-block  1
        -: 6694:
    #####: 6695:  g_argvs.clear();
    %%%%%: 6695-block  0
call    0 never executed
    #####: 6696:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6696-block  0
branch  0 never executed
branch  1 never executed (fallthrough)
    #####: 6697:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6697-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6697-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6697-block  2
call    6 never executed
    $$$$$: 6697-block  3
call    7 never executed
        -: 6698:  }
        -: 6699:
        -: 6700:#if GTEST_HAS_ABSL
        -: 6701:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6702:
        -: 6703:  // When using the Abseil Flags library, set the program usage message to the
        -: 6704:  // help message, but remove the color-encoding from the message first.
        -: 6705:  absl::SetProgramUsageMessage(absl::StrReplaceAll(
        -: 6706:      kColorEncodedHelpMessage,
        -: 6707:      {{"@D", ""}, {"@R", ""}, {"@G", ""}, {"@Y", ""}, {"@@", "@"}}));
        -: 6708:#endif  // GTEST_HAS_ABSL
        -: 6709:
    #####: 6710:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6710-block  0
call    0 never executed
    #####: 6711:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6712:}
------------------
        -: 6713:
        -: 6714:}  // namespace internal
        -: 6715:
        -: 6716:// Initializes Google Test.  This must be called before calling
        -: 6717:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6718:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6719:// seen, it is removed from argv, and *argc is decremented.
        -: 6720://
        -: 6721:// No value is returned.  Instead, the Google Test flag variables are
        -: 6722:// updated.
        -: 6723://
        -: 6724:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 0 returned 0% blocks executed 0%
    #####: 6725:void InitGoogleTest(int* argc, char** argv) {
        -: 6726:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6727:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6728:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6729:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6729-block  0
call    0 never executed
        -: 6730:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6731:}
        -: 6732:
        -: 6733:// This overloaded version can be used in Windows programs compiled in
        -: 6734:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6735:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6736:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6737:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6738:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6739:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6739-block  0
call    0 never executed
        -: 6740:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6741:}
        -: 6742:
        -: 6743:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6744:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6745:void InitGoogleTest() {
        -: 6746:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6747:  int argc = 1;
    #####: 6748:  const auto arg0 = "dummy";
    #####: 6749:  char* argv0 = const_cast<char*>(arg0);
    #####: 6750:  char** argv = &argv0;
        -: 6751:
        -: 6752:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6753:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6754:#else   // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6755:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6755-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6756:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6757:}
    %%%%%: 6757-block  0
        -: 6758:
        -: 6759:#if !defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6760:// Return value of first environment variable that is set and contains
        -: 6761:// a non-empty string. If there are none, return the "fallback" string.
        -: 6762:// Since we like the temporary directory to have a directory separator suffix,
        -: 6763:// add it if not provided in the environment variable value.
function _ZN7testingL17GetTempDirFromEnvESt16initializer_listIPKcES2_c called 0 returned 0% blocks executed 0%
    #####: 6764:static std::string GetTempDirFromEnv(
        -: 6765:    std::initializer_list<const char*> environment_variables,
        -: 6766:    const char* fallback, char separator) {
    #####: 6767:  for (const char* variable_name : environment_variables) {
    %%%%%: 6767-block  0
call    0 never executed
call    1 never executed
    %%%%%: 6767-block  1
    %%%%%: 6767-block  2
branch  2 never executed
branch  3 never executed (fallthrough)
    #####: 6768:    const char* value = internal::posix::GetEnv(variable_name);
    %%%%%: 6768-block  0
call    0 never executed
    #####: 6769:    if (value != nullptr && value[0] != '\0') {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%: 6769-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####: 6770:      if (value[strlen(value) - 1] != separator) {
    %%%%%: 6770-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####: 6771:        return std::string(value).append(1, separator);
    %%%%%: 6771-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6771-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%: 6771-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%: 6771-block  3
    %%%%%: 6771-block  4
call    9 never executed
    $$$$$: 6771-block  5
call   10 never executed
    $$$$$: 6771-block  6
    $$$$$: 6771-block  7
        -: 6772:      }
    #####: 6773:      return value;
    %%%%%: 6773-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    $$$$$: 6773-block  1
        -: 6774:    }
        -: 6775:  }
    #####: 6776:  return fallback;
    %%%%%: 6776-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -: 6777:}
        -: 6778:#endif
        -: 6779:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6780:std::string TempDir() {
        -: 6781:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6782:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6783:#elif GTEST_OS_WINDOWS || GTEST_OS_WINDOWS_MOBILE
    #####: 6784:  return GetTempDirFromEnv({"TEST_TMPDIR", "TEMP"}, "\\temp\\", '\\');
    %%%%%: 6784-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6784-block  1
    %%%%%: 6784-block  2
        -: 6785:#elif GTEST_OS_LINUX_ANDROID
        -: 6786:  return GetTempDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/data/local/tmp/", '/');
        -: 6787:#else
        -: 6788:  return GetTempDirFromEnv({"TEST_TMPDIR", "TMPDIR"}, "/tmp/", '/');
        -: 6789:#endif
        -: 6790:}
        -: 6791:
        -: 6792:// Class ScopedTrace
        -: 6793:
        -: 6794:// Pushes the given source file location and message onto a per-thread
        -: 6795:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6796:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6797:  internal::TraceInfo trace;
    %%%%%: 6797-block  0
call    0 never executed
    #####: 6798:  trace.file = file;
    #####: 6799:  trace.line = line;
    #####: 6800:  trace.message.swap(message);
call    0 never executed
        -: 6801:
    #####: 6802:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%: 6802-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####: 6803:}
    %%%%%: 6803-block  0
call    0 never executed
    $$$$$: 6803-block  1
call    1 never executed
        -: 6804:
        -: 6805:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6806:ScopedTrace::~ScopedTrace() GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6807:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6807-block  0
call    0 never executed
call    1 never executed
    #####: 6808:}
        -: 6809:
        -: 6810:}  // namespace testing
