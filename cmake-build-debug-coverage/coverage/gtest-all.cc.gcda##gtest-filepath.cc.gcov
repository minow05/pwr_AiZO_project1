        -:    0:Source:D:/GitHub_Repos/pwr_AiZO_project1/cmake-build-debug-coverage/_deps/googletest-src/googletest/src/gtest-filepath.cc
        -:    0:Graph:D:\GitHub_Repos\pwr_AiZO_project1\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\GitHub_Repos\pwr_AiZO_project1\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:#include "gtest/internal/gtest-filepath.h"
        -:   31:
        -:   32:#include <stdlib.h>
        -:   33:
        -:   34:#include "gtest/gtest-message.h"
        -:   35:#include "gtest/internal/gtest-port.h"
        -:   36:
        -:   37:#if GTEST_OS_WINDOWS_MOBILE
        -:   38:#include <windows.h>
        -:   39:#elif GTEST_OS_WINDOWS
        -:   40:#include <direct.h>
        -:   41:#include <io.h>
        -:   42:#else
        -:   43:#include <limits.h>
        -:   44:
        -:   45:#include <climits>  // Some Linux distributions define PATH_MAX here.
        -:   46:#endif              // GTEST_OS_WINDOWS_MOBILE
        -:   47:
        -:   48:#include "gtest/internal/gtest-string.h"
        -:   49:
        -:   50:#if GTEST_OS_WINDOWS
        -:   51:#define GTEST_PATH_MAX_ _MAX_PATH
        -:   52:#elif defined(PATH_MAX)
        -:   53:#define GTEST_PATH_MAX_ PATH_MAX
        -:   54:#elif defined(_XOPEN_PATH_MAX)
        -:   55:#define GTEST_PATH_MAX_ _XOPEN_PATH_MAX
        -:   56:#else
        -:   57:#define GTEST_PATH_MAX_ _POSIX_PATH_MAX
        -:   58:#endif  // GTEST_OS_WINDOWS
        -:   59:
        -:   60:namespace testing {
        -:   61:namespace internal {
        -:   62:
        -:   63:#if GTEST_OS_WINDOWS
        -:   64:// On Windows, '\\' is the standard path separator, but many tools and the
        -:   65:// Windows API also accept '/' as an alternate path separator. Unless otherwise
        -:   66:// noted, a file path can contain either kind of path separators, or a mixture
        -:   67:// of them.
        -:   68:const char kPathSeparator = '\\';
        -:   69:const char kAlternatePathSeparator = '/';
        -:   70:const char kAlternatePathSeparatorString[] = "/";
        -:   71:#if GTEST_OS_WINDOWS_MOBILE
        -:   72:// Windows CE doesn't have a current directory. You should not use
        -:   73:// the current directory in tests on Windows CE, but this at least
        -:   74:// provides a reasonable fallback.
        -:   75:const char kCurrentDirectoryString[] = "\\";
        -:   76:// Windows CE doesn't define INVALID_FILE_ATTRIBUTES
        -:   77:const DWORD kInvalidFileAttributes = 0xffffffff;
        -:   78:#else
        -:   79:const char kCurrentDirectoryString[] = ".\\";
        -:   80:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:   81:#else
        -:   82:const char kPathSeparator = '/';
        -:   83:const char kCurrentDirectoryString[] = "./";
        -:   84:#endif  // GTEST_OS_WINDOWS
        -:   85:
        -:   86:// Returns whether the given character is a valid path separator.
function _ZN7testing8internalL15IsPathSeparatorEc called 61 returned 100% blocks executed 100%
       61:   87:static bool IsPathSeparator(char c) {
        -:   88:#if GTEST_HAS_ALT_PATH_SEP_
       61:   89:  return (c == kPathSeparator) || (c == kAlternatePathSeparator);
       61:   89-block  0
branch  0 taken 58 (fallthrough)
branch  1 taken 3
       58:   89-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 58
        3:   89-block  2
       58:   89-block  3
       61:   89-block  4
        -:   90:#else
        -:   91:  return c == kPathSeparator;
        -:   92:#endif
        -:   93:}
        -:   94:
        -:   95:// Returns the current working directory, or "" if unsuccessful.
function _ZN7testing8internal8FilePath13GetCurrentDirEv called 1 returned 100% blocks executed 63%
        1:   96:FilePath FilePath::GetCurrentDir() {
        -:   97:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE ||         \
        -:   98:    GTEST_OS_WINDOWS_RT || GTEST_OS_ESP8266 || GTEST_OS_ESP32 || \
        -:   99:    GTEST_OS_XTENSA || GTEST_OS_QURT
        -:  100:  // These platforms do not have a current directory, so we just return
        -:  101:  // something reasonable.
        -:  102:  return FilePath(kCurrentDirectoryString);
        -:  103:#elif GTEST_OS_WINDOWS
        1:  104:  char cwd[GTEST_PATH_MAX_ + 1] = {'\0'};
        1:  104-block  0
       2*:  105:  return FilePath(_getcwd(cwd, sizeof(cwd)) == nullptr ? "" : cwd);
        1:  105-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  105-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:  105-block  2
    %%%%%:  105-block  3
        1:  105-block  4
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:  105-block  5
call    8 returned 1
branch  9 taken 1 (fallthrough)
branch 10 taken 0 (throw)
        1:  105-block  6
call   11 returned 1
        1:  105-block  7
    $$$$$:  105-block  8
call   12 never executed
    $$$$$:  105-block  9
    $$$$$:  105-block 10
        -:  106:#else
        -:  107:  char cwd[GTEST_PATH_MAX_ + 1] = {'\0'};
        -:  108:  char* result = getcwd(cwd, sizeof(cwd));
        -:  109:#if GTEST_OS_NACL
        -:  110:  // getcwd will likely fail in NaCl due to the sandbox, so return something
        -:  111:  // reasonable. The user may have provided a shim implementation for getcwd,
        -:  112:  // however, so fallback only when failure is detected.
        -:  113:  return FilePath(result == nullptr ? kCurrentDirectoryString : cwd);
        -:  114:#endif  // GTEST_OS_NACL
        -:  115:  return FilePath(result == nullptr ? "" : cwd);
        -:  116:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  117:}
        -:  118:
        -:  119:// Returns a copy of the FilePath with the case-insensitive extension removed.
        -:  120:// Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns
        -:  121:// FilePath("dir/file"). If a case-insensitive extension is not
        -:  122:// found, returns a copy of the original FilePath.
function _ZNK7testing8internal8FilePath15RemoveExtensionEPKc called 0 returned 0% blocks executed 0%
    #####:  123:FilePath FilePath::RemoveExtension(const char* extension) const {
    %%%%%:  123-block  0
    #####:  124:  const std::string dot_extension = std::string(".") + extension;
    %%%%%:  124-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  124-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  124-block  2
call    6 never executed
    $$$$$:  124-block  3
call    7 never executed
    $$$$$:  124-block  4
    $$$$$:  124-block  5
    #####:  125:  if (String::EndsWithCaseInsensitive(pathname_, dot_extension)) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  125-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
        -:  126:    return FilePath(
    #####:  127:        pathname_.substr(0, pathname_.length() - dot_extension.length()));
    %%%%%:  127-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  127-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  127-block  2
    %%%%%:  127-block  3
call    8 never executed
    $$$$$:  127-block  4
call    9 never executed
    $$$$$:  127-block  5
        -:  128:  }
    #####:  129:  return *this;
    %%%%%:  129-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  130:}
    %%%%%:  130-block  0
call    0 never executed
    $$$$$:  130-block  1
call    1 never executed
        -:  131:
        -:  132:// Returns a pointer to the last occurrence of a valid path separator in
        -:  133:// the FilePath. On Windows, for example, both '/' and '\' are valid path
        -:  134:// separators. Returns NULL if no path separator was found.
function _ZNK7testing8internal8FilePath21FindLastPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####:  135:const char* FilePath::FindLastPathSeparator() const {
    #####:  136:  const char* const last_sep = strrchr(c_str(), kPathSeparator);
    %%%%%:  136-block  0
call    0 never executed
        -:  137:#if GTEST_HAS_ALT_PATH_SEP_
    #####:  138:  const char* const last_alt_sep = strrchr(c_str(), kAlternatePathSeparator);
call    0 never executed
        -:  139:  // Comparing two pointers of which only one is NULL is undefined.
    #####:  140:  if (last_alt_sep != nullptr &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  140-block  0
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  141:      (last_sep == nullptr || last_alt_sep > last_sep)) {
    %%%%%:  141-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  142:    return last_alt_sep;
    %%%%%:  142-block  0
        -:  143:  }
        -:  144:#endif
    #####:  145:  return last_sep;
    %%%%%:  145-block  0
        -:  146:}
        -:  147:
function _ZNK7testing8internal8FilePath19CalculateRootLengthEv called 0 returned 0% blocks executed 0%
    #####:  148:size_t FilePath::CalculateRootLength() const {
    #####:  149:  const auto &path = pathname_;
    #####:  150:  auto s = path.begin();
    %%%%%:  150-block  0
call    0 never executed
    #####:  151:  auto end = path.end();
call    0 never executed
        -:  152:#if GTEST_OS_WINDOWS
    #####:  153:  if (end - s >= 2 && s[1] == ':' &&
call    0 never executed
    %%%%%:  153-block  0
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  154:      (end - s == 2 || IsPathSeparator(s[2])) &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  154-block  0
call    2 never executed
    %%%%%:  154-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  154-block  2
    %%%%%:  154-block  3
    %%%%%:  154-block  4
branch  7 never executed (fallthrough)
branch  8 never executed
    #####:  155:      (('A' <= s[0] && s[0] <= 'Z') || ('a' <= s[0] && s[0] <= 'z'))) {
    %%%%%:  155-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  155-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  155-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%:  155-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed
        -:  156:    // A typical absolute path like "C:\Windows" or "D:"
    #####:  157:    s += 2;
    %%%%%:  157-block  0
call    0 never executed
    #####:  158:    if (s != end) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  159:      ++s;
    %%%%%:  159-block  0
call    0 never executed
        -:  160:    }
    #####:  161:  } else if (end - s >= 3 && IsPathSeparator(*s) && IsPathSeparator(*(s + 1))
    %%%%%:  161-block  0
call    0 never executed
    %%%%%:  161-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  161-block  2
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    #####:  162:             && !IsPathSeparator(*(s + 2))) {
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  162-block  0
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  162-block  1
    %%%%%:  162-block  2
    %%%%%:  162-block  3
branch  7 never executed (fallthrough)
branch  8 never executed
        -:  163:    // Move past the "\\" prefix in a UNC path like "\\Server\Share\Folder"
    #####:  164:    s += 2;
    %%%%%:  164-block  0
call    0 never executed
        -:  165:    // Skip 2 components and their following separators ("Server\" and "Share\")
    #####:  166:    for (int i = 0; i < 2; ++i) {
    %%%%%:  166-block  0
    %%%%%:  166-block  1
branch  0 never executed
branch  1 never executed
    #####:  167:      while (s != end) {
    %%%%%:  167-block  0
    %%%%%:  167-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed (fallthrough)
    #####:  168:        bool stop = IsPathSeparator(*s);
    %%%%%:  168-block  0
call    0 never executed
call    1 never executed
    #####:  169:        ++s;
call    0 never executed
    #####:  170:        if (stop) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  171:          break;
    %%%%%:  171-block  0
        -:  172:        }
        -:  173:      }
        -:  174:    }
    #####:  175:  } else if (s != end && IsPathSeparator(*s)) {
    %%%%%:  175-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  175-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  175-block  2
    %%%%%:  175-block  3
    %%%%%:  175-block  4
branch  7 never executed (fallthrough)
branch  8 never executed
        -:  176:    // A drive-rooted path like "\Windows"
    #####:  177:    ++s;
    %%%%%:  177-block  0
call    0 never executed
        -:  178:  }
        -:  179:#else
        -:  180:  if (s != end && IsPathSeparator(*s)) {
        -:  181:    ++s;
        -:  182:  }
        -:  183:#endif
    #####:  184:  return static_cast<size_t>(s - path.begin());
    %%%%%:  184-block  0
call    0 never executed
call    1 never executed
    %%%%%:  184-block  1
        -:  185:}
        -:  186:
        -:  187:// Returns a copy of the FilePath with the directory part removed.
        -:  188:// Example: FilePath("path/to/file").RemoveDirectoryName() returns
        -:  189:// FilePath("file"). If there is no directory part ("just_a_file"), it returns
        -:  190:// the FilePath unmodified. If there is no file part ("just_a_dir/") it
        -:  191:// returns an empty FilePath ("").
        -:  192:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath19RemoveDirectoryNameEv called 0 returned 0% blocks executed 0%
    #####:  193:FilePath FilePath::RemoveDirectoryName() const {
    #####:  194:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  194-block  0
call    0 never executed
    #####:  195:  return last_sep ? FilePath(last_sep + 1) : *this;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  195-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  195-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  195-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  195-block  3
branch 11 never executed (fallthrough)
branch 12 never executed
    %%%%%:  195-block  4
call   13 never executed
    %%%%%:  195-block  5
branch 14 never executed (fallthrough)
branch 15 never executed
    %%%%%:  195-block  6
    %%%%%:  195-block  7
    $$$$$:  195-block  8
branch 16 never executed (fallthrough)
branch 17 never executed
    $$$$$:  195-block  9
call   18 never executed
    $$$$$:  195-block 10
    $$$$$:  195-block 11
branch 19 never executed (fallthrough)
branch 20 never executed
        -:  196:}
        -:  197:
        -:  198:// RemoveFileName returns the directory path with the filename removed.
        -:  199:// Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".
        -:  200:// If the FilePath is "a_file" or "/a_file", RemoveFileName returns
        -:  201:// FilePath("./") or, on Windows, FilePath(".\\"). If the filepath does
        -:  202:// not have a file, like "just/a/dir/", it returns the FilePath unmodified.
        -:  203:// On Windows platform, '\' is the path separator, otherwise it is '/'.
function _ZNK7testing8internal8FilePath14RemoveFileNameEv called 0 returned 0% blocks executed 0%
    #####:  204:FilePath FilePath::RemoveFileName() const {
    #####:  205:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  205-block  0
call    0 never executed
    #####:  206:  std::string dir;
call    0 never executed
    #####:  207:  if (last_sep) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  208:    dir = std::string(c_str(), static_cast<size_t>(last_sep + 1 - c_str()));
    %%%%%:  208-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  208-block  1
call    5 never executed
call    6 never executed
    $$$$$:  208-block  2
    $$$$$:  208-block  3
        -:  209:  } else {
    #####:  210:    dir = kCurrentDirectoryString;
    %%%%%:  210-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  211:  }
    #####:  212:  return FilePath(dir);
    %%%%%:  212-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  212-block  1
    #####:  213:}
    %%%%%:  213-block  0
call    0 never executed
    $$$$$:  213-block  1
call    1 never executed
        -:  214:
        -:  215:// Helper functions for naming files in a directory for xml output.
        -:  216:
        -:  217:// Given directory = "dir", base_name = "test", number = 0,
        -:  218:// extension = "xml", returns "dir/test.xml". If number is greater
        -:  219:// than zero (e.g., 12), returns "dir/test_12.xml".
        -:  220:// On Windows platform, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath12MakeFileNameERKS1_S3_iPKc called 0 returned 0% blocks executed 0%
    #####:  221:FilePath FilePath::MakeFileName(const FilePath& directory,
        -:  222:                                const FilePath& base_name, int number,
        -:  223:                                const char* extension) {
    #####:  224:  std::string file;
    %%%%%:  224-block  0
call    0 never executed
    #####:  225:  if (number == 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  226:    file = base_name.string() + "." + extension;
    %%%%%:  226-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  226-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  226-block  2
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  226-block  3
call   10 never executed
    $$$$$:  226-block  4
    $$$$$:  226-block  5
        -:  227:  } else {
        -:  228:    file =
    #####:  229:        base_name.string() + "_" + StreamableToString(number) + "." + extension;
    %%%%%:  229-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  229-block  1
call    3 never executed
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed (throw)
    %%%%%:  229-block  2
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed (throw)
    %%%%%:  229-block  3
call   10 never executed
branch 11 never executed (fallthrough)
branch 12 never executed (throw)
    %%%%%:  229-block  4
call   13 never executed
branch 14 never executed (fallthrough)
branch 15 never executed (throw)
    %%%%%:  229-block  5
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
    $$$$$:  229-block  6
call   22 never executed
    $$$$$:  229-block  7
call   23 never executed
    $$$$$:  229-block  8
call   24 never executed
    $$$$$:  229-block  9
    $$$$$:  229-block 10
call   25 never executed
    $$$$$:  229-block 11
    $$$$$:  229-block 12
    $$$$$:  229-block 13
    $$$$$:  229-block 14
        -:  230:  }
    #####:  231:  return ConcatPaths(directory, FilePath(file));
    %%%%%:  231-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  231-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  231-block  2
    %%%%%:  231-block  3
call    6 never executed
    %%%%%:  231-block  4
    $$$$$:  231-block  5
call    7 never executed
    $$$$$:  231-block  6
    #####:  232:}
call    0 never executed
    $$$$$:  232-block  0
call    1 never executed
        -:  233:
        -:  234:// Given directory = "dir", relative_path = "test.xml", returns "dir/test.xml".
        -:  235:// On Windows, uses \ as the separator rather than /.
function _ZN7testing8internal8FilePath11ConcatPathsERKS1_S3_ called 0 returned 0% blocks executed 0%
    #####:  236:FilePath FilePath::ConcatPaths(const FilePath& directory,
        -:  237:                               const FilePath& relative_path) {
    #####:  238:  if (directory.IsEmpty()) return relative_path;
    %%%%%:  238-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  238-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  238-block  2
    #####:  239:  const FilePath dir(directory.RemoveTrailingPathSeparator());
    %%%%%:  239-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  240:  return FilePath(dir.string() + kPathSeparator + relative_path.string());
    %%%%%:  240-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  240-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  240-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  240-block  3
    %%%%%:  240-block  4
call   11 never executed
call   12 never executed
    $$$$$:  240-block  5
call   13 never executed
    $$$$$:  240-block  6
call   14 never executed
    $$$$$:  240-block  7
    $$$$$:  240-block  8
    #####:  241:}
call    0 never executed
    $$$$$:  241-block  0
call    1 never executed
        -:  242:
        -:  243:// Returns true if pathname describes something findable in the file-system,
        -:  244:// either a file, directory, or whatever.
function _ZNK7testing8internal8FilePath21FileOrDirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####:  245:bool FilePath::FileOrDirectoryExists() const {
        -:  246:#if GTEST_OS_WINDOWS_MOBILE
        -:  247:  LPCWSTR unicode = String::AnsiToUtf16(pathname_.c_str());
        -:  248:  const DWORD attributes = GetFileAttributes(unicode);
        -:  249:  delete[] unicode;
        -:  250:  return attributes != kInvalidFileAttributes;
        -:  251:#else
    #####:  252:  posix::StatStruct file_stat{};
    #####:  253:  return posix::Stat(pathname_.c_str(), &file_stat) == 0;
    %%%%%:  253-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  253-block  1
    %%%%%:  253-block  2
        -:  254:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  255:}
        -:  256:
        -:  257:// Returns true if pathname describes a directory in the file-system
        -:  258:// that exists.
function _ZNK7testing8internal8FilePath15DirectoryExistsEv called 0 returned 0% blocks executed 0%
    #####:  259:bool FilePath::DirectoryExists() const {
    #####:  260:  bool result = false;
        -:  261:#if GTEST_OS_WINDOWS
        -:  262:  // Don't strip off trailing separator if path is a root directory on
        -:  263:  // Windows (like "C:\\").
    #####:  264:  const FilePath& path(IsRootDirectory() ? *this
    %%%%%:  264-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  265:                                         : RemoveTrailingPathSeparator());
    %%%%%:  265-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  265-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  266:#else
        -:  267:  const FilePath& path(*this);
        -:  268:#endif
        -:  269:
        -:  270:#if GTEST_OS_WINDOWS_MOBILE
        -:  271:  LPCWSTR unicode = String::AnsiToUtf16(path.c_str());
        -:  272:  const DWORD attributes = GetFileAttributes(unicode);
        -:  273:  delete[] unicode;
        -:  274:  if ((attributes != kInvalidFileAttributes) &&
        -:  275:      (attributes & FILE_ATTRIBUTE_DIRECTORY)) {
        -:  276:    result = true;
        -:  277:  }
        -:  278:#else
    #####:  279:  posix::StatStruct file_stat{};
    #####:  280:  result =
    #####:  281:      posix::Stat(path.c_str(), &file_stat) == 0 && posix::IsDir(file_stat);
    %%%%%:  281-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  281-block  1
branch  4 never executed (fallthrough)
branch  5 never executed
    %%%%%:  281-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed
    %%%%%:  281-block  3
    %%%%%:  281-block  4
        -:  282:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  283:
    #####:  284:  return result;
    %%%%%:  284-block  0
    #####:  285:}
    %%%%%:  285-block  0
call    0 never executed
    $$$$$:  285-block  1
call    1 never executed
        -:  286:
        -:  287:// Returns true if pathname describes a root directory. (Windows has one
        -:  288:// root directory per disk drive. UNC share roots are also included.)
function _ZNK7testing8internal8FilePath15IsRootDirectoryEv called 0 returned 0% blocks executed 0%
    #####:  289:bool FilePath::IsRootDirectory() const {
    #####:  290:  size_t root_length = CalculateRootLength();
    %%%%%:  290-block  0
call    0 never executed
    #####:  291:  return root_length > 0 && root_length == pathname_.size() &&
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  291-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  291-block  1
    %%%%%:  291-block  2
    #####:  292:         IsPathSeparator(pathname_[root_length - 1]);
    %%%%%:  292-block  0
call    0 never executed
call    1 never executed
    %%%%%:  292-block  1
        -:  293:}
        -:  294:
        -:  295:// Returns true if pathname describes an absolute path.
function _ZNK7testing8internal8FilePath14IsAbsolutePathEv called 0 returned 0% blocks executed 0%
    #####:  296:bool FilePath::IsAbsolutePath() const {
    #####:  297:  return CalculateRootLength() > 0;
    %%%%%:  297-block  0
call    0 never executed
        -:  298:}
        -:  299:
        -:  300:// Returns a pathname for a file that does not currently exist. The pathname
        -:  301:// will be directory/base_name.extension or
        -:  302:// directory/base_name_<number>.extension if directory/base_name.extension
        -:  303:// already exists. The number will be incremented until a pathname is found
        -:  304:// that does not already exist.
        -:  305:// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.
        -:  306:// There could be a race condition if two or more processes are calling this
        -:  307:// function at the same time -- they could both pick the same filename.
function _ZN7testing8internal8FilePath22GenerateUniqueFileNameERKS1_S3_PKc called 0 returned 0% blocks executed 0%
    #####:  308:FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,
        -:  309:                                          const FilePath& base_name,
        -:  310:                                          const char* extension) {
    #####:  311:  FilePath full_pathname;
    %%%%%:  311-block  0
call    0 never executed
    #####:  312:  int number = 0;
        -:  313:  do {
    #####:  314:    full_pathname.Set(MakeFileName(directory, base_name, number++, extension));
    %%%%%:  314-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  314-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  314-block  2
call    6 never executed
    $$$$$:  314-block  3
call    7 never executed
    $$$$$:  314-block  4
    #####:  315:  } while (full_pathname.FileOrDirectoryExists());
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  315-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:  316:  return full_pathname;
    %%%%%:  316-block  0
    %%%%%:  316-block  1
    =====:  317:}
    $$$$$:  317-block  0
call    0 never executed
        -:  318:
        -:  319:// Returns true if FilePath ends with a path separator, which indicates that
        -:  320:// it is intended to represent a directory. Returns false otherwise.
        -:  321:// This does NOT check that a directory (or file) actually exists.
function _ZNK7testing8internal8FilePath11IsDirectoryEv called 0 returned 0% blocks executed 0%
    #####:  322:bool FilePath::IsDirectory() const {
    #####:  323:  return !pathname_.empty() &&
    %%%%%:  323-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  323-block  1
    %%%%%:  323-block  2
    #####:  324:         IsPathSeparator(pathname_.c_str()[pathname_.length() - 1]);
    %%%%%:  324-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:  324-block  1
        -:  325:}
        -:  326:
        -:  327:// Create directories so that path exists. Returns true if successful or if
        -:  328:// the directories already exist; returns false if unable to create directories
        -:  329:// for any reason.
function _ZNK7testing8internal8FilePath28CreateDirectoriesRecursivelyEv called 0 returned 0% blocks executed 0%
    #####:  330:bool FilePath::CreateDirectoriesRecursively() const {
    #####:  331:  if (!this->IsDirectory()) {
    %%%%%:  331-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  332:    return false;
    %%%%%:  332-block  0
        -:  333:  }
        -:  334:
    #####:  335:  if (pathname_.length() == 0 || this->DirectoryExists()) {
    %%%%%:  335-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    %%%%%:  335-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  335-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    %%%%%:  335-block  3
    %%%%%:  335-block  4
    %%%%%:  335-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
    #####:  336:    return true;
    %%%%%:  336-block  0
        -:  337:  }
        -:  338:
    #####:  339:  const FilePath parent(this->RemoveTrailingPathSeparator().RemoveFileName());
    %%%%%:  339-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  339-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  339-block  2
call    6 never executed
    $$$$$:  339-block  3
call    7 never executed
    $$$$$:  339-block  4
    #####:  340:  return parent.CreateDirectoriesRecursively() && this->CreateFolder();
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  340-block  0
branch  3 never executed (fallthrough)
branch  4 never executed
    %%%%%:  340-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  340-block  2
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  340-block  3
    %%%%%:  340-block  4
    %%%%%:  340-block  5
    #####:  341:}
    %%%%%:  341-block  0
call    0 never executed
    $$$$$:  341-block  1
call    1 never executed
        -:  342:
        -:  343:// Create the directory so that path exists. Returns true if successful or
        -:  344:// if the directory already exists; returns false if unable to create the
        -:  345:// directory for any reason, including if the parent directory does not
        -:  346:// exist. Not named "CreateDirectory" because that's a macro on Windows.
function _ZNK7testing8internal8FilePath12CreateFolderEv called 0 returned 0% blocks executed 0%
    #####:  347:bool FilePath::CreateFolder() const {
        -:  348:#if GTEST_OS_WINDOWS_MOBILE
        -:  349:  FilePath removed_sep(this->RemoveTrailingPathSeparator());
        -:  350:  LPCWSTR unicode = String::AnsiToUtf16(removed_sep.c_str());
        -:  351:  int result = CreateDirectory(unicode, nullptr) ? 0 : -1;
        -:  352:  delete[] unicode;
        -:  353:#elif GTEST_OS_WINDOWS
    #####:  354:  int result = _mkdir(pathname_.c_str());
    %%%%%:  354-block  0
call    0 never executed
call    1 never executed
        -:  355:#elif GTEST_OS_ESP8266 || GTEST_OS_XTENSA || GTEST_OS_QURT
        -:  356:  // do nothing
        -:  357:  int result = 0;
        -:  358:#else
        -:  359:  int result = mkdir(pathname_.c_str(), 0777);
        -:  360:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  361:
    #####:  362:  if (result == -1) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  363:    return this->DirectoryExists();  // An error is OK if the directory exists.
    %%%%%:  363-block  0
call    0 never executed
        -:  364:  }
    #####:  365:  return true;  // No error.
    %%%%%:  365-block  0
        -:  366:}
        -:  367:
        -:  368:// If input name has a trailing separator character, remove it and return the
        -:  369:// name, otherwise return the name string unmodified.
        -:  370:// On Windows platform, uses \ as the separator, other platforms use /.
function _ZNK7testing8internal8FilePath27RemoveTrailingPathSeparatorEv called 0 returned 0% blocks executed 0%
    #####:  371:FilePath FilePath::RemoveTrailingPathSeparator() const {
    #####:  372:  return IsDirectory() ? FilePath(pathname_.substr(0, pathname_.length() - 1))
    %%%%%:  372-block  0
call    0 never executed
    %%%%%:  372-block  1
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  372-block  2
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  372-block  3
call    7 never executed
    %%%%%:  372-block  4
    $$$$$:  372-block  5
branch  8 never executed (fallthrough)
branch  9 never executed
    $$$$$:  372-block  6
call   10 never executed
    #####:  373:                       : *this;
branch  0 never executed (fallthrough)
branch  1 never executed
    %%%%%:  373-block  0
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  373-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  373-block  2
        -:  374:}
        -:  375:
        -:  376:// Removes any redundant separators that might be in the pathname.
        -:  377:// For example, "bar///foo" becomes "bar/foo". Does not eliminate other
        -:  378:// redundancies that might be in a pathname involving "." or "..".
        -:  379:// Note that "\\Host\Share" does not contain a redundancy on Windows!
function _ZN7testing8internal8FilePath9NormalizeEv called 1 returned 100% blocks executed 70%
        1:  380:void FilePath::Normalize() {
        1:  381:  auto out = pathname_.begin();
        1:  381-block  0
call    0 returned 1
        -:  382:
        1:  383:  auto i = pathname_.cbegin();
call    0 returned 1
        -:  384:#if GTEST_OS_WINDOWS
        -:  385:  // UNC paths are treated specially
       2*:  386:  if (pathname_.end() - i >= 3 && IsPathSeparator(*i) &&
call    0 returned 1
call    1 returned 1
        1:  386-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 never executed (fallthrough)
branch  7 never executed
       2*:  387:      IsPathSeparator(*(i + 1)) && !IsPathSeparator(*(i + 2))) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
    %%%%%:  387-block  0
call    2 never executed
call    3 never executed
call    4 never executed
    %%%%%:  387-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed (fallthrough)
branch  9 never executed
    %%%%%:  387-block  2
        1:  387-block  3
        1:  387-block  4
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    #####:  388:    *(out++) = kPathSeparator;
    %%%%%:  388-block  0
call    0 never executed
call    1 never executed
    #####:  389:    *(out++) = kPathSeparator;
call    0 never executed
call    1 never executed
        -:  390:  }
        -:  391:#endif
       61:  392:  while (i != pathname_.end()) {
        1:  392-block  0
       61:  392-block  1
call    0 returned 61
call    1 returned 61
branch  2 taken 60
branch  3 taken 1 (fallthrough)
       60:  393:    const char character = *i;
       60:  393-block  0
call    0 returned 60
       60:  394:    if (!IsPathSeparator(character)) {
call    0 returned 60
branch  1 taken 57 (fallthrough)
branch  2 taken 3
       57:  395:      *(out++) = character;
       57:  395-block  0
call    0 returned 57
call    1 returned 57
       6*:  396:    } else if (out == pathname_.begin() || *std::prev(out) != kPathSeparator) {
        3:  396-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0
        3:  396-block  1
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0
        3:  396-block  2
    %%%%%:  396-block  3
        3:  396-block  4
branch  7 taken 3 (fallthrough)
branch  8 taken 0
        3:  397:      *(out++) = kPathSeparator;
        3:  397-block  0
call    0 returned 3
call    1 returned 3
        -:  398:    }
       60:  399:    ++i;
       60:  399-block  0
call    0 returned 60
        -:  400:  }
        -:  401:
        1:  402:  pathname_.erase(out, pathname_.end());
        1:  402-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:  402-block  1
    $$$$$:  402-block  2
    $$$$$:  402-block  3
        1:  403:}
        1:  403-block  0
        -:  404:
        -:  405:}  // namespace internal
        -:  406:}  // namespace testing
